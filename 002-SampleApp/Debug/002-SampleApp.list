
002-SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001594  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08001744  08001744  00002744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800187c  0800187c  000030a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800187c  0800187c  0000287c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001884  08001884  000030a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001884  08001884  00002884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001888  08001888  00002888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0800188c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000030a4  2**0
                  CONTENTS
 10 .bss          0000016c  200000a4  200000a4  000030a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  000030a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000acd  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003f1  00000000  00000000  00003ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00003f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d8  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002be1  00000000  00000000  000041a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015c6  00000000  00000000  00006d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009810  00000000  00000000  0000834f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011b5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e58  00000000  00000000  00011ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  000129fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800172c 	.word	0x0800172c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	0800172c 	.word	0x0800172c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ArrayFillNumbers>:
#include <string.h>

int numbers[] = {456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};
int someData = 90;

void ArrayFillNumbers(int pNumbers[], unsigned int len){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++){
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	e015      	b.n	80002cc <ArrayFillNumbers+0x3c>
		pNumbers[i] = rand() % 1000;
 80002a0:	f000 fa16 	bl	80006d0 <rand>
 80002a4:	4602      	mov	r2, r0
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	6879      	ldr	r1, [r7, #4]
 80002ac:	4419      	add	r1, r3
 80002ae:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <ArrayFillNumbers+0x54>)
 80002b0:	fb83 0302 	smull	r0, r3, r3, r2
 80002b4:	1198      	asrs	r0, r3, #6
 80002b6:	17d3      	asrs	r3, r2, #31
 80002b8:	1ac3      	subs	r3, r0, r3
 80002ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002be:	fb00 f303 	mul.w	r3, r0, r3
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	600b      	str	r3, [r1, #0]
	for(int i = 0; i < len; i++){
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d8e5      	bhi.n	80002a0 <ArrayFillNumbers+0x10>
	}
	someData = 5;
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <ArrayFillNumbers+0x58>)
 80002d6:	2205      	movs	r2, #5
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	10624dd3 	.word	0x10624dd3
 80002e8:	20000044 	.word	0x20000044

080002ec <DisplayNumbers>:

void DisplayNumbers(int *pNumbers, unsigned int len, char *pMessage){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
	printf("%s",pMessage);
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	480e      	ldr	r0, [pc, #56]	@ (8000334 <DisplayNumbers+0x48>)
 80002fc:	f000 fae8 	bl	80008d0 <iprintf>

	for(int i = 0; i < len; i++){
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	e00b      	b.n	800031e <DisplayNumbers+0x32>
		printf("%5d\t",pNumbers[i]);
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	4413      	add	r3, r2
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4619      	mov	r1, r3
 8000312:	4809      	ldr	r0, [pc, #36]	@ (8000338 <DisplayNumbers+0x4c>)
 8000314:	f000 fadc 	bl	80008d0 <iprintf>
	for(int i = 0; i < len; i++){
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	3301      	adds	r3, #1
 800031c:	617b      	str	r3, [r7, #20]
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	68ba      	ldr	r2, [r7, #8]
 8000322:	429a      	cmp	r2, r3
 8000324:	d8ef      	bhi.n	8000306 <DisplayNumbers+0x1a>
	}

	printf("\n");
 8000326:	200a      	movs	r0, #10
 8000328:	f000 fae4 	bl	80008f4 <putchar>
}
 800032c:	bf00      	nop
 800032e:	3718      	adds	r7, #24
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	08001744 	.word	0x08001744
 8000338:	08001748 	.word	0x08001748

0800033c <SwapNumbers>:

void SwapNumbers(int *x, int *y){
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
	int temp = *x;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	60fb      	str	r3, [r7, #12]
	*x = *y;
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	601a      	str	r2, [r3, #0]
	*y = temp;
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	68fa      	ldr	r2, [r7, #12]
 8000358:	601a      	str	r2, [r3, #0]
	void (*jumpAddr) (void);
	jumpAddr = (void*)0x20000009;
	jumpAddr();
#endif

	someData = 10;
 800035a:	4b04      	ldr	r3, [pc, #16]	@ (800036c <SwapNumbers+0x30>)
 800035c:	220a      	movs	r2, #10
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	20000044 	.word	0x20000044

08000370 <BubbleSort>:

void BubbleSort(int *pNumbers, unsigned int len){
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	int i, j = 0, flag = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]

	for(i = 0; i < len - 1; i++){
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	e02f      	b.n	80003e8 <BubbleSort+0x78>
		flag = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]

		for(j = 0; j < len - 1 - i; j++){
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]
 8000390:	e01d      	b.n	80003ce <BubbleSort+0x5e>
			if(pNumbers[j] > pNumbers[j+1]){
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	3301      	adds	r3, #1
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	6879      	ldr	r1, [r7, #4]
 80003a4:	440b      	add	r3, r1
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dd0d      	ble.n	80003c8 <BubbleSort+0x58>
				SwapNumbers(&pNumbers[j], &pNumbers[j+1]);
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	18d0      	adds	r0, r2, r3
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	3301      	adds	r3, #1
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	4413      	add	r3, r2
 80003be:	4619      	mov	r1, r3
 80003c0:	f7ff ffbc 	bl	800033c <SwapNumbers>
				flag = 1;
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < len - 1 - i; j++){
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	3301      	adds	r3, #1
 80003cc:	613b      	str	r3, [r7, #16]
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	683a      	ldr	r2, [r7, #0]
 80003d2:	1ad3      	subs	r3, r2, r3
 80003d4:	1e5a      	subs	r2, r3, #1
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d8da      	bhi.n	8000392 <BubbleSort+0x22>
			}
		}

		if(flag == 0) break;
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <BubbleSort+0x84>
	for(i = 0; i < len - 1; i++){
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	1e5a      	subs	r2, r3, #1
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d8ca      	bhi.n	8000388 <BubbleSort+0x18>
	}
}
 80003f2:	e000      	b.n	80003f6 <BubbleSort+0x86>
		if(flag == 0) break;
 80003f4:	bf00      	nop
}
 80003f6:	bf00      	nop
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <InsertionSort>:

void InsertionSort(int *pNumbers, unsigned int len){
 80003fe:	b480      	push	{r7}
 8000400:	b087      	sub	sp, #28
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
 8000406:	6039      	str	r1, [r7, #0]
	int i, j, num;

	for(i = 1; i < len; i++){
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	e02c      	b.n	8000468 <InsertionSort+0x6a>
		j = i-1;
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	3b01      	subs	r3, #1
 8000412:	613b      	str	r3, [r7, #16]
		num = pNumbers[i];
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	4413      	add	r3, r2
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	60fb      	str	r3, [r7, #12]

		while((j > -1) && (pNumbers[j] > num)){
 8000420:	e00d      	b.n	800043e <InsertionSort+0x40>
			pNumbers[j+1] = pNumbers[j];
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	441a      	add	r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	3301      	adds	r3, #1
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	440b      	add	r3, r1
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	601a      	str	r2, [r3, #0]
			j--;
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	3b01      	subs	r3, #1
 800043c:	613b      	str	r3, [r7, #16]
		while((j > -1) && (pNumbers[j] > num)){
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	2b00      	cmp	r3, #0
 8000442:	db07      	blt.n	8000454 <InsertionSort+0x56>
 8000444:	693b      	ldr	r3, [r7, #16]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4413      	add	r3, r2
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	429a      	cmp	r2, r3
 8000452:	dbe6      	blt.n	8000422 <InsertionSort+0x24>
		}

		pNumbers[j+1] = num;
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	3301      	adds	r3, #1
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	601a      	str	r2, [r3, #0]
	for(i = 1; i < len; i++){
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	429a      	cmp	r2, r3
 800046e:	d8ce      	bhi.n	800040e <InsertionSort+0x10>
	}
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	371c      	adds	r7, #28
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
	...

08000480 <main>:


int main(){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
	unsigned int len = sizeof(numbers)/sizeof(int);
 8000486:	2311      	movs	r3, #17
 8000488:	607b      	str	r3, [r7, #4]

	ArrayFillNumbers(numbers, len);
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	4813      	ldr	r0, [pc, #76]	@ (80004dc <main+0x5c>)
 800048e:	f7ff feff 	bl	8000290 <ArrayFillNumbers>

	DisplayNumbers(numbers, len, "B-unsorted array: ");
 8000492:	4a13      	ldr	r2, [pc, #76]	@ (80004e0 <main+0x60>)
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	4811      	ldr	r0, [pc, #68]	@ (80004dc <main+0x5c>)
 8000498:	f7ff ff28 	bl	80002ec <DisplayNumbers>

	BubbleSort(numbers, len);
 800049c:	6879      	ldr	r1, [r7, #4]
 800049e:	480f      	ldr	r0, [pc, #60]	@ (80004dc <main+0x5c>)
 80004a0:	f7ff ff66 	bl	8000370 <BubbleSort>

	DisplayNumbers(numbers, len, "B-sorted array: ");
 80004a4:	4a0f      	ldr	r2, [pc, #60]	@ (80004e4 <main+0x64>)
 80004a6:	6879      	ldr	r1, [r7, #4]
 80004a8:	480c      	ldr	r0, [pc, #48]	@ (80004dc <main+0x5c>)
 80004aa:	f7ff ff1f 	bl	80002ec <DisplayNumbers>

	ArrayFillNumbers(numbers, len);
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	480a      	ldr	r0, [pc, #40]	@ (80004dc <main+0x5c>)
 80004b2:	f7ff feed 	bl	8000290 <ArrayFillNumbers>

	DisplayNumbers(numbers, len, "I-unsorted array: ");
 80004b6:	4a0c      	ldr	r2, [pc, #48]	@ (80004e8 <main+0x68>)
 80004b8:	6879      	ldr	r1, [r7, #4]
 80004ba:	4808      	ldr	r0, [pc, #32]	@ (80004dc <main+0x5c>)
 80004bc:	f7ff ff16 	bl	80002ec <DisplayNumbers>

	InsertionSort(numbers, len);
 80004c0:	6879      	ldr	r1, [r7, #4]
 80004c2:	4806      	ldr	r0, [pc, #24]	@ (80004dc <main+0x5c>)
 80004c4:	f7ff ff9b 	bl	80003fe <InsertionSort>

	DisplayNumbers(numbers, len, "I-sorted array: ");
 80004c8:	4a08      	ldr	r2, [pc, #32]	@ (80004ec <main+0x6c>)
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	4803      	ldr	r0, [pc, #12]	@ (80004dc <main+0x5c>)
 80004ce:	f7ff ff0d 	bl	80002ec <DisplayNumbers>

	return 0;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000000 	.word	0x20000000
 80004e0:	08001750 	.word	0x08001750
 80004e4:	08001764 	.word	0x08001764
 80004e8:	08001778 	.word	0x08001778
 80004ec:	0800178c 	.word	0x0800178c

080004f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return 1;
 80004f4:	2301      	movs	r3, #1
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <_kill>:

int _kill(int pid, int sig)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800050a:	f000 fa8d 	bl	8000a28 <__errno>
 800050e:	4603      	mov	r3, r0
 8000510:	2216      	movs	r2, #22
 8000512:	601a      	str	r2, [r3, #0]
  return -1;
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <_exit>:

void _exit (int status)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000528:	f04f 31ff 	mov.w	r1, #4294967295
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffe7 	bl	8000500 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000532:	bf00      	nop
 8000534:	e7fd      	b.n	8000532 <_exit+0x12>

08000536 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b086      	sub	sp, #24
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	e00a      	b.n	800055e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000548:	f3af 8000 	nop.w
 800054c:	4601      	mov	r1, r0
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	60ba      	str	r2, [r7, #8]
 8000554:	b2ca      	uxtb	r2, r1
 8000556:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	3301      	adds	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	697a      	ldr	r2, [r7, #20]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	dbf0      	blt.n	8000548 <_read+0x12>
  }

  return len;
 8000566:	687b      	ldr	r3, [r7, #4]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	e009      	b.n	8000596 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	60ba      	str	r2, [r7, #8]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	3301      	adds	r3, #1
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	429a      	cmp	r2, r3
 800059c:	dbf1      	blt.n	8000582 <_write+0x12>
  }
  return len;
 800059e:	687b      	ldr	r3, [r7, #4]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_close>:

int _close(int file)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005d0:	605a      	str	r2, [r3, #4]
  return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <_isatty>:

int _isatty(int file)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005e8:	2301      	movs	r3, #1
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b085      	sub	sp, #20
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000618:	4a14      	ldr	r2, [pc, #80]	@ (800066c <_sbrk+0x5c>)
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <_sbrk+0x60>)
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <_sbrk+0x64>)
 800062e:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <_sbrk+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <_sbrk+0x64>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	429a      	cmp	r2, r3
 800063e:	d207      	bcs.n	8000650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000640:	f000 f9f2 	bl	8000a28 <__errno>
 8000644:	4603      	mov	r3, r0
 8000646:	220c      	movs	r2, #12
 8000648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	e009      	b.n	8000664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <_sbrk+0x64>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	4a05      	ldr	r2, [pc, #20]	@ (8000674 <_sbrk+0x64>)
 8000660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20030000 	.word	0x20030000
 8000670:	00000400 	.word	0x00000400
 8000674:	200000c0 	.word	0x200000c0
 8000678:	20000210 	.word	0x20000210

0800067c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800067c:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800067e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000680:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	@ (80006bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <LoopForever+0xe>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	@ (80006c8 <LoopForever+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006aa:	f000 f9c3 	bl	8000a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ae:	f7ff fee7 	bl	8000480 <main>

080006b2 <LoopForever>:

LoopForever:
  b LoopForever
 80006b2:	e7fe      	b.n	80006b2 <LoopForever>
  ldr   r0, =_estack
 80006b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80006c0:	0800188c 	.word	0x0800188c
  ldr r2, =_sbss
 80006c4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80006c8:	20000210 	.word	0x20000210

080006cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC_IRQHandler>
	...

080006d0 <rand>:
 80006d0:	4b16      	ldr	r3, [pc, #88]	@ (800072c <rand+0x5c>)
 80006d2:	b510      	push	{r4, lr}
 80006d4:	681c      	ldr	r4, [r3, #0]
 80006d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80006d8:	b9b3      	cbnz	r3, 8000708 <rand+0x38>
 80006da:	2018      	movs	r0, #24
 80006dc:	f000 fa3a 	bl	8000b54 <malloc>
 80006e0:	4602      	mov	r2, r0
 80006e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80006e4:	b920      	cbnz	r0, 80006f0 <rand+0x20>
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <rand+0x60>)
 80006e8:	4812      	ldr	r0, [pc, #72]	@ (8000734 <rand+0x64>)
 80006ea:	2152      	movs	r1, #82	@ 0x52
 80006ec:	f000 f9ca 	bl	8000a84 <__assert_func>
 80006f0:	4911      	ldr	r1, [pc, #68]	@ (8000738 <rand+0x68>)
 80006f2:	4b12      	ldr	r3, [pc, #72]	@ (800073c <rand+0x6c>)
 80006f4:	e9c0 1300 	strd	r1, r3, [r0]
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <rand+0x70>)
 80006fa:	6083      	str	r3, [r0, #8]
 80006fc:	230b      	movs	r3, #11
 80006fe:	8183      	strh	r3, [r0, #12]
 8000700:	2100      	movs	r1, #0
 8000702:	2001      	movs	r0, #1
 8000704:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000708:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800070a:	480e      	ldr	r0, [pc, #56]	@ (8000744 <rand+0x74>)
 800070c:	690b      	ldr	r3, [r1, #16]
 800070e:	694c      	ldr	r4, [r1, #20]
 8000710:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <rand+0x78>)
 8000712:	4358      	muls	r0, r3
 8000714:	fb02 0004 	mla	r0, r2, r4, r0
 8000718:	fba3 3202 	umull	r3, r2, r3, r2
 800071c:	3301      	adds	r3, #1
 800071e:	eb40 0002 	adc.w	r0, r0, r2
 8000722:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000726:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800072a:	bd10      	pop	{r4, pc}
 800072c:	20000054 	.word	0x20000054
 8000730:	0800179d 	.word	0x0800179d
 8000734:	080017b4 	.word	0x080017b4
 8000738:	abcd330e 	.word	0xabcd330e
 800073c:	e66d1234 	.word	0xe66d1234
 8000740:	0005deec 	.word	0x0005deec
 8000744:	5851f42d 	.word	0x5851f42d
 8000748:	4c957f2d 	.word	0x4c957f2d

0800074c <std>:
 800074c:	2300      	movs	r3, #0
 800074e:	b510      	push	{r4, lr}
 8000750:	4604      	mov	r4, r0
 8000752:	e9c0 3300 	strd	r3, r3, [r0]
 8000756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800075a:	6083      	str	r3, [r0, #8]
 800075c:	8181      	strh	r1, [r0, #12]
 800075e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000760:	81c2      	strh	r2, [r0, #14]
 8000762:	6183      	str	r3, [r0, #24]
 8000764:	4619      	mov	r1, r3
 8000766:	2208      	movs	r2, #8
 8000768:	305c      	adds	r0, #92	@ 0x5c
 800076a:	f000 f90e 	bl	800098a <memset>
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <std+0x58>)
 8000770:	6263      	str	r3, [r4, #36]	@ 0x24
 8000772:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <std+0x5c>)
 8000774:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <std+0x60>)
 8000778:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <std+0x64>)
 800077c:	6323      	str	r3, [r4, #48]	@ 0x30
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <std+0x68>)
 8000780:	6224      	str	r4, [r4, #32]
 8000782:	429c      	cmp	r4, r3
 8000784:	d006      	beq.n	8000794 <std+0x48>
 8000786:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800078a:	4294      	cmp	r4, r2
 800078c:	d002      	beq.n	8000794 <std+0x48>
 800078e:	33d0      	adds	r3, #208	@ 0xd0
 8000790:	429c      	cmp	r4, r3
 8000792:	d105      	bne.n	80007a0 <std+0x54>
 8000794:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800079c:	f000 b96e 	b.w	8000a7c <__retarget_lock_init_recursive>
 80007a0:	bd10      	pop	{r4, pc}
 80007a2:	bf00      	nop
 80007a4:	08000905 	.word	0x08000905
 80007a8:	08000927 	.word	0x08000927
 80007ac:	0800095f 	.word	0x0800095f
 80007b0:	08000983 	.word	0x08000983
 80007b4:	200000c4 	.word	0x200000c4

080007b8 <stdio_exit_handler>:
 80007b8:	4a02      	ldr	r2, [pc, #8]	@ (80007c4 <stdio_exit_handler+0xc>)
 80007ba:	4903      	ldr	r1, [pc, #12]	@ (80007c8 <stdio_exit_handler+0x10>)
 80007bc:	4803      	ldr	r0, [pc, #12]	@ (80007cc <stdio_exit_handler+0x14>)
 80007be:	f000 b869 	b.w	8000894 <_fwalk_sglue>
 80007c2:	bf00      	nop
 80007c4:	20000048 	.word	0x20000048
 80007c8:	08001369 	.word	0x08001369
 80007cc:	20000058 	.word	0x20000058

080007d0 <cleanup_stdio>:
 80007d0:	6841      	ldr	r1, [r0, #4]
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <cleanup_stdio+0x34>)
 80007d4:	4299      	cmp	r1, r3
 80007d6:	b510      	push	{r4, lr}
 80007d8:	4604      	mov	r4, r0
 80007da:	d001      	beq.n	80007e0 <cleanup_stdio+0x10>
 80007dc:	f000 fdc4 	bl	8001368 <_fflush_r>
 80007e0:	68a1      	ldr	r1, [r4, #8]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <cleanup_stdio+0x38>)
 80007e4:	4299      	cmp	r1, r3
 80007e6:	d002      	beq.n	80007ee <cleanup_stdio+0x1e>
 80007e8:	4620      	mov	r0, r4
 80007ea:	f000 fdbd 	bl	8001368 <_fflush_r>
 80007ee:	68e1      	ldr	r1, [r4, #12]
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <cleanup_stdio+0x3c>)
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d004      	beq.n	8000800 <cleanup_stdio+0x30>
 80007f6:	4620      	mov	r0, r4
 80007f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007fc:	f000 bdb4 	b.w	8001368 <_fflush_r>
 8000800:	bd10      	pop	{r4, pc}
 8000802:	bf00      	nop
 8000804:	200000c4 	.word	0x200000c4
 8000808:	2000012c 	.word	0x2000012c
 800080c:	20000194 	.word	0x20000194

08000810 <global_stdio_init.part.0>:
 8000810:	b510      	push	{r4, lr}
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <global_stdio_init.part.0+0x30>)
 8000814:	4c0b      	ldr	r4, [pc, #44]	@ (8000844 <global_stdio_init.part.0+0x34>)
 8000816:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <global_stdio_init.part.0+0x38>)
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	4620      	mov	r0, r4
 800081c:	2200      	movs	r2, #0
 800081e:	2104      	movs	r1, #4
 8000820:	f7ff ff94 	bl	800074c <std>
 8000824:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000828:	2201      	movs	r2, #1
 800082a:	2109      	movs	r1, #9
 800082c:	f7ff ff8e 	bl	800074c <std>
 8000830:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000834:	2202      	movs	r2, #2
 8000836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800083a:	2112      	movs	r1, #18
 800083c:	f7ff bf86 	b.w	800074c <std>
 8000840:	200001fc 	.word	0x200001fc
 8000844:	200000c4 	.word	0x200000c4
 8000848:	080007b9 	.word	0x080007b9

0800084c <__sfp_lock_acquire>:
 800084c:	4801      	ldr	r0, [pc, #4]	@ (8000854 <__sfp_lock_acquire+0x8>)
 800084e:	f000 b916 	b.w	8000a7e <__retarget_lock_acquire_recursive>
 8000852:	bf00      	nop
 8000854:	20000205 	.word	0x20000205

08000858 <__sfp_lock_release>:
 8000858:	4801      	ldr	r0, [pc, #4]	@ (8000860 <__sfp_lock_release+0x8>)
 800085a:	f000 b911 	b.w	8000a80 <__retarget_lock_release_recursive>
 800085e:	bf00      	nop
 8000860:	20000205 	.word	0x20000205

08000864 <__sinit>:
 8000864:	b510      	push	{r4, lr}
 8000866:	4604      	mov	r4, r0
 8000868:	f7ff fff0 	bl	800084c <__sfp_lock_acquire>
 800086c:	6a23      	ldr	r3, [r4, #32]
 800086e:	b11b      	cbz	r3, 8000878 <__sinit+0x14>
 8000870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000874:	f7ff bff0 	b.w	8000858 <__sfp_lock_release>
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <__sinit+0x28>)
 800087a:	6223      	str	r3, [r4, #32]
 800087c:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <__sinit+0x2c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1f5      	bne.n	8000870 <__sinit+0xc>
 8000884:	f7ff ffc4 	bl	8000810 <global_stdio_init.part.0>
 8000888:	e7f2      	b.n	8000870 <__sinit+0xc>
 800088a:	bf00      	nop
 800088c:	080007d1 	.word	0x080007d1
 8000890:	200001fc 	.word	0x200001fc

08000894 <_fwalk_sglue>:
 8000894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000898:	4607      	mov	r7, r0
 800089a:	4688      	mov	r8, r1
 800089c:	4614      	mov	r4, r2
 800089e:	2600      	movs	r6, #0
 80008a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008a4:	f1b9 0901 	subs.w	r9, r9, #1
 80008a8:	d505      	bpl.n	80008b6 <_fwalk_sglue+0x22>
 80008aa:	6824      	ldr	r4, [r4, #0]
 80008ac:	2c00      	cmp	r4, #0
 80008ae:	d1f7      	bne.n	80008a0 <_fwalk_sglue+0xc>
 80008b0:	4630      	mov	r0, r6
 80008b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008b6:	89ab      	ldrh	r3, [r5, #12]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d907      	bls.n	80008cc <_fwalk_sglue+0x38>
 80008bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008c0:	3301      	adds	r3, #1
 80008c2:	d003      	beq.n	80008cc <_fwalk_sglue+0x38>
 80008c4:	4629      	mov	r1, r5
 80008c6:	4638      	mov	r0, r7
 80008c8:	47c0      	blx	r8
 80008ca:	4306      	orrs	r6, r0
 80008cc:	3568      	adds	r5, #104	@ 0x68
 80008ce:	e7e9      	b.n	80008a4 <_fwalk_sglue+0x10>

080008d0 <iprintf>:
 80008d0:	b40f      	push	{r0, r1, r2, r3}
 80008d2:	b507      	push	{r0, r1, r2, lr}
 80008d4:	4906      	ldr	r1, [pc, #24]	@ (80008f0 <iprintf+0x20>)
 80008d6:	ab04      	add	r3, sp, #16
 80008d8:	6808      	ldr	r0, [r1, #0]
 80008da:	f853 2b04 	ldr.w	r2, [r3], #4
 80008de:	6881      	ldr	r1, [r0, #8]
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	f000 fa17 	bl	8000d14 <_vfiprintf_r>
 80008e6:	b003      	add	sp, #12
 80008e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80008ec:	b004      	add	sp, #16
 80008ee:	4770      	bx	lr
 80008f0:	20000054 	.word	0x20000054

080008f4 <putchar>:
 80008f4:	4b02      	ldr	r3, [pc, #8]	@ (8000900 <putchar+0xc>)
 80008f6:	4601      	mov	r1, r0
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	6882      	ldr	r2, [r0, #8]
 80008fc:	f000 bd6e 	b.w	80013dc <_putc_r>
 8000900:	20000054 	.word	0x20000054

08000904 <__sread>:
 8000904:	b510      	push	{r4, lr}
 8000906:	460c      	mov	r4, r1
 8000908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800090c:	f000 f868 	bl	80009e0 <_read_r>
 8000910:	2800      	cmp	r0, #0
 8000912:	bfab      	itete	ge
 8000914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000916:	89a3      	ldrhlt	r3, [r4, #12]
 8000918:	181b      	addge	r3, r3, r0
 800091a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800091e:	bfac      	ite	ge
 8000920:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000922:	81a3      	strhlt	r3, [r4, #12]
 8000924:	bd10      	pop	{r4, pc}

08000926 <__swrite>:
 8000926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800092a:	461f      	mov	r7, r3
 800092c:	898b      	ldrh	r3, [r1, #12]
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	4605      	mov	r5, r0
 8000932:	460c      	mov	r4, r1
 8000934:	4616      	mov	r6, r2
 8000936:	d505      	bpl.n	8000944 <__swrite+0x1e>
 8000938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800093c:	2302      	movs	r3, #2
 800093e:	2200      	movs	r2, #0
 8000940:	f000 f83c 	bl	80009bc <_lseek_r>
 8000944:	89a3      	ldrh	r3, [r4, #12]
 8000946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800094a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800094e:	81a3      	strh	r3, [r4, #12]
 8000950:	4632      	mov	r2, r6
 8000952:	463b      	mov	r3, r7
 8000954:	4628      	mov	r0, r5
 8000956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800095a:	f000 b853 	b.w	8000a04 <_write_r>

0800095e <__sseek>:
 800095e:	b510      	push	{r4, lr}
 8000960:	460c      	mov	r4, r1
 8000962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000966:	f000 f829 	bl	80009bc <_lseek_r>
 800096a:	1c43      	adds	r3, r0, #1
 800096c:	89a3      	ldrh	r3, [r4, #12]
 800096e:	bf15      	itete	ne
 8000970:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800097a:	81a3      	strheq	r3, [r4, #12]
 800097c:	bf18      	it	ne
 800097e:	81a3      	strhne	r3, [r4, #12]
 8000980:	bd10      	pop	{r4, pc}

08000982 <__sclose>:
 8000982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000986:	f000 b809 	b.w	800099c <_close_r>

0800098a <memset>:
 800098a:	4402      	add	r2, r0
 800098c:	4603      	mov	r3, r0
 800098e:	4293      	cmp	r3, r2
 8000990:	d100      	bne.n	8000994 <memset+0xa>
 8000992:	4770      	bx	lr
 8000994:	f803 1b01 	strb.w	r1, [r3], #1
 8000998:	e7f9      	b.n	800098e <memset+0x4>
	...

0800099c <_close_r>:
 800099c:	b538      	push	{r3, r4, r5, lr}
 800099e:	4d06      	ldr	r5, [pc, #24]	@ (80009b8 <_close_r+0x1c>)
 80009a0:	2300      	movs	r3, #0
 80009a2:	4604      	mov	r4, r0
 80009a4:	4608      	mov	r0, r1
 80009a6:	602b      	str	r3, [r5, #0]
 80009a8:	f7ff fdfe 	bl	80005a8 <_close>
 80009ac:	1c43      	adds	r3, r0, #1
 80009ae:	d102      	bne.n	80009b6 <_close_r+0x1a>
 80009b0:	682b      	ldr	r3, [r5, #0]
 80009b2:	b103      	cbz	r3, 80009b6 <_close_r+0x1a>
 80009b4:	6023      	str	r3, [r4, #0]
 80009b6:	bd38      	pop	{r3, r4, r5, pc}
 80009b8:	20000200 	.word	0x20000200

080009bc <_lseek_r>:
 80009bc:	b538      	push	{r3, r4, r5, lr}
 80009be:	4d07      	ldr	r5, [pc, #28]	@ (80009dc <_lseek_r+0x20>)
 80009c0:	4604      	mov	r4, r0
 80009c2:	4608      	mov	r0, r1
 80009c4:	4611      	mov	r1, r2
 80009c6:	2200      	movs	r2, #0
 80009c8:	602a      	str	r2, [r5, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	f7ff fe13 	bl	80005f6 <_lseek>
 80009d0:	1c43      	adds	r3, r0, #1
 80009d2:	d102      	bne.n	80009da <_lseek_r+0x1e>
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	b103      	cbz	r3, 80009da <_lseek_r+0x1e>
 80009d8:	6023      	str	r3, [r4, #0]
 80009da:	bd38      	pop	{r3, r4, r5, pc}
 80009dc:	20000200 	.word	0x20000200

080009e0 <_read_r>:
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4d07      	ldr	r5, [pc, #28]	@ (8000a00 <_read_r+0x20>)
 80009e4:	4604      	mov	r4, r0
 80009e6:	4608      	mov	r0, r1
 80009e8:	4611      	mov	r1, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	602a      	str	r2, [r5, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	f7ff fda1 	bl	8000536 <_read>
 80009f4:	1c43      	adds	r3, r0, #1
 80009f6:	d102      	bne.n	80009fe <_read_r+0x1e>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	b103      	cbz	r3, 80009fe <_read_r+0x1e>
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
 8000a00:	20000200 	.word	0x20000200

08000a04 <_write_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	4d07      	ldr	r5, [pc, #28]	@ (8000a24 <_write_r+0x20>)
 8000a08:	4604      	mov	r4, r0
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	602a      	str	r2, [r5, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	f7ff fdac 	bl	8000570 <_write>
 8000a18:	1c43      	adds	r3, r0, #1
 8000a1a:	d102      	bne.n	8000a22 <_write_r+0x1e>
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	b103      	cbz	r3, 8000a22 <_write_r+0x1e>
 8000a20:	6023      	str	r3, [r4, #0]
 8000a22:	bd38      	pop	{r3, r4, r5, pc}
 8000a24:	20000200 	.word	0x20000200

08000a28 <__errno>:
 8000a28:	4b01      	ldr	r3, [pc, #4]	@ (8000a30 <__errno+0x8>)
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000054 	.word	0x20000054

08000a34 <__libc_init_array>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	4d0d      	ldr	r5, [pc, #52]	@ (8000a6c <__libc_init_array+0x38>)
 8000a38:	4c0d      	ldr	r4, [pc, #52]	@ (8000a70 <__libc_init_array+0x3c>)
 8000a3a:	1b64      	subs	r4, r4, r5
 8000a3c:	10a4      	asrs	r4, r4, #2
 8000a3e:	2600      	movs	r6, #0
 8000a40:	42a6      	cmp	r6, r4
 8000a42:	d109      	bne.n	8000a58 <__libc_init_array+0x24>
 8000a44:	4d0b      	ldr	r5, [pc, #44]	@ (8000a74 <__libc_init_array+0x40>)
 8000a46:	4c0c      	ldr	r4, [pc, #48]	@ (8000a78 <__libc_init_array+0x44>)
 8000a48:	f000 fe70 	bl	800172c <_init>
 8000a4c:	1b64      	subs	r4, r4, r5
 8000a4e:	10a4      	asrs	r4, r4, #2
 8000a50:	2600      	movs	r6, #0
 8000a52:	42a6      	cmp	r6, r4
 8000a54:	d105      	bne.n	8000a62 <__libc_init_array+0x2e>
 8000a56:	bd70      	pop	{r4, r5, r6, pc}
 8000a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5c:	4798      	blx	r3
 8000a5e:	3601      	adds	r6, #1
 8000a60:	e7ee      	b.n	8000a40 <__libc_init_array+0xc>
 8000a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a66:	4798      	blx	r3
 8000a68:	3601      	adds	r6, #1
 8000a6a:	e7f2      	b.n	8000a52 <__libc_init_array+0x1e>
 8000a6c:	08001884 	.word	0x08001884
 8000a70:	08001884 	.word	0x08001884
 8000a74:	08001884 	.word	0x08001884
 8000a78:	08001888 	.word	0x08001888

08000a7c <__retarget_lock_init_recursive>:
 8000a7c:	4770      	bx	lr

08000a7e <__retarget_lock_acquire_recursive>:
 8000a7e:	4770      	bx	lr

08000a80 <__retarget_lock_release_recursive>:
 8000a80:	4770      	bx	lr
	...

08000a84 <__assert_func>:
 8000a84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000a86:	4614      	mov	r4, r2
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <__assert_func+0x2c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4605      	mov	r5, r0
 8000a90:	68d8      	ldr	r0, [r3, #12]
 8000a92:	b954      	cbnz	r4, 8000aaa <__assert_func+0x26>
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <__assert_func+0x30>)
 8000a96:	461c      	mov	r4, r3
 8000a98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000a9c:	9100      	str	r1, [sp, #0]
 8000a9e:	462b      	mov	r3, r5
 8000aa0:	4905      	ldr	r1, [pc, #20]	@ (8000ab8 <__assert_func+0x34>)
 8000aa2:	f000 fc89 	bl	80013b8 <fiprintf>
 8000aa6:	f000 fd71 	bl	800158c <abort>
 8000aaa:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <__assert_func+0x38>)
 8000aac:	e7f4      	b.n	8000a98 <__assert_func+0x14>
 8000aae:	bf00      	nop
 8000ab0:	20000054 	.word	0x20000054
 8000ab4:	08001847 	.word	0x08001847
 8000ab8:	08001819 	.word	0x08001819
 8000abc:	0800180c 	.word	0x0800180c

08000ac0 <_free_r>:
 8000ac0:	b538      	push	{r3, r4, r5, lr}
 8000ac2:	4605      	mov	r5, r0
 8000ac4:	2900      	cmp	r1, #0
 8000ac6:	d041      	beq.n	8000b4c <_free_r+0x8c>
 8000ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000acc:	1f0c      	subs	r4, r1, #4
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bfb8      	it	lt
 8000ad2:	18e4      	addlt	r4, r4, r3
 8000ad4:	f000 f8e8 	bl	8000ca8 <__malloc_lock>
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <_free_r+0x90>)
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	b933      	cbnz	r3, 8000aec <_free_r+0x2c>
 8000ade:	6063      	str	r3, [r4, #4]
 8000ae0:	6014      	str	r4, [r2, #0]
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ae8:	f000 b8e4 	b.w	8000cb4 <__malloc_unlock>
 8000aec:	42a3      	cmp	r3, r4
 8000aee:	d908      	bls.n	8000b02 <_free_r+0x42>
 8000af0:	6820      	ldr	r0, [r4, #0]
 8000af2:	1821      	adds	r1, r4, r0
 8000af4:	428b      	cmp	r3, r1
 8000af6:	bf01      	itttt	eq
 8000af8:	6819      	ldreq	r1, [r3, #0]
 8000afa:	685b      	ldreq	r3, [r3, #4]
 8000afc:	1809      	addeq	r1, r1, r0
 8000afe:	6021      	streq	r1, [r4, #0]
 8000b00:	e7ed      	b.n	8000ade <_free_r+0x1e>
 8000b02:	461a      	mov	r2, r3
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	b10b      	cbz	r3, 8000b0c <_free_r+0x4c>
 8000b08:	42a3      	cmp	r3, r4
 8000b0a:	d9fa      	bls.n	8000b02 <_free_r+0x42>
 8000b0c:	6811      	ldr	r1, [r2, #0]
 8000b0e:	1850      	adds	r0, r2, r1
 8000b10:	42a0      	cmp	r0, r4
 8000b12:	d10b      	bne.n	8000b2c <_free_r+0x6c>
 8000b14:	6820      	ldr	r0, [r4, #0]
 8000b16:	4401      	add	r1, r0
 8000b18:	1850      	adds	r0, r2, r1
 8000b1a:	4283      	cmp	r3, r0
 8000b1c:	6011      	str	r1, [r2, #0]
 8000b1e:	d1e0      	bne.n	8000ae2 <_free_r+0x22>
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	6053      	str	r3, [r2, #4]
 8000b26:	4408      	add	r0, r1
 8000b28:	6010      	str	r0, [r2, #0]
 8000b2a:	e7da      	b.n	8000ae2 <_free_r+0x22>
 8000b2c:	d902      	bls.n	8000b34 <_free_r+0x74>
 8000b2e:	230c      	movs	r3, #12
 8000b30:	602b      	str	r3, [r5, #0]
 8000b32:	e7d6      	b.n	8000ae2 <_free_r+0x22>
 8000b34:	6820      	ldr	r0, [r4, #0]
 8000b36:	1821      	adds	r1, r4, r0
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	bf04      	itt	eq
 8000b3c:	6819      	ldreq	r1, [r3, #0]
 8000b3e:	685b      	ldreq	r3, [r3, #4]
 8000b40:	6063      	str	r3, [r4, #4]
 8000b42:	bf04      	itt	eq
 8000b44:	1809      	addeq	r1, r1, r0
 8000b46:	6021      	streq	r1, [r4, #0]
 8000b48:	6054      	str	r4, [r2, #4]
 8000b4a:	e7ca      	b.n	8000ae2 <_free_r+0x22>
 8000b4c:	bd38      	pop	{r3, r4, r5, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000020c 	.word	0x2000020c

08000b54 <malloc>:
 8000b54:	4b02      	ldr	r3, [pc, #8]	@ (8000b60 <malloc+0xc>)
 8000b56:	4601      	mov	r1, r0
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	f000 b825 	b.w	8000ba8 <_malloc_r>
 8000b5e:	bf00      	nop
 8000b60:	20000054 	.word	0x20000054

08000b64 <sbrk_aligned>:
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	4e0f      	ldr	r6, [pc, #60]	@ (8000ba4 <sbrk_aligned+0x40>)
 8000b68:	460c      	mov	r4, r1
 8000b6a:	6831      	ldr	r1, [r6, #0]
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	b911      	cbnz	r1, 8000b76 <sbrk_aligned+0x12>
 8000b70:	f000 fcfc 	bl	800156c <_sbrk_r>
 8000b74:	6030      	str	r0, [r6, #0]
 8000b76:	4621      	mov	r1, r4
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f000 fcf7 	bl	800156c <_sbrk_r>
 8000b7e:	1c43      	adds	r3, r0, #1
 8000b80:	d103      	bne.n	8000b8a <sbrk_aligned+0x26>
 8000b82:	f04f 34ff 	mov.w	r4, #4294967295
 8000b86:	4620      	mov	r0, r4
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
 8000b8a:	1cc4      	adds	r4, r0, #3
 8000b8c:	f024 0403 	bic.w	r4, r4, #3
 8000b90:	42a0      	cmp	r0, r4
 8000b92:	d0f8      	beq.n	8000b86 <sbrk_aligned+0x22>
 8000b94:	1a21      	subs	r1, r4, r0
 8000b96:	4628      	mov	r0, r5
 8000b98:	f000 fce8 	bl	800156c <_sbrk_r>
 8000b9c:	3001      	adds	r0, #1
 8000b9e:	d1f2      	bne.n	8000b86 <sbrk_aligned+0x22>
 8000ba0:	e7ef      	b.n	8000b82 <sbrk_aligned+0x1e>
 8000ba2:	bf00      	nop
 8000ba4:	20000208 	.word	0x20000208

08000ba8 <_malloc_r>:
 8000ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bac:	1ccd      	adds	r5, r1, #3
 8000bae:	f025 0503 	bic.w	r5, r5, #3
 8000bb2:	3508      	adds	r5, #8
 8000bb4:	2d0c      	cmp	r5, #12
 8000bb6:	bf38      	it	cc
 8000bb8:	250c      	movcc	r5, #12
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	4606      	mov	r6, r0
 8000bbe:	db01      	blt.n	8000bc4 <_malloc_r+0x1c>
 8000bc0:	42a9      	cmp	r1, r5
 8000bc2:	d904      	bls.n	8000bce <_malloc_r+0x26>
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	2000      	movs	r0, #0
 8000bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ca4 <_malloc_r+0xfc>
 8000bd2:	f000 f869 	bl	8000ca8 <__malloc_lock>
 8000bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8000bda:	461c      	mov	r4, r3
 8000bdc:	bb44      	cbnz	r4, 8000c30 <_malloc_r+0x88>
 8000bde:	4629      	mov	r1, r5
 8000be0:	4630      	mov	r0, r6
 8000be2:	f7ff ffbf 	bl	8000b64 <sbrk_aligned>
 8000be6:	1c43      	adds	r3, r0, #1
 8000be8:	4604      	mov	r4, r0
 8000bea:	d158      	bne.n	8000c9e <_malloc_r+0xf6>
 8000bec:	f8d8 4000 	ldr.w	r4, [r8]
 8000bf0:	4627      	mov	r7, r4
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d143      	bne.n	8000c7e <_malloc_r+0xd6>
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d04b      	beq.n	8000c92 <_malloc_r+0xea>
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	4630      	mov	r0, r6
 8000c00:	eb04 0903 	add.w	r9, r4, r3
 8000c04:	f000 fcb2 	bl	800156c <_sbrk_r>
 8000c08:	4581      	cmp	r9, r0
 8000c0a:	d142      	bne.n	8000c92 <_malloc_r+0xea>
 8000c0c:	6821      	ldr	r1, [r4, #0]
 8000c0e:	1a6d      	subs	r5, r5, r1
 8000c10:	4629      	mov	r1, r5
 8000c12:	4630      	mov	r0, r6
 8000c14:	f7ff ffa6 	bl	8000b64 <sbrk_aligned>
 8000c18:	3001      	adds	r0, #1
 8000c1a:	d03a      	beq.n	8000c92 <_malloc_r+0xea>
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	442b      	add	r3, r5
 8000c20:	6023      	str	r3, [r4, #0]
 8000c22:	f8d8 3000 	ldr.w	r3, [r8]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	bb62      	cbnz	r2, 8000c84 <_malloc_r+0xdc>
 8000c2a:	f8c8 7000 	str.w	r7, [r8]
 8000c2e:	e00f      	b.n	8000c50 <_malloc_r+0xa8>
 8000c30:	6822      	ldr	r2, [r4, #0]
 8000c32:	1b52      	subs	r2, r2, r5
 8000c34:	d420      	bmi.n	8000c78 <_malloc_r+0xd0>
 8000c36:	2a0b      	cmp	r2, #11
 8000c38:	d917      	bls.n	8000c6a <_malloc_r+0xc2>
 8000c3a:	1961      	adds	r1, r4, r5
 8000c3c:	42a3      	cmp	r3, r4
 8000c3e:	6025      	str	r5, [r4, #0]
 8000c40:	bf18      	it	ne
 8000c42:	6059      	strne	r1, [r3, #4]
 8000c44:	6863      	ldr	r3, [r4, #4]
 8000c46:	bf08      	it	eq
 8000c48:	f8c8 1000 	streq.w	r1, [r8]
 8000c4c:	5162      	str	r2, [r4, r5]
 8000c4e:	604b      	str	r3, [r1, #4]
 8000c50:	4630      	mov	r0, r6
 8000c52:	f000 f82f 	bl	8000cb4 <__malloc_unlock>
 8000c56:	f104 000b 	add.w	r0, r4, #11
 8000c5a:	1d23      	adds	r3, r4, #4
 8000c5c:	f020 0007 	bic.w	r0, r0, #7
 8000c60:	1ac2      	subs	r2, r0, r3
 8000c62:	bf1c      	itt	ne
 8000c64:	1a1b      	subne	r3, r3, r0
 8000c66:	50a3      	strne	r3, [r4, r2]
 8000c68:	e7af      	b.n	8000bca <_malloc_r+0x22>
 8000c6a:	6862      	ldr	r2, [r4, #4]
 8000c6c:	42a3      	cmp	r3, r4
 8000c6e:	bf0c      	ite	eq
 8000c70:	f8c8 2000 	streq.w	r2, [r8]
 8000c74:	605a      	strne	r2, [r3, #4]
 8000c76:	e7eb      	b.n	8000c50 <_malloc_r+0xa8>
 8000c78:	4623      	mov	r3, r4
 8000c7a:	6864      	ldr	r4, [r4, #4]
 8000c7c:	e7ae      	b.n	8000bdc <_malloc_r+0x34>
 8000c7e:	463c      	mov	r4, r7
 8000c80:	687f      	ldr	r7, [r7, #4]
 8000c82:	e7b6      	b.n	8000bf2 <_malloc_r+0x4a>
 8000c84:	461a      	mov	r2, r3
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	42a3      	cmp	r3, r4
 8000c8a:	d1fb      	bne.n	8000c84 <_malloc_r+0xdc>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6053      	str	r3, [r2, #4]
 8000c90:	e7de      	b.n	8000c50 <_malloc_r+0xa8>
 8000c92:	230c      	movs	r3, #12
 8000c94:	6033      	str	r3, [r6, #0]
 8000c96:	4630      	mov	r0, r6
 8000c98:	f000 f80c 	bl	8000cb4 <__malloc_unlock>
 8000c9c:	e794      	b.n	8000bc8 <_malloc_r+0x20>
 8000c9e:	6005      	str	r5, [r0, #0]
 8000ca0:	e7d6      	b.n	8000c50 <_malloc_r+0xa8>
 8000ca2:	bf00      	nop
 8000ca4:	2000020c 	.word	0x2000020c

08000ca8 <__malloc_lock>:
 8000ca8:	4801      	ldr	r0, [pc, #4]	@ (8000cb0 <__malloc_lock+0x8>)
 8000caa:	f7ff bee8 	b.w	8000a7e <__retarget_lock_acquire_recursive>
 8000cae:	bf00      	nop
 8000cb0:	20000204 	.word	0x20000204

08000cb4 <__malloc_unlock>:
 8000cb4:	4801      	ldr	r0, [pc, #4]	@ (8000cbc <__malloc_unlock+0x8>)
 8000cb6:	f7ff bee3 	b.w	8000a80 <__retarget_lock_release_recursive>
 8000cba:	bf00      	nop
 8000cbc:	20000204 	.word	0x20000204

08000cc0 <__sfputc_r>:
 8000cc0:	6893      	ldr	r3, [r2, #8]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	b410      	push	{r4}
 8000cc8:	6093      	str	r3, [r2, #8]
 8000cca:	da08      	bge.n	8000cde <__sfputc_r+0x1e>
 8000ccc:	6994      	ldr	r4, [r2, #24]
 8000cce:	42a3      	cmp	r3, r4
 8000cd0:	db01      	blt.n	8000cd6 <__sfputc_r+0x16>
 8000cd2:	290a      	cmp	r1, #10
 8000cd4:	d103      	bne.n	8000cde <__sfputc_r+0x1e>
 8000cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cda:	f000 bbb3 	b.w	8001444 <__swbuf_r>
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	1c58      	adds	r0, r3, #1
 8000ce2:	6010      	str	r0, [r2, #0]
 8000ce4:	7019      	strb	r1, [r3, #0]
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <__sfputs_r>:
 8000cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	18d5      	adds	r5, r2, r3
 8000cf8:	42ac      	cmp	r4, r5
 8000cfa:	d101      	bne.n	8000d00 <__sfputs_r+0x12>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	e007      	b.n	8000d10 <__sfputs_r+0x22>
 8000d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d04:	463a      	mov	r2, r7
 8000d06:	4630      	mov	r0, r6
 8000d08:	f7ff ffda 	bl	8000cc0 <__sfputc_r>
 8000d0c:	1c43      	adds	r3, r0, #1
 8000d0e:	d1f3      	bne.n	8000cf8 <__sfputs_r+0xa>
 8000d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d14 <_vfiprintf_r>:
 8000d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d18:	460d      	mov	r5, r1
 8000d1a:	b09d      	sub	sp, #116	@ 0x74
 8000d1c:	4614      	mov	r4, r2
 8000d1e:	4698      	mov	r8, r3
 8000d20:	4606      	mov	r6, r0
 8000d22:	b118      	cbz	r0, 8000d2c <_vfiprintf_r+0x18>
 8000d24:	6a03      	ldr	r3, [r0, #32]
 8000d26:	b90b      	cbnz	r3, 8000d2c <_vfiprintf_r+0x18>
 8000d28:	f7ff fd9c 	bl	8000864 <__sinit>
 8000d2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d2e:	07d9      	lsls	r1, r3, #31
 8000d30:	d405      	bmi.n	8000d3e <_vfiprintf_r+0x2a>
 8000d32:	89ab      	ldrh	r3, [r5, #12]
 8000d34:	059a      	lsls	r2, r3, #22
 8000d36:	d402      	bmi.n	8000d3e <_vfiprintf_r+0x2a>
 8000d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d3a:	f7ff fea0 	bl	8000a7e <__retarget_lock_acquire_recursive>
 8000d3e:	89ab      	ldrh	r3, [r5, #12]
 8000d40:	071b      	lsls	r3, r3, #28
 8000d42:	d501      	bpl.n	8000d48 <_vfiprintf_r+0x34>
 8000d44:	692b      	ldr	r3, [r5, #16]
 8000d46:	b99b      	cbnz	r3, 8000d70 <_vfiprintf_r+0x5c>
 8000d48:	4629      	mov	r1, r5
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	f000 fbb8 	bl	80014c0 <__swsetup_r>
 8000d50:	b170      	cbz	r0, 8000d70 <_vfiprintf_r+0x5c>
 8000d52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d54:	07dc      	lsls	r4, r3, #31
 8000d56:	d504      	bpl.n	8000d62 <_vfiprintf_r+0x4e>
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	b01d      	add	sp, #116	@ 0x74
 8000d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d62:	89ab      	ldrh	r3, [r5, #12]
 8000d64:	0598      	lsls	r0, r3, #22
 8000d66:	d4f7      	bmi.n	8000d58 <_vfiprintf_r+0x44>
 8000d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d6a:	f7ff fe89 	bl	8000a80 <__retarget_lock_release_recursive>
 8000d6e:	e7f3      	b.n	8000d58 <_vfiprintf_r+0x44>
 8000d70:	2300      	movs	r3, #0
 8000d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d74:	2320      	movs	r3, #32
 8000d76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d7e:	2330      	movs	r3, #48	@ 0x30
 8000d80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f30 <_vfiprintf_r+0x21c>
 8000d84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d88:	f04f 0901 	mov.w	r9, #1
 8000d8c:	4623      	mov	r3, r4
 8000d8e:	469a      	mov	sl, r3
 8000d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d94:	b10a      	cbz	r2, 8000d9a <_vfiprintf_r+0x86>
 8000d96:	2a25      	cmp	r2, #37	@ 0x25
 8000d98:	d1f9      	bne.n	8000d8e <_vfiprintf_r+0x7a>
 8000d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8000d9e:	d00b      	beq.n	8000db8 <_vfiprintf_r+0xa4>
 8000da0:	465b      	mov	r3, fp
 8000da2:	4622      	mov	r2, r4
 8000da4:	4629      	mov	r1, r5
 8000da6:	4630      	mov	r0, r6
 8000da8:	f7ff ffa1 	bl	8000cee <__sfputs_r>
 8000dac:	3001      	adds	r0, #1
 8000dae:	f000 80a7 	beq.w	8000f00 <_vfiprintf_r+0x1ec>
 8000db2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000db4:	445a      	add	r2, fp
 8000db6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000db8:	f89a 3000 	ldrb.w	r3, [sl]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 809f 	beq.w	8000f00 <_vfiprintf_r+0x1ec>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dcc:	f10a 0a01 	add.w	sl, sl, #1
 8000dd0:	9304      	str	r3, [sp, #16]
 8000dd2:	9307      	str	r3, [sp, #28]
 8000dd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dda:	4654      	mov	r4, sl
 8000ddc:	2205      	movs	r2, #5
 8000dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000de2:	4853      	ldr	r0, [pc, #332]	@ (8000f30 <_vfiprintf_r+0x21c>)
 8000de4:	f7ff fa04 	bl	80001f0 <memchr>
 8000de8:	9a04      	ldr	r2, [sp, #16]
 8000dea:	b9d8      	cbnz	r0, 8000e24 <_vfiprintf_r+0x110>
 8000dec:	06d1      	lsls	r1, r2, #27
 8000dee:	bf44      	itt	mi
 8000df0:	2320      	movmi	r3, #32
 8000df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000df6:	0713      	lsls	r3, r2, #28
 8000df8:	bf44      	itt	mi
 8000dfa:	232b      	movmi	r3, #43	@ 0x2b
 8000dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e00:	f89a 3000 	ldrb.w	r3, [sl]
 8000e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e06:	d015      	beq.n	8000e34 <_vfiprintf_r+0x120>
 8000e08:	9a07      	ldr	r2, [sp, #28]
 8000e0a:	4654      	mov	r4, sl
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f04f 0c0a 	mov.w	ip, #10
 8000e12:	4621      	mov	r1, r4
 8000e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e18:	3b30      	subs	r3, #48	@ 0x30
 8000e1a:	2b09      	cmp	r3, #9
 8000e1c:	d94b      	bls.n	8000eb6 <_vfiprintf_r+0x1a2>
 8000e1e:	b1b0      	cbz	r0, 8000e4e <_vfiprintf_r+0x13a>
 8000e20:	9207      	str	r2, [sp, #28]
 8000e22:	e014      	b.n	8000e4e <_vfiprintf_r+0x13a>
 8000e24:	eba0 0308 	sub.w	r3, r0, r8
 8000e28:	fa09 f303 	lsl.w	r3, r9, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	9304      	str	r3, [sp, #16]
 8000e30:	46a2      	mov	sl, r4
 8000e32:	e7d2      	b.n	8000dda <_vfiprintf_r+0xc6>
 8000e34:	9b03      	ldr	r3, [sp, #12]
 8000e36:	1d19      	adds	r1, r3, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	9103      	str	r1, [sp, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bfbb      	ittet	lt
 8000e40:	425b      	neglt	r3, r3
 8000e42:	f042 0202 	orrlt.w	r2, r2, #2
 8000e46:	9307      	strge	r3, [sp, #28]
 8000e48:	9307      	strlt	r3, [sp, #28]
 8000e4a:	bfb8      	it	lt
 8000e4c:	9204      	strlt	r2, [sp, #16]
 8000e4e:	7823      	ldrb	r3, [r4, #0]
 8000e50:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e52:	d10a      	bne.n	8000e6a <_vfiprintf_r+0x156>
 8000e54:	7863      	ldrb	r3, [r4, #1]
 8000e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e58:	d132      	bne.n	8000ec0 <_vfiprintf_r+0x1ac>
 8000e5a:	9b03      	ldr	r3, [sp, #12]
 8000e5c:	1d1a      	adds	r2, r3, #4
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	9203      	str	r2, [sp, #12]
 8000e62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e66:	3402      	adds	r4, #2
 8000e68:	9305      	str	r3, [sp, #20]
 8000e6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f40 <_vfiprintf_r+0x22c>
 8000e6e:	7821      	ldrb	r1, [r4, #0]
 8000e70:	2203      	movs	r2, #3
 8000e72:	4650      	mov	r0, sl
 8000e74:	f7ff f9bc 	bl	80001f0 <memchr>
 8000e78:	b138      	cbz	r0, 8000e8a <_vfiprintf_r+0x176>
 8000e7a:	9b04      	ldr	r3, [sp, #16]
 8000e7c:	eba0 000a 	sub.w	r0, r0, sl
 8000e80:	2240      	movs	r2, #64	@ 0x40
 8000e82:	4082      	lsls	r2, r0
 8000e84:	4313      	orrs	r3, r2
 8000e86:	3401      	adds	r4, #1
 8000e88:	9304      	str	r3, [sp, #16]
 8000e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e8e:	4829      	ldr	r0, [pc, #164]	@ (8000f34 <_vfiprintf_r+0x220>)
 8000e90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e94:	2206      	movs	r2, #6
 8000e96:	f7ff f9ab 	bl	80001f0 <memchr>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d03f      	beq.n	8000f1e <_vfiprintf_r+0x20a>
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <_vfiprintf_r+0x224>)
 8000ea0:	bb1b      	cbnz	r3, 8000eea <_vfiprintf_r+0x1d6>
 8000ea2:	9b03      	ldr	r3, [sp, #12]
 8000ea4:	3307      	adds	r3, #7
 8000ea6:	f023 0307 	bic.w	r3, r3, #7
 8000eaa:	3308      	adds	r3, #8
 8000eac:	9303      	str	r3, [sp, #12]
 8000eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000eb0:	443b      	add	r3, r7
 8000eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000eb4:	e76a      	b.n	8000d8c <_vfiprintf_r+0x78>
 8000eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000eba:	460c      	mov	r4, r1
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	e7a8      	b.n	8000e12 <_vfiprintf_r+0xfe>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	3401      	adds	r4, #1
 8000ec4:	9305      	str	r3, [sp, #20]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 0c0a 	mov.w	ip, #10
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ed2:	3a30      	subs	r2, #48	@ 0x30
 8000ed4:	2a09      	cmp	r2, #9
 8000ed6:	d903      	bls.n	8000ee0 <_vfiprintf_r+0x1cc>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0c6      	beq.n	8000e6a <_vfiprintf_r+0x156>
 8000edc:	9105      	str	r1, [sp, #20]
 8000ede:	e7c4      	b.n	8000e6a <_vfiprintf_r+0x156>
 8000ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e7f0      	b.n	8000ecc <_vfiprintf_r+0x1b8>
 8000eea:	ab03      	add	r3, sp, #12
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	462a      	mov	r2, r5
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <_vfiprintf_r+0x228>)
 8000ef2:	a904      	add	r1, sp, #16
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	f3af 8000 	nop.w
 8000efa:	4607      	mov	r7, r0
 8000efc:	1c78      	adds	r0, r7, #1
 8000efe:	d1d6      	bne.n	8000eae <_vfiprintf_r+0x19a>
 8000f00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f02:	07d9      	lsls	r1, r3, #31
 8000f04:	d405      	bmi.n	8000f12 <_vfiprintf_r+0x1fe>
 8000f06:	89ab      	ldrh	r3, [r5, #12]
 8000f08:	059a      	lsls	r2, r3, #22
 8000f0a:	d402      	bmi.n	8000f12 <_vfiprintf_r+0x1fe>
 8000f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f0e:	f7ff fdb7 	bl	8000a80 <__retarget_lock_release_recursive>
 8000f12:	89ab      	ldrh	r3, [r5, #12]
 8000f14:	065b      	lsls	r3, r3, #25
 8000f16:	f53f af1f 	bmi.w	8000d58 <_vfiprintf_r+0x44>
 8000f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f1c:	e71e      	b.n	8000d5c <_vfiprintf_r+0x48>
 8000f1e:	ab03      	add	r3, sp, #12
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	462a      	mov	r2, r5
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <_vfiprintf_r+0x228>)
 8000f26:	a904      	add	r1, sp, #16
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f000 f879 	bl	8001020 <_printf_i>
 8000f2e:	e7e4      	b.n	8000efa <_vfiprintf_r+0x1e6>
 8000f30:	08001848 	.word	0x08001848
 8000f34:	08001852 	.word	0x08001852
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	08000cef 	.word	0x08000cef
 8000f40:	0800184e 	.word	0x0800184e

08000f44 <_printf_common>:
 8000f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f48:	4616      	mov	r6, r2
 8000f4a:	4698      	mov	r8, r3
 8000f4c:	688a      	ldr	r2, [r1, #8]
 8000f4e:	690b      	ldr	r3, [r1, #16]
 8000f50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f54:	4293      	cmp	r3, r2
 8000f56:	bfb8      	it	lt
 8000f58:	4613      	movlt	r3, r2
 8000f5a:	6033      	str	r3, [r6, #0]
 8000f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f60:	4607      	mov	r7, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	b10a      	cbz	r2, 8000f6a <_printf_common+0x26>
 8000f66:	3301      	adds	r3, #1
 8000f68:	6033      	str	r3, [r6, #0]
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	0699      	lsls	r1, r3, #26
 8000f6e:	bf42      	ittt	mi
 8000f70:	6833      	ldrmi	r3, [r6, #0]
 8000f72:	3302      	addmi	r3, #2
 8000f74:	6033      	strmi	r3, [r6, #0]
 8000f76:	6825      	ldr	r5, [r4, #0]
 8000f78:	f015 0506 	ands.w	r5, r5, #6
 8000f7c:	d106      	bne.n	8000f8c <_printf_common+0x48>
 8000f7e:	f104 0a19 	add.w	sl, r4, #25
 8000f82:	68e3      	ldr	r3, [r4, #12]
 8000f84:	6832      	ldr	r2, [r6, #0]
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	42ab      	cmp	r3, r5
 8000f8a:	dc26      	bgt.n	8000fda <_printf_common+0x96>
 8000f8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f90:	6822      	ldr	r2, [r4, #0]
 8000f92:	3b00      	subs	r3, #0
 8000f94:	bf18      	it	ne
 8000f96:	2301      	movne	r3, #1
 8000f98:	0692      	lsls	r2, r2, #26
 8000f9a:	d42b      	bmi.n	8000ff4 <_printf_common+0xb0>
 8000f9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fa0:	4641      	mov	r1, r8
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	47c8      	blx	r9
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d01e      	beq.n	8000fe8 <_printf_common+0xa4>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	6922      	ldr	r2, [r4, #16]
 8000fae:	f003 0306 	and.w	r3, r3, #6
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf02      	ittt	eq
 8000fb6:	68e5      	ldreq	r5, [r4, #12]
 8000fb8:	6833      	ldreq	r3, [r6, #0]
 8000fba:	1aed      	subeq	r5, r5, r3
 8000fbc:	68a3      	ldr	r3, [r4, #8]
 8000fbe:	bf0c      	ite	eq
 8000fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fc4:	2500      	movne	r5, #0
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	bfc4      	itt	gt
 8000fca:	1a9b      	subgt	r3, r3, r2
 8000fcc:	18ed      	addgt	r5, r5, r3
 8000fce:	2600      	movs	r6, #0
 8000fd0:	341a      	adds	r4, #26
 8000fd2:	42b5      	cmp	r5, r6
 8000fd4:	d11a      	bne.n	800100c <_printf_common+0xc8>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e008      	b.n	8000fec <_printf_common+0xa8>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	4652      	mov	r2, sl
 8000fde:	4641      	mov	r1, r8
 8000fe0:	4638      	mov	r0, r7
 8000fe2:	47c8      	blx	r9
 8000fe4:	3001      	adds	r0, #1
 8000fe6:	d103      	bne.n	8000ff0 <_printf_common+0xac>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff0:	3501      	adds	r5, #1
 8000ff2:	e7c6      	b.n	8000f82 <_printf_common+0x3e>
 8000ff4:	18e1      	adds	r1, r4, r3
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	2030      	movs	r0, #48	@ 0x30
 8000ffa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000ffe:	4422      	add	r2, r4
 8001000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001008:	3302      	adds	r3, #2
 800100a:	e7c7      	b.n	8000f9c <_printf_common+0x58>
 800100c:	2301      	movs	r3, #1
 800100e:	4622      	mov	r2, r4
 8001010:	4641      	mov	r1, r8
 8001012:	4638      	mov	r0, r7
 8001014:	47c8      	blx	r9
 8001016:	3001      	adds	r0, #1
 8001018:	d0e6      	beq.n	8000fe8 <_printf_common+0xa4>
 800101a:	3601      	adds	r6, #1
 800101c:	e7d9      	b.n	8000fd2 <_printf_common+0x8e>
	...

08001020 <_printf_i>:
 8001020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	7e0f      	ldrb	r7, [r1, #24]
 8001026:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001028:	2f78      	cmp	r7, #120	@ 0x78
 800102a:	4691      	mov	r9, r2
 800102c:	4680      	mov	r8, r0
 800102e:	460c      	mov	r4, r1
 8001030:	469a      	mov	sl, r3
 8001032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001036:	d807      	bhi.n	8001048 <_printf_i+0x28>
 8001038:	2f62      	cmp	r7, #98	@ 0x62
 800103a:	d80a      	bhi.n	8001052 <_printf_i+0x32>
 800103c:	2f00      	cmp	r7, #0
 800103e:	f000 80d2 	beq.w	80011e6 <_printf_i+0x1c6>
 8001042:	2f58      	cmp	r7, #88	@ 0x58
 8001044:	f000 80b9 	beq.w	80011ba <_printf_i+0x19a>
 8001048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800104c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001050:	e03a      	b.n	80010c8 <_printf_i+0xa8>
 8001052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001056:	2b15      	cmp	r3, #21
 8001058:	d8f6      	bhi.n	8001048 <_printf_i+0x28>
 800105a:	a101      	add	r1, pc, #4	@ (adr r1, 8001060 <_printf_i+0x40>)
 800105c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001060:	080010b9 	.word	0x080010b9
 8001064:	080010cd 	.word	0x080010cd
 8001068:	08001049 	.word	0x08001049
 800106c:	08001049 	.word	0x08001049
 8001070:	08001049 	.word	0x08001049
 8001074:	08001049 	.word	0x08001049
 8001078:	080010cd 	.word	0x080010cd
 800107c:	08001049 	.word	0x08001049
 8001080:	08001049 	.word	0x08001049
 8001084:	08001049 	.word	0x08001049
 8001088:	08001049 	.word	0x08001049
 800108c:	080011cd 	.word	0x080011cd
 8001090:	080010f7 	.word	0x080010f7
 8001094:	08001187 	.word	0x08001187
 8001098:	08001049 	.word	0x08001049
 800109c:	08001049 	.word	0x08001049
 80010a0:	080011ef 	.word	0x080011ef
 80010a4:	08001049 	.word	0x08001049
 80010a8:	080010f7 	.word	0x080010f7
 80010ac:	08001049 	.word	0x08001049
 80010b0:	08001049 	.word	0x08001049
 80010b4:	0800118f 	.word	0x0800118f
 80010b8:	6833      	ldr	r3, [r6, #0]
 80010ba:	1d1a      	adds	r2, r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6032      	str	r2, [r6, #0]
 80010c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010c8:	2301      	movs	r3, #1
 80010ca:	e09d      	b.n	8001208 <_printf_i+0x1e8>
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	1d19      	adds	r1, r3, #4
 80010d2:	6031      	str	r1, [r6, #0]
 80010d4:	0606      	lsls	r6, r0, #24
 80010d6:	d501      	bpl.n	80010dc <_printf_i+0xbc>
 80010d8:	681d      	ldr	r5, [r3, #0]
 80010da:	e003      	b.n	80010e4 <_printf_i+0xc4>
 80010dc:	0645      	lsls	r5, r0, #25
 80010de:	d5fb      	bpl.n	80010d8 <_printf_i+0xb8>
 80010e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010e4:	2d00      	cmp	r5, #0
 80010e6:	da03      	bge.n	80010f0 <_printf_i+0xd0>
 80010e8:	232d      	movs	r3, #45	@ 0x2d
 80010ea:	426d      	negs	r5, r5
 80010ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010f0:	4859      	ldr	r0, [pc, #356]	@ (8001258 <_printf_i+0x238>)
 80010f2:	230a      	movs	r3, #10
 80010f4:	e011      	b.n	800111a <_printf_i+0xfa>
 80010f6:	6821      	ldr	r1, [r4, #0]
 80010f8:	6833      	ldr	r3, [r6, #0]
 80010fa:	0608      	lsls	r0, r1, #24
 80010fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001100:	d402      	bmi.n	8001108 <_printf_i+0xe8>
 8001102:	0649      	lsls	r1, r1, #25
 8001104:	bf48      	it	mi
 8001106:	b2ad      	uxthmi	r5, r5
 8001108:	2f6f      	cmp	r7, #111	@ 0x6f
 800110a:	4853      	ldr	r0, [pc, #332]	@ (8001258 <_printf_i+0x238>)
 800110c:	6033      	str	r3, [r6, #0]
 800110e:	bf14      	ite	ne
 8001110:	230a      	movne	r3, #10
 8001112:	2308      	moveq	r3, #8
 8001114:	2100      	movs	r1, #0
 8001116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800111a:	6866      	ldr	r6, [r4, #4]
 800111c:	60a6      	str	r6, [r4, #8]
 800111e:	2e00      	cmp	r6, #0
 8001120:	bfa2      	ittt	ge
 8001122:	6821      	ldrge	r1, [r4, #0]
 8001124:	f021 0104 	bicge.w	r1, r1, #4
 8001128:	6021      	strge	r1, [r4, #0]
 800112a:	b90d      	cbnz	r5, 8001130 <_printf_i+0x110>
 800112c:	2e00      	cmp	r6, #0
 800112e:	d04b      	beq.n	80011c8 <_printf_i+0x1a8>
 8001130:	4616      	mov	r6, r2
 8001132:	fbb5 f1f3 	udiv	r1, r5, r3
 8001136:	fb03 5711 	mls	r7, r3, r1, r5
 800113a:	5dc7      	ldrb	r7, [r0, r7]
 800113c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001140:	462f      	mov	r7, r5
 8001142:	42bb      	cmp	r3, r7
 8001144:	460d      	mov	r5, r1
 8001146:	d9f4      	bls.n	8001132 <_printf_i+0x112>
 8001148:	2b08      	cmp	r3, #8
 800114a:	d10b      	bne.n	8001164 <_printf_i+0x144>
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	07df      	lsls	r7, r3, #31
 8001150:	d508      	bpl.n	8001164 <_printf_i+0x144>
 8001152:	6923      	ldr	r3, [r4, #16]
 8001154:	6861      	ldr	r1, [r4, #4]
 8001156:	4299      	cmp	r1, r3
 8001158:	bfde      	ittt	le
 800115a:	2330      	movle	r3, #48	@ 0x30
 800115c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001160:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001164:	1b92      	subs	r2, r2, r6
 8001166:	6122      	str	r2, [r4, #16]
 8001168:	f8cd a000 	str.w	sl, [sp]
 800116c:	464b      	mov	r3, r9
 800116e:	aa03      	add	r2, sp, #12
 8001170:	4621      	mov	r1, r4
 8001172:	4640      	mov	r0, r8
 8001174:	f7ff fee6 	bl	8000f44 <_printf_common>
 8001178:	3001      	adds	r0, #1
 800117a:	d14a      	bne.n	8001212 <_printf_i+0x1f2>
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	b004      	add	sp, #16
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	6023      	str	r3, [r4, #0]
 800118e:	4833      	ldr	r0, [pc, #204]	@ (800125c <_printf_i+0x23c>)
 8001190:	2778      	movs	r7, #120	@ 0x78
 8001192:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	6831      	ldr	r1, [r6, #0]
 800119a:	061f      	lsls	r7, r3, #24
 800119c:	f851 5b04 	ldr.w	r5, [r1], #4
 80011a0:	d402      	bmi.n	80011a8 <_printf_i+0x188>
 80011a2:	065f      	lsls	r7, r3, #25
 80011a4:	bf48      	it	mi
 80011a6:	b2ad      	uxthmi	r5, r5
 80011a8:	6031      	str	r1, [r6, #0]
 80011aa:	07d9      	lsls	r1, r3, #31
 80011ac:	bf44      	itt	mi
 80011ae:	f043 0320 	orrmi.w	r3, r3, #32
 80011b2:	6023      	strmi	r3, [r4, #0]
 80011b4:	b11d      	cbz	r5, 80011be <_printf_i+0x19e>
 80011b6:	2310      	movs	r3, #16
 80011b8:	e7ac      	b.n	8001114 <_printf_i+0xf4>
 80011ba:	4827      	ldr	r0, [pc, #156]	@ (8001258 <_printf_i+0x238>)
 80011bc:	e7e9      	b.n	8001192 <_printf_i+0x172>
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	f023 0320 	bic.w	r3, r3, #32
 80011c4:	6023      	str	r3, [r4, #0]
 80011c6:	e7f6      	b.n	80011b6 <_printf_i+0x196>
 80011c8:	4616      	mov	r6, r2
 80011ca:	e7bd      	b.n	8001148 <_printf_i+0x128>
 80011cc:	6833      	ldr	r3, [r6, #0]
 80011ce:	6825      	ldr	r5, [r4, #0]
 80011d0:	6961      	ldr	r1, [r4, #20]
 80011d2:	1d18      	adds	r0, r3, #4
 80011d4:	6030      	str	r0, [r6, #0]
 80011d6:	062e      	lsls	r6, r5, #24
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	d501      	bpl.n	80011e0 <_printf_i+0x1c0>
 80011dc:	6019      	str	r1, [r3, #0]
 80011de:	e002      	b.n	80011e6 <_printf_i+0x1c6>
 80011e0:	0668      	lsls	r0, r5, #25
 80011e2:	d5fb      	bpl.n	80011dc <_printf_i+0x1bc>
 80011e4:	8019      	strh	r1, [r3, #0]
 80011e6:	2300      	movs	r3, #0
 80011e8:	6123      	str	r3, [r4, #16]
 80011ea:	4616      	mov	r6, r2
 80011ec:	e7bc      	b.n	8001168 <_printf_i+0x148>
 80011ee:	6833      	ldr	r3, [r6, #0]
 80011f0:	1d1a      	adds	r2, r3, #4
 80011f2:	6032      	str	r2, [r6, #0]
 80011f4:	681e      	ldr	r6, [r3, #0]
 80011f6:	6862      	ldr	r2, [r4, #4]
 80011f8:	2100      	movs	r1, #0
 80011fa:	4630      	mov	r0, r6
 80011fc:	f7fe fff8 	bl	80001f0 <memchr>
 8001200:	b108      	cbz	r0, 8001206 <_printf_i+0x1e6>
 8001202:	1b80      	subs	r0, r0, r6
 8001204:	6060      	str	r0, [r4, #4]
 8001206:	6863      	ldr	r3, [r4, #4]
 8001208:	6123      	str	r3, [r4, #16]
 800120a:	2300      	movs	r3, #0
 800120c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001210:	e7aa      	b.n	8001168 <_printf_i+0x148>
 8001212:	6923      	ldr	r3, [r4, #16]
 8001214:	4632      	mov	r2, r6
 8001216:	4649      	mov	r1, r9
 8001218:	4640      	mov	r0, r8
 800121a:	47d0      	blx	sl
 800121c:	3001      	adds	r0, #1
 800121e:	d0ad      	beq.n	800117c <_printf_i+0x15c>
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	079b      	lsls	r3, r3, #30
 8001224:	d413      	bmi.n	800124e <_printf_i+0x22e>
 8001226:	68e0      	ldr	r0, [r4, #12]
 8001228:	9b03      	ldr	r3, [sp, #12]
 800122a:	4298      	cmp	r0, r3
 800122c:	bfb8      	it	lt
 800122e:	4618      	movlt	r0, r3
 8001230:	e7a6      	b.n	8001180 <_printf_i+0x160>
 8001232:	2301      	movs	r3, #1
 8001234:	4632      	mov	r2, r6
 8001236:	4649      	mov	r1, r9
 8001238:	4640      	mov	r0, r8
 800123a:	47d0      	blx	sl
 800123c:	3001      	adds	r0, #1
 800123e:	d09d      	beq.n	800117c <_printf_i+0x15c>
 8001240:	3501      	adds	r5, #1
 8001242:	68e3      	ldr	r3, [r4, #12]
 8001244:	9903      	ldr	r1, [sp, #12]
 8001246:	1a5b      	subs	r3, r3, r1
 8001248:	42ab      	cmp	r3, r5
 800124a:	dcf2      	bgt.n	8001232 <_printf_i+0x212>
 800124c:	e7eb      	b.n	8001226 <_printf_i+0x206>
 800124e:	2500      	movs	r5, #0
 8001250:	f104 0619 	add.w	r6, r4, #25
 8001254:	e7f5      	b.n	8001242 <_printf_i+0x222>
 8001256:	bf00      	nop
 8001258:	08001859 	.word	0x08001859
 800125c:	0800186a 	.word	0x0800186a

08001260 <__sflush_r>:
 8001260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001268:	0716      	lsls	r6, r2, #28
 800126a:	4605      	mov	r5, r0
 800126c:	460c      	mov	r4, r1
 800126e:	d454      	bmi.n	800131a <__sflush_r+0xba>
 8001270:	684b      	ldr	r3, [r1, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	dc02      	bgt.n	800127c <__sflush_r+0x1c>
 8001276:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001278:	2b00      	cmp	r3, #0
 800127a:	dd48      	ble.n	800130e <__sflush_r+0xae>
 800127c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800127e:	2e00      	cmp	r6, #0
 8001280:	d045      	beq.n	800130e <__sflush_r+0xae>
 8001282:	2300      	movs	r3, #0
 8001284:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001288:	682f      	ldr	r7, [r5, #0]
 800128a:	6a21      	ldr	r1, [r4, #32]
 800128c:	602b      	str	r3, [r5, #0]
 800128e:	d030      	beq.n	80012f2 <__sflush_r+0x92>
 8001290:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001292:	89a3      	ldrh	r3, [r4, #12]
 8001294:	0759      	lsls	r1, r3, #29
 8001296:	d505      	bpl.n	80012a4 <__sflush_r+0x44>
 8001298:	6863      	ldr	r3, [r4, #4]
 800129a:	1ad2      	subs	r2, r2, r3
 800129c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800129e:	b10b      	cbz	r3, 80012a4 <__sflush_r+0x44>
 80012a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	2300      	movs	r3, #0
 80012a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012a8:	6a21      	ldr	r1, [r4, #32]
 80012aa:	4628      	mov	r0, r5
 80012ac:	47b0      	blx	r6
 80012ae:	1c43      	adds	r3, r0, #1
 80012b0:	89a3      	ldrh	r3, [r4, #12]
 80012b2:	d106      	bne.n	80012c2 <__sflush_r+0x62>
 80012b4:	6829      	ldr	r1, [r5, #0]
 80012b6:	291d      	cmp	r1, #29
 80012b8:	d82b      	bhi.n	8001312 <__sflush_r+0xb2>
 80012ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001364 <__sflush_r+0x104>)
 80012bc:	410a      	asrs	r2, r1
 80012be:	07d6      	lsls	r6, r2, #31
 80012c0:	d427      	bmi.n	8001312 <__sflush_r+0xb2>
 80012c2:	2200      	movs	r2, #0
 80012c4:	6062      	str	r2, [r4, #4]
 80012c6:	04d9      	lsls	r1, r3, #19
 80012c8:	6922      	ldr	r2, [r4, #16]
 80012ca:	6022      	str	r2, [r4, #0]
 80012cc:	d504      	bpl.n	80012d8 <__sflush_r+0x78>
 80012ce:	1c42      	adds	r2, r0, #1
 80012d0:	d101      	bne.n	80012d6 <__sflush_r+0x76>
 80012d2:	682b      	ldr	r3, [r5, #0]
 80012d4:	b903      	cbnz	r3, 80012d8 <__sflush_r+0x78>
 80012d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80012d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012da:	602f      	str	r7, [r5, #0]
 80012dc:	b1b9      	cbz	r1, 800130e <__sflush_r+0xae>
 80012de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012e2:	4299      	cmp	r1, r3
 80012e4:	d002      	beq.n	80012ec <__sflush_r+0x8c>
 80012e6:	4628      	mov	r0, r5
 80012e8:	f7ff fbea 	bl	8000ac0 <_free_r>
 80012ec:	2300      	movs	r3, #0
 80012ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80012f0:	e00d      	b.n	800130e <__sflush_r+0xae>
 80012f2:	2301      	movs	r3, #1
 80012f4:	4628      	mov	r0, r5
 80012f6:	47b0      	blx	r6
 80012f8:	4602      	mov	r2, r0
 80012fa:	1c50      	adds	r0, r2, #1
 80012fc:	d1c9      	bne.n	8001292 <__sflush_r+0x32>
 80012fe:	682b      	ldr	r3, [r5, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0c6      	beq.n	8001292 <__sflush_r+0x32>
 8001304:	2b1d      	cmp	r3, #29
 8001306:	d001      	beq.n	800130c <__sflush_r+0xac>
 8001308:	2b16      	cmp	r3, #22
 800130a:	d11e      	bne.n	800134a <__sflush_r+0xea>
 800130c:	602f      	str	r7, [r5, #0]
 800130e:	2000      	movs	r0, #0
 8001310:	e022      	b.n	8001358 <__sflush_r+0xf8>
 8001312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001316:	b21b      	sxth	r3, r3
 8001318:	e01b      	b.n	8001352 <__sflush_r+0xf2>
 800131a:	690f      	ldr	r7, [r1, #16]
 800131c:	2f00      	cmp	r7, #0
 800131e:	d0f6      	beq.n	800130e <__sflush_r+0xae>
 8001320:	0793      	lsls	r3, r2, #30
 8001322:	680e      	ldr	r6, [r1, #0]
 8001324:	bf08      	it	eq
 8001326:	694b      	ldreq	r3, [r1, #20]
 8001328:	600f      	str	r7, [r1, #0]
 800132a:	bf18      	it	ne
 800132c:	2300      	movne	r3, #0
 800132e:	eba6 0807 	sub.w	r8, r6, r7
 8001332:	608b      	str	r3, [r1, #8]
 8001334:	f1b8 0f00 	cmp.w	r8, #0
 8001338:	dde9      	ble.n	800130e <__sflush_r+0xae>
 800133a:	6a21      	ldr	r1, [r4, #32]
 800133c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800133e:	4643      	mov	r3, r8
 8001340:	463a      	mov	r2, r7
 8001342:	4628      	mov	r0, r5
 8001344:	47b0      	blx	r6
 8001346:	2800      	cmp	r0, #0
 8001348:	dc08      	bgt.n	800135c <__sflush_r+0xfc>
 800134a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800134e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001352:	81a3      	strh	r3, [r4, #12]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800135c:	4407      	add	r7, r0
 800135e:	eba8 0800 	sub.w	r8, r8, r0
 8001362:	e7e7      	b.n	8001334 <__sflush_r+0xd4>
 8001364:	dfbffffe 	.word	0xdfbffffe

08001368 <_fflush_r>:
 8001368:	b538      	push	{r3, r4, r5, lr}
 800136a:	690b      	ldr	r3, [r1, #16]
 800136c:	4605      	mov	r5, r0
 800136e:	460c      	mov	r4, r1
 8001370:	b913      	cbnz	r3, 8001378 <_fflush_r+0x10>
 8001372:	2500      	movs	r5, #0
 8001374:	4628      	mov	r0, r5
 8001376:	bd38      	pop	{r3, r4, r5, pc}
 8001378:	b118      	cbz	r0, 8001382 <_fflush_r+0x1a>
 800137a:	6a03      	ldr	r3, [r0, #32]
 800137c:	b90b      	cbnz	r3, 8001382 <_fflush_r+0x1a>
 800137e:	f7ff fa71 	bl	8000864 <__sinit>
 8001382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f3      	beq.n	8001372 <_fflush_r+0xa>
 800138a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800138c:	07d0      	lsls	r0, r2, #31
 800138e:	d404      	bmi.n	800139a <_fflush_r+0x32>
 8001390:	0599      	lsls	r1, r3, #22
 8001392:	d402      	bmi.n	800139a <_fflush_r+0x32>
 8001394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001396:	f7ff fb72 	bl	8000a7e <__retarget_lock_acquire_recursive>
 800139a:	4628      	mov	r0, r5
 800139c:	4621      	mov	r1, r4
 800139e:	f7ff ff5f 	bl	8001260 <__sflush_r>
 80013a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013a4:	07da      	lsls	r2, r3, #31
 80013a6:	4605      	mov	r5, r0
 80013a8:	d4e4      	bmi.n	8001374 <_fflush_r+0xc>
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	059b      	lsls	r3, r3, #22
 80013ae:	d4e1      	bmi.n	8001374 <_fflush_r+0xc>
 80013b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013b2:	f7ff fb65 	bl	8000a80 <__retarget_lock_release_recursive>
 80013b6:	e7dd      	b.n	8001374 <_fflush_r+0xc>

080013b8 <fiprintf>:
 80013b8:	b40e      	push	{r1, r2, r3}
 80013ba:	b503      	push	{r0, r1, lr}
 80013bc:	4601      	mov	r1, r0
 80013be:	ab03      	add	r3, sp, #12
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <fiprintf+0x20>)
 80013c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80013c6:	6800      	ldr	r0, [r0, #0]
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	f7ff fca3 	bl	8000d14 <_vfiprintf_r>
 80013ce:	b002      	add	sp, #8
 80013d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80013d4:	b003      	add	sp, #12
 80013d6:	4770      	bx	lr
 80013d8:	20000054 	.word	0x20000054

080013dc <_putc_r>:
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	460d      	mov	r5, r1
 80013e0:	4614      	mov	r4, r2
 80013e2:	4606      	mov	r6, r0
 80013e4:	b118      	cbz	r0, 80013ee <_putc_r+0x12>
 80013e6:	6a03      	ldr	r3, [r0, #32]
 80013e8:	b90b      	cbnz	r3, 80013ee <_putc_r+0x12>
 80013ea:	f7ff fa3b 	bl	8000864 <__sinit>
 80013ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013f0:	07d8      	lsls	r0, r3, #31
 80013f2:	d405      	bmi.n	8001400 <_putc_r+0x24>
 80013f4:	89a3      	ldrh	r3, [r4, #12]
 80013f6:	0599      	lsls	r1, r3, #22
 80013f8:	d402      	bmi.n	8001400 <_putc_r+0x24>
 80013fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013fc:	f7ff fb3f 	bl	8000a7e <__retarget_lock_acquire_recursive>
 8001400:	68a3      	ldr	r3, [r4, #8]
 8001402:	3b01      	subs	r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	60a3      	str	r3, [r4, #8]
 8001408:	da05      	bge.n	8001416 <_putc_r+0x3a>
 800140a:	69a2      	ldr	r2, [r4, #24]
 800140c:	4293      	cmp	r3, r2
 800140e:	db12      	blt.n	8001436 <_putc_r+0x5a>
 8001410:	b2eb      	uxtb	r3, r5
 8001412:	2b0a      	cmp	r3, #10
 8001414:	d00f      	beq.n	8001436 <_putc_r+0x5a>
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	6022      	str	r2, [r4, #0]
 800141c:	701d      	strb	r5, [r3, #0]
 800141e:	b2ed      	uxtb	r5, r5
 8001420:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001422:	07da      	lsls	r2, r3, #31
 8001424:	d405      	bmi.n	8001432 <_putc_r+0x56>
 8001426:	89a3      	ldrh	r3, [r4, #12]
 8001428:	059b      	lsls	r3, r3, #22
 800142a:	d402      	bmi.n	8001432 <_putc_r+0x56>
 800142c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800142e:	f7ff fb27 	bl	8000a80 <__retarget_lock_release_recursive>
 8001432:	4628      	mov	r0, r5
 8001434:	bd70      	pop	{r4, r5, r6, pc}
 8001436:	4629      	mov	r1, r5
 8001438:	4622      	mov	r2, r4
 800143a:	4630      	mov	r0, r6
 800143c:	f000 f802 	bl	8001444 <__swbuf_r>
 8001440:	4605      	mov	r5, r0
 8001442:	e7ed      	b.n	8001420 <_putc_r+0x44>

08001444 <__swbuf_r>:
 8001444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001446:	460e      	mov	r6, r1
 8001448:	4614      	mov	r4, r2
 800144a:	4605      	mov	r5, r0
 800144c:	b118      	cbz	r0, 8001456 <__swbuf_r+0x12>
 800144e:	6a03      	ldr	r3, [r0, #32]
 8001450:	b90b      	cbnz	r3, 8001456 <__swbuf_r+0x12>
 8001452:	f7ff fa07 	bl	8000864 <__sinit>
 8001456:	69a3      	ldr	r3, [r4, #24]
 8001458:	60a3      	str	r3, [r4, #8]
 800145a:	89a3      	ldrh	r3, [r4, #12]
 800145c:	071a      	lsls	r2, r3, #28
 800145e:	d501      	bpl.n	8001464 <__swbuf_r+0x20>
 8001460:	6923      	ldr	r3, [r4, #16]
 8001462:	b943      	cbnz	r3, 8001476 <__swbuf_r+0x32>
 8001464:	4621      	mov	r1, r4
 8001466:	4628      	mov	r0, r5
 8001468:	f000 f82a 	bl	80014c0 <__swsetup_r>
 800146c:	b118      	cbz	r0, 8001476 <__swbuf_r+0x32>
 800146e:	f04f 37ff 	mov.w	r7, #4294967295
 8001472:	4638      	mov	r0, r7
 8001474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	6922      	ldr	r2, [r4, #16]
 800147a:	1a98      	subs	r0, r3, r2
 800147c:	6963      	ldr	r3, [r4, #20]
 800147e:	b2f6      	uxtb	r6, r6
 8001480:	4283      	cmp	r3, r0
 8001482:	4637      	mov	r7, r6
 8001484:	dc05      	bgt.n	8001492 <__swbuf_r+0x4e>
 8001486:	4621      	mov	r1, r4
 8001488:	4628      	mov	r0, r5
 800148a:	f7ff ff6d 	bl	8001368 <_fflush_r>
 800148e:	2800      	cmp	r0, #0
 8001490:	d1ed      	bne.n	800146e <__swbuf_r+0x2a>
 8001492:	68a3      	ldr	r3, [r4, #8]
 8001494:	3b01      	subs	r3, #1
 8001496:	60a3      	str	r3, [r4, #8]
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	6022      	str	r2, [r4, #0]
 800149e:	701e      	strb	r6, [r3, #0]
 80014a0:	6962      	ldr	r2, [r4, #20]
 80014a2:	1c43      	adds	r3, r0, #1
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d004      	beq.n	80014b2 <__swbuf_r+0x6e>
 80014a8:	89a3      	ldrh	r3, [r4, #12]
 80014aa:	07db      	lsls	r3, r3, #31
 80014ac:	d5e1      	bpl.n	8001472 <__swbuf_r+0x2e>
 80014ae:	2e0a      	cmp	r6, #10
 80014b0:	d1df      	bne.n	8001472 <__swbuf_r+0x2e>
 80014b2:	4621      	mov	r1, r4
 80014b4:	4628      	mov	r0, r5
 80014b6:	f7ff ff57 	bl	8001368 <_fflush_r>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d0d9      	beq.n	8001472 <__swbuf_r+0x2e>
 80014be:	e7d6      	b.n	800146e <__swbuf_r+0x2a>

080014c0 <__swsetup_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	4b29      	ldr	r3, [pc, #164]	@ (8001568 <__swsetup_r+0xa8>)
 80014c4:	4605      	mov	r5, r0
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	460c      	mov	r4, r1
 80014ca:	b118      	cbz	r0, 80014d4 <__swsetup_r+0x14>
 80014cc:	6a03      	ldr	r3, [r0, #32]
 80014ce:	b90b      	cbnz	r3, 80014d4 <__swsetup_r+0x14>
 80014d0:	f7ff f9c8 	bl	8000864 <__sinit>
 80014d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014d8:	0719      	lsls	r1, r3, #28
 80014da:	d422      	bmi.n	8001522 <__swsetup_r+0x62>
 80014dc:	06da      	lsls	r2, r3, #27
 80014de:	d407      	bmi.n	80014f0 <__swsetup_r+0x30>
 80014e0:	2209      	movs	r2, #9
 80014e2:	602a      	str	r2, [r5, #0]
 80014e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e8:	81a3      	strh	r3, [r4, #12]
 80014ea:	f04f 30ff 	mov.w	r0, #4294967295
 80014ee:	e033      	b.n	8001558 <__swsetup_r+0x98>
 80014f0:	0758      	lsls	r0, r3, #29
 80014f2:	d512      	bpl.n	800151a <__swsetup_r+0x5a>
 80014f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80014f6:	b141      	cbz	r1, 800150a <__swsetup_r+0x4a>
 80014f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80014fc:	4299      	cmp	r1, r3
 80014fe:	d002      	beq.n	8001506 <__swsetup_r+0x46>
 8001500:	4628      	mov	r0, r5
 8001502:	f7ff fadd 	bl	8000ac0 <_free_r>
 8001506:	2300      	movs	r3, #0
 8001508:	6363      	str	r3, [r4, #52]	@ 0x34
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001510:	81a3      	strh	r3, [r4, #12]
 8001512:	2300      	movs	r3, #0
 8001514:	6063      	str	r3, [r4, #4]
 8001516:	6923      	ldr	r3, [r4, #16]
 8001518:	6023      	str	r3, [r4, #0]
 800151a:	89a3      	ldrh	r3, [r4, #12]
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	81a3      	strh	r3, [r4, #12]
 8001522:	6923      	ldr	r3, [r4, #16]
 8001524:	b94b      	cbnz	r3, 800153a <__swsetup_r+0x7a>
 8001526:	89a3      	ldrh	r3, [r4, #12]
 8001528:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800152c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001530:	d003      	beq.n	800153a <__swsetup_r+0x7a>
 8001532:	4621      	mov	r1, r4
 8001534:	4628      	mov	r0, r5
 8001536:	f000 f856 	bl	80015e6 <__smakebuf_r>
 800153a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800153e:	f013 0201 	ands.w	r2, r3, #1
 8001542:	d00a      	beq.n	800155a <__swsetup_r+0x9a>
 8001544:	2200      	movs	r2, #0
 8001546:	60a2      	str	r2, [r4, #8]
 8001548:	6962      	ldr	r2, [r4, #20]
 800154a:	4252      	negs	r2, r2
 800154c:	61a2      	str	r2, [r4, #24]
 800154e:	6922      	ldr	r2, [r4, #16]
 8001550:	b942      	cbnz	r2, 8001564 <__swsetup_r+0xa4>
 8001552:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001556:	d1c5      	bne.n	80014e4 <__swsetup_r+0x24>
 8001558:	bd38      	pop	{r3, r4, r5, pc}
 800155a:	0799      	lsls	r1, r3, #30
 800155c:	bf58      	it	pl
 800155e:	6962      	ldrpl	r2, [r4, #20]
 8001560:	60a2      	str	r2, [r4, #8]
 8001562:	e7f4      	b.n	800154e <__swsetup_r+0x8e>
 8001564:	2000      	movs	r0, #0
 8001566:	e7f7      	b.n	8001558 <__swsetup_r+0x98>
 8001568:	20000054 	.word	0x20000054

0800156c <_sbrk_r>:
 800156c:	b538      	push	{r3, r4, r5, lr}
 800156e:	4d06      	ldr	r5, [pc, #24]	@ (8001588 <_sbrk_r+0x1c>)
 8001570:	2300      	movs	r3, #0
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	602b      	str	r3, [r5, #0]
 8001578:	f7ff f84a 	bl	8000610 <_sbrk>
 800157c:	1c43      	adds	r3, r0, #1
 800157e:	d102      	bne.n	8001586 <_sbrk_r+0x1a>
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	b103      	cbz	r3, 8001586 <_sbrk_r+0x1a>
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	bd38      	pop	{r3, r4, r5, pc}
 8001588:	20000200 	.word	0x20000200

0800158c <abort>:
 800158c:	b508      	push	{r3, lr}
 800158e:	2006      	movs	r0, #6
 8001590:	f000 f88e 	bl	80016b0 <raise>
 8001594:	2001      	movs	r0, #1
 8001596:	f7fe ffc3 	bl	8000520 <_exit>

0800159a <__swhatbuf_r>:
 800159a:	b570      	push	{r4, r5, r6, lr}
 800159c:	460c      	mov	r4, r1
 800159e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015a2:	2900      	cmp	r1, #0
 80015a4:	b096      	sub	sp, #88	@ 0x58
 80015a6:	4615      	mov	r5, r2
 80015a8:	461e      	mov	r6, r3
 80015aa:	da0d      	bge.n	80015c8 <__swhatbuf_r+0x2e>
 80015ac:	89a3      	ldrh	r3, [r4, #12]
 80015ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	bf14      	ite	ne
 80015b8:	2340      	movne	r3, #64	@ 0x40
 80015ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80015be:	2000      	movs	r0, #0
 80015c0:	6031      	str	r1, [r6, #0]
 80015c2:	602b      	str	r3, [r5, #0]
 80015c4:	b016      	add	sp, #88	@ 0x58
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	466a      	mov	r2, sp
 80015ca:	f000 f879 	bl	80016c0 <_fstat_r>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	dbec      	blt.n	80015ac <__swhatbuf_r+0x12>
 80015d2:	9901      	ldr	r1, [sp, #4]
 80015d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80015d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015dc:	4259      	negs	r1, r3
 80015de:	4159      	adcs	r1, r3
 80015e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015e4:	e7eb      	b.n	80015be <__swhatbuf_r+0x24>

080015e6 <__smakebuf_r>:
 80015e6:	898b      	ldrh	r3, [r1, #12]
 80015e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015ea:	079d      	lsls	r5, r3, #30
 80015ec:	4606      	mov	r6, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	d507      	bpl.n	8001602 <__smakebuf_r+0x1c>
 80015f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80015f6:	6023      	str	r3, [r4, #0]
 80015f8:	6123      	str	r3, [r4, #16]
 80015fa:	2301      	movs	r3, #1
 80015fc:	6163      	str	r3, [r4, #20]
 80015fe:	b003      	add	sp, #12
 8001600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001602:	ab01      	add	r3, sp, #4
 8001604:	466a      	mov	r2, sp
 8001606:	f7ff ffc8 	bl	800159a <__swhatbuf_r>
 800160a:	9f00      	ldr	r7, [sp, #0]
 800160c:	4605      	mov	r5, r0
 800160e:	4639      	mov	r1, r7
 8001610:	4630      	mov	r0, r6
 8001612:	f7ff fac9 	bl	8000ba8 <_malloc_r>
 8001616:	b948      	cbnz	r0, 800162c <__smakebuf_r+0x46>
 8001618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800161c:	059a      	lsls	r2, r3, #22
 800161e:	d4ee      	bmi.n	80015fe <__smakebuf_r+0x18>
 8001620:	f023 0303 	bic.w	r3, r3, #3
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	81a3      	strh	r3, [r4, #12]
 800162a:	e7e2      	b.n	80015f2 <__smakebuf_r+0xc>
 800162c:	89a3      	ldrh	r3, [r4, #12]
 800162e:	6020      	str	r0, [r4, #0]
 8001630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001634:	81a3      	strh	r3, [r4, #12]
 8001636:	9b01      	ldr	r3, [sp, #4]
 8001638:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800163c:	b15b      	cbz	r3, 8001656 <__smakebuf_r+0x70>
 800163e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001642:	4630      	mov	r0, r6
 8001644:	f000 f84e 	bl	80016e4 <_isatty_r>
 8001648:	b128      	cbz	r0, 8001656 <__smakebuf_r+0x70>
 800164a:	89a3      	ldrh	r3, [r4, #12]
 800164c:	f023 0303 	bic.w	r3, r3, #3
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	81a3      	strh	r3, [r4, #12]
 8001656:	89a3      	ldrh	r3, [r4, #12]
 8001658:	431d      	orrs	r5, r3
 800165a:	81a5      	strh	r5, [r4, #12]
 800165c:	e7cf      	b.n	80015fe <__smakebuf_r+0x18>

0800165e <_raise_r>:
 800165e:	291f      	cmp	r1, #31
 8001660:	b538      	push	{r3, r4, r5, lr}
 8001662:	4605      	mov	r5, r0
 8001664:	460c      	mov	r4, r1
 8001666:	d904      	bls.n	8001672 <_raise_r+0x14>
 8001668:	2316      	movs	r3, #22
 800166a:	6003      	str	r3, [r0, #0]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	bd38      	pop	{r3, r4, r5, pc}
 8001672:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001674:	b112      	cbz	r2, 800167c <_raise_r+0x1e>
 8001676:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800167a:	b94b      	cbnz	r3, 8001690 <_raise_r+0x32>
 800167c:	4628      	mov	r0, r5
 800167e:	f000 f853 	bl	8001728 <_getpid_r>
 8001682:	4622      	mov	r2, r4
 8001684:	4601      	mov	r1, r0
 8001686:	4628      	mov	r0, r5
 8001688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800168c:	f000 b83a 	b.w	8001704 <_kill_r>
 8001690:	2b01      	cmp	r3, #1
 8001692:	d00a      	beq.n	80016aa <_raise_r+0x4c>
 8001694:	1c59      	adds	r1, r3, #1
 8001696:	d103      	bne.n	80016a0 <_raise_r+0x42>
 8001698:	2316      	movs	r3, #22
 800169a:	6003      	str	r3, [r0, #0]
 800169c:	2001      	movs	r0, #1
 800169e:	e7e7      	b.n	8001670 <_raise_r+0x12>
 80016a0:	2100      	movs	r1, #0
 80016a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80016a6:	4620      	mov	r0, r4
 80016a8:	4798      	blx	r3
 80016aa:	2000      	movs	r0, #0
 80016ac:	e7e0      	b.n	8001670 <_raise_r+0x12>
	...

080016b0 <raise>:
 80016b0:	4b02      	ldr	r3, [pc, #8]	@ (80016bc <raise+0xc>)
 80016b2:	4601      	mov	r1, r0
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	f7ff bfd2 	b.w	800165e <_raise_r>
 80016ba:	bf00      	nop
 80016bc:	20000054 	.word	0x20000054

080016c0 <_fstat_r>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	4d07      	ldr	r5, [pc, #28]	@ (80016e0 <_fstat_r+0x20>)
 80016c4:	2300      	movs	r3, #0
 80016c6:	4604      	mov	r4, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	4611      	mov	r1, r2
 80016cc:	602b      	str	r3, [r5, #0]
 80016ce:	f7fe ff77 	bl	80005c0 <_fstat>
 80016d2:	1c43      	adds	r3, r0, #1
 80016d4:	d102      	bne.n	80016dc <_fstat_r+0x1c>
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	b103      	cbz	r3, 80016dc <_fstat_r+0x1c>
 80016da:	6023      	str	r3, [r4, #0]
 80016dc:	bd38      	pop	{r3, r4, r5, pc}
 80016de:	bf00      	nop
 80016e0:	20000200 	.word	0x20000200

080016e4 <_isatty_r>:
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	4d06      	ldr	r5, [pc, #24]	@ (8001700 <_isatty_r+0x1c>)
 80016e8:	2300      	movs	r3, #0
 80016ea:	4604      	mov	r4, r0
 80016ec:	4608      	mov	r0, r1
 80016ee:	602b      	str	r3, [r5, #0]
 80016f0:	f7fe ff76 	bl	80005e0 <_isatty>
 80016f4:	1c43      	adds	r3, r0, #1
 80016f6:	d102      	bne.n	80016fe <_isatty_r+0x1a>
 80016f8:	682b      	ldr	r3, [r5, #0]
 80016fa:	b103      	cbz	r3, 80016fe <_isatty_r+0x1a>
 80016fc:	6023      	str	r3, [r4, #0]
 80016fe:	bd38      	pop	{r3, r4, r5, pc}
 8001700:	20000200 	.word	0x20000200

08001704 <_kill_r>:
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	4d07      	ldr	r5, [pc, #28]	@ (8001724 <_kill_r+0x20>)
 8001708:	2300      	movs	r3, #0
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	602b      	str	r3, [r5, #0]
 8001712:	f7fe fef5 	bl	8000500 <_kill>
 8001716:	1c43      	adds	r3, r0, #1
 8001718:	d102      	bne.n	8001720 <_kill_r+0x1c>
 800171a:	682b      	ldr	r3, [r5, #0]
 800171c:	b103      	cbz	r3, 8001720 <_kill_r+0x1c>
 800171e:	6023      	str	r3, [r4, #0]
 8001720:	bd38      	pop	{r3, r4, r5, pc}
 8001722:	bf00      	nop
 8001724:	20000200 	.word	0x20000200

08001728 <_getpid_r>:
 8001728:	f7fe bee2 	b.w	80004f0 <_getpid>

0800172c <_init>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	bf00      	nop
 8001730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001732:	bc08      	pop	{r3}
 8001734:	469e      	mov	lr, r3
 8001736:	4770      	bx	lr

08001738 <_fini>:
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173a:	bf00      	nop
 800173c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800173e:	bc08      	pop	{r3}
 8001740:	469e      	mov	lr, r3
 8001742:	4770      	bx	lr
