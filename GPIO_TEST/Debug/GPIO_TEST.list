
GPIO_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000019c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000047c  0800019c  0800019c  0000119c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000618  08000620  00001620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000618  08000618  00001620  2**0
                  CONTENTS
  4 .ARM          00000000  08000618  08000618  00001620  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000618  08000620  00001620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000618  08000618  00001618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800061c  0800061c  0000161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001620  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001143  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000037b  00000000  00000000  00002793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00002b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000083  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012a1  00000000  00000000  00002c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c78  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004afb  00000000  00000000  00004b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009667  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000240  00000000  00000000  000096ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000098ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800019c <__do_global_dtors_aux>:
 800019c:	b510      	push	{r4, lr}
 800019e:	4c05      	ldr	r4, [pc, #20]	@ (80001b4 <__do_global_dtors_aux+0x18>)
 80001a0:	7823      	ldrb	r3, [r4, #0]
 80001a2:	b933      	cbnz	r3, 80001b2 <__do_global_dtors_aux+0x16>
 80001a4:	4b04      	ldr	r3, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x1c>)
 80001a6:	b113      	cbz	r3, 80001ae <__do_global_dtors_aux+0x12>
 80001a8:	4804      	ldr	r0, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x20>)
 80001aa:	f3af 8000 	nop.w
 80001ae:	2301      	movs	r3, #1
 80001b0:	7023      	strb	r3, [r4, #0]
 80001b2:	bd10      	pop	{r4, pc}
 80001b4:	20000000 	.word	0x20000000
 80001b8:	00000000 	.word	0x00000000
 80001bc:	08000600 	.word	0x08000600

080001c0 <frame_dummy>:
 80001c0:	b508      	push	{r3, lr}
 80001c2:	4b03      	ldr	r3, [pc, #12]	@ (80001d0 <frame_dummy+0x10>)
 80001c4:	b11b      	cbz	r3, 80001ce <frame_dummy+0xe>
 80001c6:	4903      	ldr	r1, [pc, #12]	@ (80001d4 <frame_dummy+0x14>)
 80001c8:	4803      	ldr	r0, [pc, #12]	@ (80001d8 <frame_dummy+0x18>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	00000000 	.word	0x00000000
 80001d4:	20000004 	.word	0x20000004
 80001d8:	08000600 	.word	0x08000600

080001dc <GPIO_Init>:
 * @return			- none
 *
 * @note			- none
 *
 */
void GPIO_Init(GPIO_Reg_t *pGPIOx, const GPIO_Config_t *pGPIO_Init) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	6039      	str	r1, [r7, #0]
	uint8_t pinNumber = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	73fb      	strb	r3, [r7, #15]

	/* Clock enable for GPIO port */
	GPIO_CLK_EN(pGPIO_Init -> port);
 80001ea:	4b53      	ldr	r3, [pc, #332]	@ (8000338 <GPIO_Init+0x15c>)
 80001ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	4619      	mov	r1, r3
 80001f4:	2301      	movs	r3, #1
 80001f6:	408b      	lsls	r3, r1
 80001f8:	494f      	ldr	r1, [pc, #316]	@ (8000338 <GPIO_Init+0x15c>)
 80001fa:	4313      	orrs	r3, r2
 80001fc:	630b      	str	r3, [r1, #48]	@ 0x30

	uint16_t temp = pGPIO_Init -> pin;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	885b      	ldrh	r3, [r3, #2]
 8000202:	817b      	strh	r3, [r7, #10]
	while (temp > 0) {
 8000204:	e08f      	b.n	8000326 <GPIO_Init+0x14a>
		pinNumber = SelectPin(&temp);
 8000206:	f107 030a 	add.w	r3, r7, #10
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f8f7 	bl	80003fe <SelectPin>
 8000210:	4603      	mov	r3, r0
 8000212:	73fb      	strb	r3, [r7, #15]

		pGPIOx -> MODER 	&= ~((0x03U) << (pinNumber * 2));
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	2103      	movs	r1, #3
 800021e:	fa01 f303 	lsl.w	r3, r1, r3
 8000222:	43db      	mvns	r3, r3
 8000224:	401a      	ands	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
		pGPIOx -> MODER 	|= pGPIO_Init -> mode << (pinNumber * 2);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	7912      	ldrb	r2, [r2, #4]
 8000232:	4611      	mov	r1, r2
 8000234:	7bfa      	ldrb	r2, [r7, #15]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	431a      	orrs	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	601a      	str	r2, [r3, #0]

		pGPIOx -> OTYPER 	&= ~((0x03U) << (pinNumber));
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	685a      	ldr	r2, [r3, #4]
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	2103      	movs	r1, #3
 800024a:	fa01 f303 	lsl.w	r3, r1, r3
 800024e:	43db      	mvns	r3, r3
 8000250:	401a      	ands	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	605a      	str	r2, [r3, #4]
		pGPIOx -> OTYPER 	|= pGPIO_Init -> type 	<< (pinNumber);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	7952      	ldrb	r2, [r2, #5]
 800025e:	4611      	mov	r1, r2
 8000260:	7bfa      	ldrb	r2, [r7, #15]
 8000262:	fa01 f202 	lsl.w	r2, r1, r2
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	605a      	str	r2, [r3, #4]

		pGPIOx -> OSPEEDR 	&= ~((0x03U) << (pinNumber * 2));
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	2103      	movs	r1, #3
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	609a      	str	r2, [r3, #8]
		pGPIOx -> OSPEEDR 	|= pGPIO_Init -> speed	<< (pinNumber * 2);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	7992      	ldrb	r2, [r2, #6]
 800028a:	4611      	mov	r1, r2
 800028c:	7bfa      	ldrb	r2, [r7, #15]
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	431a      	orrs	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	609a      	str	r2, [r3, #8]

		pGPIOx -> PUPDR 	&= ~((0x03U) << (pinNumber * 2));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	68da      	ldr	r2, [r3, #12]
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	2103      	movs	r1, #3
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	401a      	ands	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	60da      	str	r2, [r3, #12]
		pGPIOx -> PUPDR 	|= pGPIO_Init -> pupd 	<< (pinNumber * 2);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	79d2      	ldrb	r2, [r2, #7]
 80002b8:	4611      	mov	r1, r2
 80002ba:	7bfa      	ldrb	r2, [r7, #15]
 80002bc:	0052      	lsls	r2, r2, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	431a      	orrs	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	60da      	str	r2, [r3, #12]

		if (pGPIO_Init -> mode == alt_function) {
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d12a      	bne.n	8000326 <GPIO_Init+0x14a>
			uint8_t temp1 = pinNumber/8;
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
 80002d2:	08db      	lsrs	r3, r3, #3
 80002d4:	73bb      	strb	r3, [r7, #14]
			uint8_t temp2 = pinNumber%8;
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	f003 0307 	and.w	r3, r3, #7
 80002dc:	737b      	strb	r3, [r7, #13]
			pGPIOx -> AFR[temp1]	&= ~((0x0FU) << ((temp2) * 4));
 80002de:	7bba      	ldrb	r2, [r7, #14]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3208      	adds	r2, #8
 80002e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80002e8:	7b7b      	ldrb	r3, [r7, #13]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	220f      	movs	r2, #15
 80002ee:	fa02 f303 	lsl.w	r3, r2, r3
 80002f2:	43db      	mvns	r3, r3
 80002f4:	7bba      	ldrb	r2, [r7, #14]
 80002f6:	4019      	ands	r1, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3208      	adds	r2, #8
 80002fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOx -> AFR[temp1]	|= pGPIO_Init -> alternate << ((temp2) * 4);
 8000300:	7bba      	ldrb	r2, [r7, #14]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3208      	adds	r2, #8
 8000306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	7a12      	ldrb	r2, [r2, #8]
 800030e:	4611      	mov	r1, r2
 8000310:	7b7a      	ldrb	r2, [r7, #13]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	7bba      	ldrb	r2, [r7, #14]
 800031c:	4319      	orrs	r1, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3208      	adds	r2, #8
 8000322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	while (temp > 0) {
 8000326:	897b      	ldrh	r3, [r7, #10]
 8000328:	2b00      	cmp	r3, #0
 800032a:	f47f af6c 	bne.w	8000206 <GPIO_Init+0x2a>
		}
	}


}
 800032e:	bf00      	nop
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40023800 	.word	0x40023800

0800033c <GPIO_DeInit>:

void GPIO_DeInit(const GPIO_Config_t *pGPIOx) {
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	GPIO_PORT_RESET(pGPIOx -> port);
 8000344:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <GPIO_DeInit+0x40>)
 8000346:	691a      	ldr	r2, [r3, #16]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4619      	mov	r1, r3
 800034e:	2301      	movs	r3, #1
 8000350:	408b      	lsls	r3, r1
 8000352:	490a      	ldr	r1, [pc, #40]	@ (800037c <GPIO_DeInit+0x40>)
 8000354:	4313      	orrs	r3, r2
 8000356:	610b      	str	r3, [r1, #16]
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <GPIO_DeInit+0x40>)
 800035a:	691a      	ldr	r2, [r3, #16]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4619      	mov	r1, r3
 8000362:	2301      	movs	r3, #1
 8000364:	408b      	lsls	r3, r1
 8000366:	43db      	mvns	r3, r3
 8000368:	4904      	ldr	r1, [pc, #16]	@ (800037c <GPIO_DeInit+0x40>)
 800036a:	4013      	ands	r3, r2
 800036c:	610b      	str	r3, [r1, #16]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40023800 	.word	0x40023800

08000380 <GPIO_WritePin>:
	uint16_t value;
	value = (uint16_t) pGPIOx -> IDR;
	return value;
}

void GPIO_WritePin(GPIO_Reg_t *pGPIOx, const GPIO_Pin_t GPIO_Pin, state_t pinValue) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	807b      	strh	r3, [r7, #2]
 800038c:	4613      	mov	r3, r2
 800038e:	707b      	strb	r3, [r7, #1]
	uint16_t temp = GPIO_Pin;
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	817b      	strh	r3, [r7, #10]
	uint16_t temp1 = SelectPin(&temp);
 8000394:	f107 030a 	add.w	r3, r7, #10
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f830 	bl	80003fe <SelectPin>
 800039e:	4603      	mov	r3, r0
 80003a0:	81fb      	strh	r3, [r7, #14]
	uint16_t temp2 = (uint16_t) pinValue << temp1;
 80003a2:	787a      	ldrb	r2, [r7, #1]
 80003a4:	89fb      	ldrh	r3, [r7, #14]
 80003a6:	fa02 f303 	lsl.w	r3, r2, r3
 80003aa:	81bb      	strh	r3, [r7, #12]
	pGPIOx ->  ODR &= ~(0x1 << temp1);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	89fa      	ldrh	r2, [r7, #14]
 80003b2:	2101      	movs	r1, #1
 80003b4:	fa01 f202 	lsl.w	r2, r1, r2
 80003b8:	43d2      	mvns	r2, r2
 80003ba:	401a      	ands	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	615a      	str	r2, [r3, #20]
	pGPIOx ->  ODR |= (GPIO_Pin & temp2);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	8879      	ldrh	r1, [r7, #2]
 80003c6:	89ba      	ldrh	r2, [r7, #12]
 80003c8:	400a      	ands	r2, r1
 80003ca:	b292      	uxth	r2, r2
 80003cc:	431a      	orrs	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	615a      	str	r2, [r3, #20]
}
 80003d2:	bf00      	nop
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <GPIO_TogglePin>:

void GPIO_WritePort(GPIO_Reg_t *pGPIOx, uint16_t portValue) {
	pGPIOx -> ODR = portValue;
}

void GPIO_TogglePin(GPIO_Reg_t *pGPIOx, const GPIO_Pin_t GPIO_Pin) {
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
 80003e2:	460b      	mov	r3, r1
 80003e4:	807b      	strh	r3, [r7, #2]
	pGPIOx -> ODR ^= GPIO_Pin;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	695a      	ldr	r2, [r3, #20]
 80003ea:	887b      	ldrh	r3, [r7, #2]
 80003ec:	405a      	eors	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	615a      	str	r2, [r3, #20]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <SelectPin>:

void GPIO_IRQHandle(GPIO_Reg_t *pGPIOx) {

}

uint8_t SelectPin(uint16_t *x) {
 80003fe:	b480      	push	{r7}
 8000400:	b085      	sub	sp, #20
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	73fb      	strb	r3, [r7, #15]
	uint16_t temp1 = *x;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	81bb      	strh	r3, [r7, #12]

	while (!(*x & 0x01U)) {
 8000410:	e008      	b.n	8000424 <SelectPin+0x26>
		*x >>= 1;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	881b      	ldrh	r3, [r3, #0]
 8000416:	085b      	lsrs	r3, r3, #1
 8000418:	b29a      	uxth	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	801a      	strh	r2, [r3, #0]
		result++;
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	3301      	adds	r3, #1
 8000422:	73fb      	strb	r3, [r7, #15]
	while (!(*x & 0x01U)) {
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	f003 0301 	and.w	r3, r3, #1
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0f0      	beq.n	8000412 <SelectPin+0x14>
	}
	*x = (temp1 & ~(0x01 << result));
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	2201      	movs	r2, #1
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	b21b      	sxth	r3, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	b21a      	sxth	r2, r3
 800043e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000442:	4013      	ands	r3, r2
 8000444:	b21b      	sxth	r3, r3
 8000446:	b29a      	uxth	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	801a      	strh	r2, [r3, #0]
	return result;
 800044c:	7bfb      	ldrb	r3, [r7, #15]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
	...

0800045c <main>:

void GPIO_Config(GPIO_Config_t *gpio_config);
void RCC_Config(void);

int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
	GPIO_Config_t gpiog_config;

	RCC_Config();
 8000462:	f000 f83f 	bl	80004e4 <RCC_Config>
	GPIO_Config(&gpiog_config);
 8000466:	463b      	mov	r3, r7
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f85f 	bl	800052c <GPIO_Config>
    /* Loop forever */
	GPIO_WritePin(GPIO_PORTG, LED_RED, reset);
 800046e:	2200      	movs	r2, #0
 8000470:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000474:	481a      	ldr	r0, [pc, #104]	@ (80004e0 <main+0x84>)
 8000476:	f7ff ff83 	bl	8000380 <GPIO_WritePin>
	GPIO_WritePin(GPIO_PORTG, LED_GREEN, set);
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000480:	4817      	ldr	r0, [pc, #92]	@ (80004e0 <main+0x84>)
 8000482:	f7ff ff7d 	bl	8000380 <GPIO_WritePin>

	while(true) {
		for(int k = 0; k < 10; k++){
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e020      	b.n	80004ce <main+0x72>
			for(int i = 0; i < 500; i++)
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	e00c      	b.n	80004ac <main+0x50>
				for(int j = 0; j < 500; j++);
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	e002      	b.n	800049e <main+0x42>
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3301      	adds	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004a4:	dbf8      	blt.n	8000498 <main+0x3c>
			for(int i = 0; i < 500; i++)
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	3301      	adds	r3, #1
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]
 80004ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004b2:	dbee      	blt.n	8000492 <main+0x36>
			GPIO_TogglePin(GPIO_PORTG, LED_RED);
 80004b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004b8:	4809      	ldr	r0, [pc, #36]	@ (80004e0 <main+0x84>)
 80004ba:	f7ff ff8e 	bl	80003da <GPIO_TogglePin>
			GPIO_TogglePin(GPIO_PORTG, LED_GREEN);
 80004be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004c2:	4807      	ldr	r0, [pc, #28]	@ (80004e0 <main+0x84>)
 80004c4:	f7ff ff89 	bl	80003da <GPIO_TogglePin>
		for(int k = 0; k < 10; k++){
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	3301      	adds	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	2b09      	cmp	r3, #9
 80004d2:	dddb      	ble.n	800048c <main+0x30>
		}
		GPIO_DeInit(&gpiog_config);
 80004d4:	463b      	mov	r3, r7
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff30 	bl	800033c <GPIO_DeInit>
		for(int k = 0; k < 10; k++){
 80004dc:	e7d3      	b.n	8000486 <main+0x2a>
 80004de:	bf00      	nop
 80004e0:	40021800 	.word	0x40021800

080004e4 <RCC_Config>:
	}
}

void RCC_Config(void) {
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
	RCC_CR_Bits *cr_bits;
	RCC_CFGR_Bits *cfgr_bits;

	cr_bits = (RCC_CR_Bits*) &RCC->CR;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <RCC_Config+0x40>)
 80004ec:	607b      	str	r3, [r7, #4]
	cfgr_bits = (RCC_CFGR_Bits *) &RCC->CFGR;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <RCC_Config+0x44>)
 80004f0:	603b      	str	r3, [r7, #0]

	/* RCC CR modify */
	cr_bits->hse_on = set;
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	7893      	ldrb	r3, [r2, #2]
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	7093      	strb	r3, [r2, #2]

	while(!(cr_bits->hse_rdy)); /* wait for HSE ready */
 80004fc:	bf00      	nop
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f8      	beq.n	80004fe <RCC_Config+0x1a>

	cfgr_bits->sw = set;
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	7813      	ldrb	r3, [r2, #0]
 8000510:	2101      	movs	r1, #1
 8000512:	f361 0301 	bfi	r3, r1, #0, #2
 8000516:	7013      	strb	r3, [r2, #0]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40023800 	.word	0x40023800
 8000528:	40023808 	.word	0x40023808

0800052c <GPIO_Config>:

void GPIO_Config(GPIO_Config_t *gpio_config) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	gpio_config->port = gpiog;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2206      	movs	r2, #6
 8000538:	701a      	strb	r2, [r3, #0]
	gpio_config->pin = pin13|pin14;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8000540:	805a      	strh	r2, [r3, #2]
	gpio_config->mode = output;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2201      	movs	r2, #1
 8000546:	711a      	strb	r2, [r3, #4]
	gpio_config->type = push_pull;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIO_PORTG, gpio_config);
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4803      	ldr	r0, [pc, #12]	@ (8000560 <GPIO_Config+0x34>)
 8000552:	f7ff fe43 	bl	80001dc <GPIO_Init>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021800 	.word	0x40021800

08000564 <Reset_Handler>:
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <LoopForever+0x2>)
 8000566:	4685      	mov	sp, r0
 8000568:	f3af 8000 	nop.w
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <LoopForever+0x6>)
 800056e:	490d      	ldr	r1, [pc, #52]	@ (80005a4 <LoopForever+0xa>)
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <LoopForever+0xe>)
 8000572:	2300      	movs	r3, #0
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:
 8000576:	58d4      	ldr	r4, [r2, r3]
 8000578:	50c4      	str	r4, [r0, r3]
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:
 800057c:	18c4      	adds	r4, r0, r3
 800057e:	428c      	cmp	r4, r1
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
 8000582:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <LoopForever+0x12>)
 8000584:	4c0a      	ldr	r4, [pc, #40]	@ (80005b0 <LoopForever+0x16>)
 8000586:	2300      	movs	r3, #0
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:
 800058e:	42a2      	cmp	r2, r4
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>
 8000592:	f000 f811 	bl	80005b8 <__libc_init_array>
 8000596:	f7ff ff61 	bl	800045c <main>

0800059a <LoopForever>:
 800059a:	e7fe      	b.n	800059a <LoopForever>
 800059c:	20030000 	.word	0x20030000
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000000 	.word	0x20000000
 80005a8:	08000620 	.word	0x08000620
 80005ac:	20000000 	.word	0x20000000
 80005b0:	2000001c 	.word	0x2000001c

080005b4 <ADC_IRQHandler>:
 80005b4:	e7fe      	b.n	80005b4 <ADC_IRQHandler>
	...

080005b8 <__libc_init_array>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	4d0d      	ldr	r5, [pc, #52]	@ (80005f0 <__libc_init_array+0x38>)
 80005bc:	4c0d      	ldr	r4, [pc, #52]	@ (80005f4 <__libc_init_array+0x3c>)
 80005be:	1b64      	subs	r4, r4, r5
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	2600      	movs	r6, #0
 80005c4:	42a6      	cmp	r6, r4
 80005c6:	d109      	bne.n	80005dc <__libc_init_array+0x24>
 80005c8:	4d0b      	ldr	r5, [pc, #44]	@ (80005f8 <__libc_init_array+0x40>)
 80005ca:	4c0c      	ldr	r4, [pc, #48]	@ (80005fc <__libc_init_array+0x44>)
 80005cc:	f000 f818 	bl	8000600 <_init>
 80005d0:	1b64      	subs	r4, r4, r5
 80005d2:	10a4      	asrs	r4, r4, #2
 80005d4:	2600      	movs	r6, #0
 80005d6:	42a6      	cmp	r6, r4
 80005d8:	d105      	bne.n	80005e6 <__libc_init_array+0x2e>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e0:	4798      	blx	r3
 80005e2:	3601      	adds	r6, #1
 80005e4:	e7ee      	b.n	80005c4 <__libc_init_array+0xc>
 80005e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ea:	4798      	blx	r3
 80005ec:	3601      	adds	r6, #1
 80005ee:	e7f2      	b.n	80005d6 <__libc_init_array+0x1e>
 80005f0:	08000618 	.word	0x08000618
 80005f4:	08000618 	.word	0x08000618
 80005f8:	08000618 	.word	0x08000618
 80005fc:	0800061c 	.word	0x0800061c

08000600 <_init>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr

0800060c <_fini>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr
