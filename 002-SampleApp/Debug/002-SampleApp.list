
002-SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000157c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800172c  0800172c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001864  08001864  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001864  08001864  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001864  08001864  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0800186c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          0000016c  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000ac0  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000003df  00000000  00000000  00020bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000138  00000000  00000000  00020fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d8  00000000  00000000  000210f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002bac  00000000  00000000  000211c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000015a8  00000000  00000000  00023d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000097d9  00000000  00000000  0002531c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000e50  00000000  00000000  0002eaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0002f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001714 	.word	0x08001714

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	08001714 	.word	0x08001714

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ArrayFillNumbers>:
#include <string.h>

int numbers[] = {456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};
int someData = 90;

void ArrayFillNumbers(int pNumbers[], unsigned int len){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++){
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	e015      	b.n	80002cc <ArrayFillNumbers+0x3c>
		pNumbers[i] = rand() % 1000;
 80002a0:	f000 fa16 	bl	80006d0 <rand>
 80002a4:	4602      	mov	r2, r0
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	6879      	ldr	r1, [r7, #4]
 80002ac:	4419      	add	r1, r3
 80002ae:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <ArrayFillNumbers+0x54>)
 80002b0:	fb83 0302 	smull	r0, r3, r3, r2
 80002b4:	1198      	asrs	r0, r3, #6
 80002b6:	17d3      	asrs	r3, r2, #31
 80002b8:	1ac3      	subs	r3, r0, r3
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	fb00 f303 	mul.w	r3, r0, r3
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	600b      	str	r3, [r1, #0]
	for(int i = 0; i < len; i++){
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d8e5      	bhi.n	80002a0 <ArrayFillNumbers+0x10>
	}
	someData = 5;
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <ArrayFillNumbers+0x58>)
 80002d6:	2205      	movs	r2, #5
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	10624dd3 	.word	0x10624dd3
 80002e8:	20000044 	.word	0x20000044

080002ec <DisplayNumbers>:

void DisplayNumbers(int *pNumbers, unsigned int len, char *pMessage){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
	printf("%s",pMessage);
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	480e      	ldr	r0, [pc, #56]	; (8000334 <DisplayNumbers+0x48>)
 80002fc:	f000 fad6 	bl	80008ac <iprintf>

	for(int i = 0; i < len; i++){
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	e00b      	b.n	800031e <DisplayNumbers+0x32>
		printf("%5d\t",pNumbers[i]);
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	4413      	add	r3, r2
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4619      	mov	r1, r3
 8000312:	4809      	ldr	r0, [pc, #36]	; (8000338 <DisplayNumbers+0x4c>)
 8000314:	f000 faca 	bl	80008ac <iprintf>
	for(int i = 0; i < len; i++){
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	3301      	adds	r3, #1
 800031c:	617b      	str	r3, [r7, #20]
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	68ba      	ldr	r2, [r7, #8]
 8000322:	429a      	cmp	r2, r3
 8000324:	d8ef      	bhi.n	8000306 <DisplayNumbers+0x1a>
	}

	printf("\n");
 8000326:	200a      	movs	r0, #10
 8000328:	f000 fad2 	bl	80008d0 <putchar>
}
 800032c:	bf00      	nop
 800032e:	3718      	adds	r7, #24
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	0800172c 	.word	0x0800172c
 8000338:	08001730 	.word	0x08001730

0800033c <SwapNumbers>:

void SwapNumbers(int *x, int *y){
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
	int temp = *x;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	60fb      	str	r3, [r7, #12]
	*x = *y;
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	601a      	str	r2, [r3, #0]
	*y = temp;
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	68fa      	ldr	r2, [r7, #12]
 8000358:	601a      	str	r2, [r3, #0]
	void (*jumpAddr) (void);
	jumpAddr = (void*)0x20000009;
	jumpAddr();
#endif

	someData = 10;
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <SwapNumbers+0x30>)
 800035c:	220a      	movs	r2, #10
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	20000044 	.word	0x20000044

08000370 <BubbleSort>:

void BubbleSort(int *pNumbers, unsigned int len){
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	int i, j = 0, flag = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]

	for(i = 0; i < len - 1; i++){
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	e02f      	b.n	80003e8 <BubbleSort+0x78>
		flag = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]

		for(j = 0; j < len - 1 - i; j++){
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]
 8000390:	e01d      	b.n	80003ce <BubbleSort+0x5e>
			if(pNumbers[j] > pNumbers[j+1]){
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	3301      	adds	r3, #1
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	6879      	ldr	r1, [r7, #4]
 80003a4:	440b      	add	r3, r1
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dd0d      	ble.n	80003c8 <BubbleSort+0x58>
				SwapNumbers(&pNumbers[j], &pNumbers[j+1]);
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	18d0      	adds	r0, r2, r3
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	3301      	adds	r3, #1
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	4413      	add	r3, r2
 80003be:	4619      	mov	r1, r3
 80003c0:	f7ff ffbc 	bl	800033c <SwapNumbers>
				flag = 1;
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < len - 1 - i; j++){
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	3301      	adds	r3, #1
 80003cc:	613b      	str	r3, [r7, #16]
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	683a      	ldr	r2, [r7, #0]
 80003d2:	1ad3      	subs	r3, r2, r3
 80003d4:	1e5a      	subs	r2, r3, #1
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d8da      	bhi.n	8000392 <BubbleSort+0x22>
			}
		}

		if(flag == 0) break;
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <BubbleSort+0x84>
	for(i = 0; i < len - 1; i++){
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	1e5a      	subs	r2, r3, #1
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d8ca      	bhi.n	8000388 <BubbleSort+0x18>
	}
}
 80003f2:	e000      	b.n	80003f6 <BubbleSort+0x86>
		if(flag == 0) break;
 80003f4:	bf00      	nop
}
 80003f6:	bf00      	nop
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <InsertionSort>:

void InsertionSort(int *pNumbers, unsigned int len){
 80003fe:	b480      	push	{r7}
 8000400:	b087      	sub	sp, #28
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
 8000406:	6039      	str	r1, [r7, #0]
	int i, j, num;

	for(i = 1; i < len; i++){
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	e02c      	b.n	8000468 <InsertionSort+0x6a>
		j = i-1;
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	3b01      	subs	r3, #1
 8000412:	613b      	str	r3, [r7, #16]
		num = pNumbers[i];
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	4413      	add	r3, r2
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	60fb      	str	r3, [r7, #12]

		while((j > -1) && (pNumbers[j] > num)){
 8000420:	e00d      	b.n	800043e <InsertionSort+0x40>
			pNumbers[j+1] = pNumbers[j];
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	441a      	add	r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	3301      	adds	r3, #1
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	440b      	add	r3, r1
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	601a      	str	r2, [r3, #0]
			j--;
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	3b01      	subs	r3, #1
 800043c:	613b      	str	r3, [r7, #16]
		while((j > -1) && (pNumbers[j] > num)){
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	2b00      	cmp	r3, #0
 8000442:	db07      	blt.n	8000454 <InsertionSort+0x56>
 8000444:	693b      	ldr	r3, [r7, #16]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4413      	add	r3, r2
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	429a      	cmp	r2, r3
 8000452:	dbe6      	blt.n	8000422 <InsertionSort+0x24>
		}

		pNumbers[j+1] = num;
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	3301      	adds	r3, #1
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	601a      	str	r2, [r3, #0]
	for(i = 1; i < len; i++){
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	429a      	cmp	r2, r3
 800046e:	d8ce      	bhi.n	800040e <InsertionSort+0x10>
	}
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	371c      	adds	r7, #28
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
	...

08000480 <main>:


int main(){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
	unsigned int len = sizeof(numbers)/sizeof(int);
 8000486:	2311      	movs	r3, #17
 8000488:	607b      	str	r3, [r7, #4]

	ArrayFillNumbers(numbers, len);
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	4813      	ldr	r0, [pc, #76]	; (80004dc <main+0x5c>)
 800048e:	f7ff feff 	bl	8000290 <ArrayFillNumbers>

	DisplayNumbers(numbers, len, "B-unsorted array: ");
 8000492:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <main+0x60>)
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	4811      	ldr	r0, [pc, #68]	; (80004dc <main+0x5c>)
 8000498:	f7ff ff28 	bl	80002ec <DisplayNumbers>

	BubbleSort(numbers, len);
 800049c:	6879      	ldr	r1, [r7, #4]
 800049e:	480f      	ldr	r0, [pc, #60]	; (80004dc <main+0x5c>)
 80004a0:	f7ff ff66 	bl	8000370 <BubbleSort>

	DisplayNumbers(numbers, len, "B-sorted array: ");
 80004a4:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <main+0x64>)
 80004a6:	6879      	ldr	r1, [r7, #4]
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <main+0x5c>)
 80004aa:	f7ff ff1f 	bl	80002ec <DisplayNumbers>

	ArrayFillNumbers(numbers, len);
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	480a      	ldr	r0, [pc, #40]	; (80004dc <main+0x5c>)
 80004b2:	f7ff feed 	bl	8000290 <ArrayFillNumbers>

	DisplayNumbers(numbers, len, "I-unsorted array: ");
 80004b6:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <main+0x68>)
 80004b8:	6879      	ldr	r1, [r7, #4]
 80004ba:	4808      	ldr	r0, [pc, #32]	; (80004dc <main+0x5c>)
 80004bc:	f7ff ff16 	bl	80002ec <DisplayNumbers>

	InsertionSort(numbers, len);
 80004c0:	6879      	ldr	r1, [r7, #4]
 80004c2:	4806      	ldr	r0, [pc, #24]	; (80004dc <main+0x5c>)
 80004c4:	f7ff ff9b 	bl	80003fe <InsertionSort>

	DisplayNumbers(numbers, len, "I-sorted array: ");
 80004c8:	4a08      	ldr	r2, [pc, #32]	; (80004ec <main+0x6c>)
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <main+0x5c>)
 80004ce:	f7ff ff0d 	bl	80002ec <DisplayNumbers>

	return 0;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000000 	.word	0x20000000
 80004e0:	08001738 	.word	0x08001738
 80004e4:	0800174c 	.word	0x0800174c
 80004e8:	08001760 	.word	0x08001760
 80004ec:	08001774 	.word	0x08001774

080004f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return 1;
 80004f4:	2301      	movs	r3, #1
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <_kill>:

int _kill(int pid, int sig)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800050a:	f000 fa7b 	bl	8000a04 <__errno>
 800050e:	4603      	mov	r3, r0
 8000510:	2216      	movs	r2, #22
 8000512:	601a      	str	r2, [r3, #0]
  return -1;
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <_exit>:

void _exit (int status)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000528:	f04f 31ff 	mov.w	r1, #4294967295
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffe7 	bl	8000500 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000532:	e7fe      	b.n	8000532 <_exit+0x12>

08000534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	e00a      	b.n	800055c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000546:	f3af 8000 	nop.w
 800054a:	4601      	mov	r1, r0
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	60ba      	str	r2, [r7, #8]
 8000552:	b2ca      	uxtb	r2, r1
 8000554:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	3301      	adds	r3, #1
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	429a      	cmp	r2, r3
 8000562:	dbf0      	blt.n	8000546 <_read+0x12>
  }

  return len;
 8000564:	687b      	ldr	r3, [r7, #4]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b086      	sub	sp, #24
 8000572:	af00      	add	r7, sp, #0
 8000574:	60f8      	str	r0, [r7, #12]
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	e009      	b.n	8000594 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	60ba      	str	r2, [r7, #8]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	dbf1      	blt.n	8000580 <_write+0x12>
  }
  return len;
 800059c:	687b      	ldr	r3, [r7, #4]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_close>:

int _close(int file)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ce:	605a      	str	r2, [r3, #4]
  return 0;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <_isatty>:

int _isatty(int file)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005e6:	2301      	movs	r3, #1
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
	...

08000610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000618:	4a14      	ldr	r2, [pc, #80]	; (800066c <_sbrk+0x5c>)
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_sbrk+0x60>)
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <_sbrk+0x64>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <_sbrk+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <_sbrk+0x64>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	429a      	cmp	r2, r3
 800063e:	d207      	bcs.n	8000650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000640:	f000 f9e0 	bl	8000a04 <__errno>
 8000644:	4603      	mov	r3, r0
 8000646:	220c      	movs	r2, #12
 8000648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	e009      	b.n	8000664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <_sbrk+0x64>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	4a05      	ldr	r2, [pc, #20]	; (8000674 <_sbrk+0x64>)
 8000660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20030000 	.word	0x20030000
 8000670:	00000400 	.word	0x00000400
 8000674:	200000c0 	.word	0x200000c0
 8000678:	20000210 	.word	0x20000210

0800067c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800067e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000680:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <LoopForever+0xe>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	; (80006c8 <LoopForever+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006aa:	f000 f9b1 	bl	8000a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ae:	f7ff fee7 	bl	8000480 <main>

080006b2 <LoopForever>:

LoopForever:
  b LoopForever
 80006b2:	e7fe      	b.n	80006b2 <LoopForever>
  ldr   r0, =_estack
 80006b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80006c0:	0800186c 	.word	0x0800186c
  ldr r2, =_sbss
 80006c4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80006c8:	20000210 	.word	0x20000210

080006cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC_IRQHandler>
	...

080006d0 <rand>:
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <rand+0x5c>)
 80006d2:	b510      	push	{r4, lr}
 80006d4:	681c      	ldr	r4, [r3, #0]
 80006d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80006d8:	b9b3      	cbnz	r3, 8000708 <rand+0x38>
 80006da:	2018      	movs	r0, #24
 80006dc:	f000 fa28 	bl	8000b30 <malloc>
 80006e0:	4602      	mov	r2, r0
 80006e2:	6320      	str	r0, [r4, #48]	; 0x30
 80006e4:	b920      	cbnz	r0, 80006f0 <rand+0x20>
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <rand+0x60>)
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <rand+0x64>)
 80006ea:	2152      	movs	r1, #82	; 0x52
 80006ec:	f000 f9b6 	bl	8000a5c <__assert_func>
 80006f0:	4911      	ldr	r1, [pc, #68]	; (8000738 <rand+0x68>)
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <rand+0x6c>)
 80006f4:	e9c0 1300 	strd	r1, r3, [r0]
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <rand+0x70>)
 80006fa:	6083      	str	r3, [r0, #8]
 80006fc:	230b      	movs	r3, #11
 80006fe:	8183      	strh	r3, [r0, #12]
 8000700:	2100      	movs	r1, #0
 8000702:	2001      	movs	r0, #1
 8000704:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000708:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <rand+0x74>)
 800070c:	690b      	ldr	r3, [r1, #16]
 800070e:	694c      	ldr	r4, [r1, #20]
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <rand+0x78>)
 8000712:	4358      	muls	r0, r3
 8000714:	fb02 0004 	mla	r0, r2, r4, r0
 8000718:	fba3 3202 	umull	r3, r2, r3, r2
 800071c:	3301      	adds	r3, #1
 800071e:	eb40 0002 	adc.w	r0, r0, r2
 8000722:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000726:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800072a:	bd10      	pop	{r4, pc}
 800072c:	200000a0 	.word	0x200000a0
 8000730:	08001785 	.word	0x08001785
 8000734:	0800179c 	.word	0x0800179c
 8000738:	abcd330e 	.word	0xabcd330e
 800073c:	e66d1234 	.word	0xe66d1234
 8000740:	0005deec 	.word	0x0005deec
 8000744:	5851f42d 	.word	0x5851f42d
 8000748:	4c957f2d 	.word	0x4c957f2d

0800074c <std>:
 800074c:	2300      	movs	r3, #0
 800074e:	b510      	push	{r4, lr}
 8000750:	4604      	mov	r4, r0
 8000752:	e9c0 3300 	strd	r3, r3, [r0]
 8000756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800075a:	6083      	str	r3, [r0, #8]
 800075c:	8181      	strh	r1, [r0, #12]
 800075e:	6643      	str	r3, [r0, #100]	; 0x64
 8000760:	81c2      	strh	r2, [r0, #14]
 8000762:	6183      	str	r3, [r0, #24]
 8000764:	4619      	mov	r1, r3
 8000766:	2208      	movs	r2, #8
 8000768:	305c      	adds	r0, #92	; 0x5c
 800076a:	f000 f8fc 	bl	8000966 <memset>
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <std+0x38>)
 8000770:	6263      	str	r3, [r4, #36]	; 0x24
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <std+0x3c>)
 8000774:	62a3      	str	r3, [r4, #40]	; 0x28
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <std+0x40>)
 8000778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <std+0x44>)
 800077c:	6224      	str	r4, [r4, #32]
 800077e:	6323      	str	r3, [r4, #48]	; 0x30
 8000780:	bd10      	pop	{r4, pc}
 8000782:	bf00      	nop
 8000784:	080008e1 	.word	0x080008e1
 8000788:	08000903 	.word	0x08000903
 800078c:	0800093b 	.word	0x0800093b
 8000790:	0800095f 	.word	0x0800095f

08000794 <stdio_exit_handler>:
 8000794:	4a02      	ldr	r2, [pc, #8]	; (80007a0 <stdio_exit_handler+0xc>)
 8000796:	4903      	ldr	r1, [pc, #12]	; (80007a4 <stdio_exit_handler+0x10>)
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <stdio_exit_handler+0x14>)
 800079a:	f000 b869 	b.w	8000870 <_fwalk_sglue>
 800079e:	bf00      	nop
 80007a0:	20000048 	.word	0x20000048
 80007a4:	0800134d 	.word	0x0800134d
 80007a8:	20000054 	.word	0x20000054

080007ac <cleanup_stdio>:
 80007ac:	6841      	ldr	r1, [r0, #4]
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <cleanup_stdio+0x34>)
 80007b0:	4299      	cmp	r1, r3
 80007b2:	b510      	push	{r4, lr}
 80007b4:	4604      	mov	r4, r0
 80007b6:	d001      	beq.n	80007bc <cleanup_stdio+0x10>
 80007b8:	f000 fdc8 	bl	800134c <_fflush_r>
 80007bc:	68a1      	ldr	r1, [r4, #8]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <cleanup_stdio+0x38>)
 80007c0:	4299      	cmp	r1, r3
 80007c2:	d002      	beq.n	80007ca <cleanup_stdio+0x1e>
 80007c4:	4620      	mov	r0, r4
 80007c6:	f000 fdc1 	bl	800134c <_fflush_r>
 80007ca:	68e1      	ldr	r1, [r4, #12]
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <cleanup_stdio+0x3c>)
 80007ce:	4299      	cmp	r1, r3
 80007d0:	d004      	beq.n	80007dc <cleanup_stdio+0x30>
 80007d2:	4620      	mov	r0, r4
 80007d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d8:	f000 bdb8 	b.w	800134c <_fflush_r>
 80007dc:	bd10      	pop	{r4, pc}
 80007de:	bf00      	nop
 80007e0:	200000c4 	.word	0x200000c4
 80007e4:	2000012c 	.word	0x2000012c
 80007e8:	20000194 	.word	0x20000194

080007ec <global_stdio_init.part.0>:
 80007ec:	b510      	push	{r4, lr}
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <global_stdio_init.part.0+0x30>)
 80007f0:	4c0b      	ldr	r4, [pc, #44]	; (8000820 <global_stdio_init.part.0+0x34>)
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <global_stdio_init.part.0+0x38>)
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	4620      	mov	r0, r4
 80007f8:	2200      	movs	r2, #0
 80007fa:	2104      	movs	r1, #4
 80007fc:	f7ff ffa6 	bl	800074c <std>
 8000800:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000804:	2201      	movs	r2, #1
 8000806:	2109      	movs	r1, #9
 8000808:	f7ff ffa0 	bl	800074c <std>
 800080c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000810:	2202      	movs	r2, #2
 8000812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000816:	2112      	movs	r1, #18
 8000818:	f7ff bf98 	b.w	800074c <std>
 800081c:	200001fc 	.word	0x200001fc
 8000820:	200000c4 	.word	0x200000c4
 8000824:	08000795 	.word	0x08000795

08000828 <__sfp_lock_acquire>:
 8000828:	4801      	ldr	r0, [pc, #4]	; (8000830 <__sfp_lock_acquire+0x8>)
 800082a:	f000 b915 	b.w	8000a58 <__retarget_lock_acquire_recursive>
 800082e:	bf00      	nop
 8000830:	20000205 	.word	0x20000205

08000834 <__sfp_lock_release>:
 8000834:	4801      	ldr	r0, [pc, #4]	; (800083c <__sfp_lock_release+0x8>)
 8000836:	f000 b910 	b.w	8000a5a <__retarget_lock_release_recursive>
 800083a:	bf00      	nop
 800083c:	20000205 	.word	0x20000205

08000840 <__sinit>:
 8000840:	b510      	push	{r4, lr}
 8000842:	4604      	mov	r4, r0
 8000844:	f7ff fff0 	bl	8000828 <__sfp_lock_acquire>
 8000848:	6a23      	ldr	r3, [r4, #32]
 800084a:	b11b      	cbz	r3, 8000854 <__sinit+0x14>
 800084c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000850:	f7ff bff0 	b.w	8000834 <__sfp_lock_release>
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__sinit+0x28>)
 8000856:	6223      	str	r3, [r4, #32]
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <__sinit+0x2c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f5      	bne.n	800084c <__sinit+0xc>
 8000860:	f7ff ffc4 	bl	80007ec <global_stdio_init.part.0>
 8000864:	e7f2      	b.n	800084c <__sinit+0xc>
 8000866:	bf00      	nop
 8000868:	080007ad 	.word	0x080007ad
 800086c:	200001fc 	.word	0x200001fc

08000870 <_fwalk_sglue>:
 8000870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000874:	4607      	mov	r7, r0
 8000876:	4688      	mov	r8, r1
 8000878:	4614      	mov	r4, r2
 800087a:	2600      	movs	r6, #0
 800087c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000880:	f1b9 0901 	subs.w	r9, r9, #1
 8000884:	d505      	bpl.n	8000892 <_fwalk_sglue+0x22>
 8000886:	6824      	ldr	r4, [r4, #0]
 8000888:	2c00      	cmp	r4, #0
 800088a:	d1f7      	bne.n	800087c <_fwalk_sglue+0xc>
 800088c:	4630      	mov	r0, r6
 800088e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000892:	89ab      	ldrh	r3, [r5, #12]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d907      	bls.n	80008a8 <_fwalk_sglue+0x38>
 8000898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800089c:	3301      	adds	r3, #1
 800089e:	d003      	beq.n	80008a8 <_fwalk_sglue+0x38>
 80008a0:	4629      	mov	r1, r5
 80008a2:	4638      	mov	r0, r7
 80008a4:	47c0      	blx	r8
 80008a6:	4306      	orrs	r6, r0
 80008a8:	3568      	adds	r5, #104	; 0x68
 80008aa:	e7e9      	b.n	8000880 <_fwalk_sglue+0x10>

080008ac <iprintf>:
 80008ac:	b40f      	push	{r0, r1, r2, r3}
 80008ae:	b507      	push	{r0, r1, r2, lr}
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <iprintf+0x20>)
 80008b2:	ab04      	add	r3, sp, #16
 80008b4:	6808      	ldr	r0, [r1, #0]
 80008b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80008ba:	6881      	ldr	r1, [r0, #8]
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	f000 fa15 	bl	8000cec <_vfiprintf_r>
 80008c2:	b003      	add	sp, #12
 80008c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr
 80008cc:	200000a0 	.word	0x200000a0

080008d0 <putchar>:
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <putchar+0xc>)
 80008d2:	4601      	mov	r1, r0
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	6882      	ldr	r2, [r0, #8]
 80008d8:	f000 bd72 	b.w	80013c0 <_putc_r>
 80008dc:	200000a0 	.word	0x200000a0

080008e0 <__sread>:
 80008e0:	b510      	push	{r4, lr}
 80008e2:	460c      	mov	r4, r1
 80008e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e8:	f000 f868 	bl	80009bc <_read_r>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	bfab      	itete	ge
 80008f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008f2:	89a3      	ldrhlt	r3, [r4, #12]
 80008f4:	181b      	addge	r3, r3, r0
 80008f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008fa:	bfac      	ite	ge
 80008fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80008fe:	81a3      	strhlt	r3, [r4, #12]
 8000900:	bd10      	pop	{r4, pc}

08000902 <__swrite>:
 8000902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000906:	461f      	mov	r7, r3
 8000908:	898b      	ldrh	r3, [r1, #12]
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	4605      	mov	r5, r0
 800090e:	460c      	mov	r4, r1
 8000910:	4616      	mov	r6, r2
 8000912:	d505      	bpl.n	8000920 <__swrite+0x1e>
 8000914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000918:	2302      	movs	r3, #2
 800091a:	2200      	movs	r2, #0
 800091c:	f000 f83c 	bl	8000998 <_lseek_r>
 8000920:	89a3      	ldrh	r3, [r4, #12]
 8000922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800092a:	81a3      	strh	r3, [r4, #12]
 800092c:	4632      	mov	r2, r6
 800092e:	463b      	mov	r3, r7
 8000930:	4628      	mov	r0, r5
 8000932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000936:	f000 b853 	b.w	80009e0 <_write_r>

0800093a <__sseek>:
 800093a:	b510      	push	{r4, lr}
 800093c:	460c      	mov	r4, r1
 800093e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000942:	f000 f829 	bl	8000998 <_lseek_r>
 8000946:	1c43      	adds	r3, r0, #1
 8000948:	89a3      	ldrh	r3, [r4, #12]
 800094a:	bf15      	itete	ne
 800094c:	6560      	strne	r0, [r4, #84]	; 0x54
 800094e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000956:	81a3      	strheq	r3, [r4, #12]
 8000958:	bf18      	it	ne
 800095a:	81a3      	strhne	r3, [r4, #12]
 800095c:	bd10      	pop	{r4, pc}

0800095e <__sclose>:
 800095e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000962:	f000 b809 	b.w	8000978 <_close_r>

08000966 <memset>:
 8000966:	4402      	add	r2, r0
 8000968:	4603      	mov	r3, r0
 800096a:	4293      	cmp	r3, r2
 800096c:	d100      	bne.n	8000970 <memset+0xa>
 800096e:	4770      	bx	lr
 8000970:	f803 1b01 	strb.w	r1, [r3], #1
 8000974:	e7f9      	b.n	800096a <memset+0x4>
	...

08000978 <_close_r>:
 8000978:	b538      	push	{r3, r4, r5, lr}
 800097a:	4d06      	ldr	r5, [pc, #24]	; (8000994 <_close_r+0x1c>)
 800097c:	2300      	movs	r3, #0
 800097e:	4604      	mov	r4, r0
 8000980:	4608      	mov	r0, r1
 8000982:	602b      	str	r3, [r5, #0]
 8000984:	f7ff fe0f 	bl	80005a6 <_close>
 8000988:	1c43      	adds	r3, r0, #1
 800098a:	d102      	bne.n	8000992 <_close_r+0x1a>
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	b103      	cbz	r3, 8000992 <_close_r+0x1a>
 8000990:	6023      	str	r3, [r4, #0]
 8000992:	bd38      	pop	{r3, r4, r5, pc}
 8000994:	20000200 	.word	0x20000200

08000998 <_lseek_r>:
 8000998:	b538      	push	{r3, r4, r5, lr}
 800099a:	4d07      	ldr	r5, [pc, #28]	; (80009b8 <_lseek_r+0x20>)
 800099c:	4604      	mov	r4, r0
 800099e:	4608      	mov	r0, r1
 80009a0:	4611      	mov	r1, r2
 80009a2:	2200      	movs	r2, #0
 80009a4:	602a      	str	r2, [r5, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	f7ff fe24 	bl	80005f4 <_lseek>
 80009ac:	1c43      	adds	r3, r0, #1
 80009ae:	d102      	bne.n	80009b6 <_lseek_r+0x1e>
 80009b0:	682b      	ldr	r3, [r5, #0]
 80009b2:	b103      	cbz	r3, 80009b6 <_lseek_r+0x1e>
 80009b4:	6023      	str	r3, [r4, #0]
 80009b6:	bd38      	pop	{r3, r4, r5, pc}
 80009b8:	20000200 	.word	0x20000200

080009bc <_read_r>:
 80009bc:	b538      	push	{r3, r4, r5, lr}
 80009be:	4d07      	ldr	r5, [pc, #28]	; (80009dc <_read_r+0x20>)
 80009c0:	4604      	mov	r4, r0
 80009c2:	4608      	mov	r0, r1
 80009c4:	4611      	mov	r1, r2
 80009c6:	2200      	movs	r2, #0
 80009c8:	602a      	str	r2, [r5, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	f7ff fdb2 	bl	8000534 <_read>
 80009d0:	1c43      	adds	r3, r0, #1
 80009d2:	d102      	bne.n	80009da <_read_r+0x1e>
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	b103      	cbz	r3, 80009da <_read_r+0x1e>
 80009d8:	6023      	str	r3, [r4, #0]
 80009da:	bd38      	pop	{r3, r4, r5, pc}
 80009dc:	20000200 	.word	0x20000200

080009e0 <_write_r>:
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4d07      	ldr	r5, [pc, #28]	; (8000a00 <_write_r+0x20>)
 80009e4:	4604      	mov	r4, r0
 80009e6:	4608      	mov	r0, r1
 80009e8:	4611      	mov	r1, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	602a      	str	r2, [r5, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	f7ff fdbd 	bl	800056e <_write>
 80009f4:	1c43      	adds	r3, r0, #1
 80009f6:	d102      	bne.n	80009fe <_write_r+0x1e>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	b103      	cbz	r3, 80009fe <_write_r+0x1e>
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
 8000a00:	20000200 	.word	0x20000200

08000a04 <__errno>:
 8000a04:	4b01      	ldr	r3, [pc, #4]	; (8000a0c <__errno+0x8>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200000a0 	.word	0x200000a0

08000a10 <__libc_init_array>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	4d0d      	ldr	r5, [pc, #52]	; (8000a48 <__libc_init_array+0x38>)
 8000a14:	4c0d      	ldr	r4, [pc, #52]	; (8000a4c <__libc_init_array+0x3c>)
 8000a16:	1b64      	subs	r4, r4, r5
 8000a18:	10a4      	asrs	r4, r4, #2
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	42a6      	cmp	r6, r4
 8000a1e:	d109      	bne.n	8000a34 <__libc_init_array+0x24>
 8000a20:	4d0b      	ldr	r5, [pc, #44]	; (8000a50 <__libc_init_array+0x40>)
 8000a22:	4c0c      	ldr	r4, [pc, #48]	; (8000a54 <__libc_init_array+0x44>)
 8000a24:	f000 fe76 	bl	8001714 <_init>
 8000a28:	1b64      	subs	r4, r4, r5
 8000a2a:	10a4      	asrs	r4, r4, #2
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	42a6      	cmp	r6, r4
 8000a30:	d105      	bne.n	8000a3e <__libc_init_array+0x2e>
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a38:	4798      	blx	r3
 8000a3a:	3601      	adds	r6, #1
 8000a3c:	e7ee      	b.n	8000a1c <__libc_init_array+0xc>
 8000a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a42:	4798      	blx	r3
 8000a44:	3601      	adds	r6, #1
 8000a46:	e7f2      	b.n	8000a2e <__libc_init_array+0x1e>
 8000a48:	08001864 	.word	0x08001864
 8000a4c:	08001864 	.word	0x08001864
 8000a50:	08001864 	.word	0x08001864
 8000a54:	08001868 	.word	0x08001868

08000a58 <__retarget_lock_acquire_recursive>:
 8000a58:	4770      	bx	lr

08000a5a <__retarget_lock_release_recursive>:
 8000a5a:	4770      	bx	lr

08000a5c <__assert_func>:
 8000a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000a5e:	4614      	mov	r4, r2
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <__assert_func+0x2c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4605      	mov	r5, r0
 8000a68:	68d8      	ldr	r0, [r3, #12]
 8000a6a:	b14c      	cbz	r4, 8000a80 <__assert_func+0x24>
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <__assert_func+0x30>)
 8000a6e:	9100      	str	r1, [sp, #0]
 8000a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000a74:	4906      	ldr	r1, [pc, #24]	; (8000a90 <__assert_func+0x34>)
 8000a76:	462b      	mov	r3, r5
 8000a78:	f000 fc90 	bl	800139c <fiprintf>
 8000a7c:	f000 fd7a 	bl	8001574 <abort>
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__assert_func+0x38>)
 8000a82:	461c      	mov	r4, r3
 8000a84:	e7f3      	b.n	8000a6e <__assert_func+0x12>
 8000a86:	bf00      	nop
 8000a88:	200000a0 	.word	0x200000a0
 8000a8c:	080017f4 	.word	0x080017f4
 8000a90:	08001801 	.word	0x08001801
 8000a94:	0800182f 	.word	0x0800182f

08000a98 <_free_r>:
 8000a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a9a:	2900      	cmp	r1, #0
 8000a9c:	d044      	beq.n	8000b28 <_free_r+0x90>
 8000a9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000aa2:	9001      	str	r0, [sp, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f1a1 0404 	sub.w	r4, r1, #4
 8000aaa:	bfb8      	it	lt
 8000aac:	18e4      	addlt	r4, r4, r3
 8000aae:	f000 f8e7 	bl	8000c80 <__malloc_lock>
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <_free_r+0x94>)
 8000ab4:	9801      	ldr	r0, [sp, #4]
 8000ab6:	6813      	ldr	r3, [r2, #0]
 8000ab8:	b933      	cbnz	r3, 8000ac8 <_free_r+0x30>
 8000aba:	6063      	str	r3, [r4, #4]
 8000abc:	6014      	str	r4, [r2, #0]
 8000abe:	b003      	add	sp, #12
 8000ac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ac4:	f000 b8e2 	b.w	8000c8c <__malloc_unlock>
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <_free_r+0x46>
 8000acc:	6825      	ldr	r5, [r4, #0]
 8000ace:	1961      	adds	r1, r4, r5
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	bf01      	itttt	eq
 8000ad4:	6819      	ldreq	r1, [r3, #0]
 8000ad6:	685b      	ldreq	r3, [r3, #4]
 8000ad8:	1949      	addeq	r1, r1, r5
 8000ada:	6021      	streq	r1, [r4, #0]
 8000adc:	e7ed      	b.n	8000aba <_free_r+0x22>
 8000ade:	461a      	mov	r2, r3
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	b10b      	cbz	r3, 8000ae8 <_free_r+0x50>
 8000ae4:	42a3      	cmp	r3, r4
 8000ae6:	d9fa      	bls.n	8000ade <_free_r+0x46>
 8000ae8:	6811      	ldr	r1, [r2, #0]
 8000aea:	1855      	adds	r5, r2, r1
 8000aec:	42a5      	cmp	r5, r4
 8000aee:	d10b      	bne.n	8000b08 <_free_r+0x70>
 8000af0:	6824      	ldr	r4, [r4, #0]
 8000af2:	4421      	add	r1, r4
 8000af4:	1854      	adds	r4, r2, r1
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	6011      	str	r1, [r2, #0]
 8000afa:	d1e0      	bne.n	8000abe <_free_r+0x26>
 8000afc:	681c      	ldr	r4, [r3, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	6053      	str	r3, [r2, #4]
 8000b02:	440c      	add	r4, r1
 8000b04:	6014      	str	r4, [r2, #0]
 8000b06:	e7da      	b.n	8000abe <_free_r+0x26>
 8000b08:	d902      	bls.n	8000b10 <_free_r+0x78>
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	6003      	str	r3, [r0, #0]
 8000b0e:	e7d6      	b.n	8000abe <_free_r+0x26>
 8000b10:	6825      	ldr	r5, [r4, #0]
 8000b12:	1961      	adds	r1, r4, r5
 8000b14:	428b      	cmp	r3, r1
 8000b16:	bf04      	itt	eq
 8000b18:	6819      	ldreq	r1, [r3, #0]
 8000b1a:	685b      	ldreq	r3, [r3, #4]
 8000b1c:	6063      	str	r3, [r4, #4]
 8000b1e:	bf04      	itt	eq
 8000b20:	1949      	addeq	r1, r1, r5
 8000b22:	6021      	streq	r1, [r4, #0]
 8000b24:	6054      	str	r4, [r2, #4]
 8000b26:	e7ca      	b.n	8000abe <_free_r+0x26>
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd30      	pop	{r4, r5, pc}
 8000b2c:	20000208 	.word	0x20000208

08000b30 <malloc>:
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <malloc+0xc>)
 8000b32:	4601      	mov	r1, r0
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	f000 b823 	b.w	8000b80 <_malloc_r>
 8000b3a:	bf00      	nop
 8000b3c:	200000a0 	.word	0x200000a0

08000b40 <sbrk_aligned>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	4e0e      	ldr	r6, [pc, #56]	; (8000b7c <sbrk_aligned+0x3c>)
 8000b44:	460c      	mov	r4, r1
 8000b46:	6831      	ldr	r1, [r6, #0]
 8000b48:	4605      	mov	r5, r0
 8000b4a:	b911      	cbnz	r1, 8000b52 <sbrk_aligned+0x12>
 8000b4c:	f000 fd02 	bl	8001554 <_sbrk_r>
 8000b50:	6030      	str	r0, [r6, #0]
 8000b52:	4621      	mov	r1, r4
 8000b54:	4628      	mov	r0, r5
 8000b56:	f000 fcfd 	bl	8001554 <_sbrk_r>
 8000b5a:	1c43      	adds	r3, r0, #1
 8000b5c:	d00a      	beq.n	8000b74 <sbrk_aligned+0x34>
 8000b5e:	1cc4      	adds	r4, r0, #3
 8000b60:	f024 0403 	bic.w	r4, r4, #3
 8000b64:	42a0      	cmp	r0, r4
 8000b66:	d007      	beq.n	8000b78 <sbrk_aligned+0x38>
 8000b68:	1a21      	subs	r1, r4, r0
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f000 fcf2 	bl	8001554 <_sbrk_r>
 8000b70:	3001      	adds	r0, #1
 8000b72:	d101      	bne.n	8000b78 <sbrk_aligned+0x38>
 8000b74:	f04f 34ff 	mov.w	r4, #4294967295
 8000b78:	4620      	mov	r0, r4
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
 8000b7c:	2000020c 	.word	0x2000020c

08000b80 <_malloc_r>:
 8000b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b84:	1ccd      	adds	r5, r1, #3
 8000b86:	f025 0503 	bic.w	r5, r5, #3
 8000b8a:	3508      	adds	r5, #8
 8000b8c:	2d0c      	cmp	r5, #12
 8000b8e:	bf38      	it	cc
 8000b90:	250c      	movcc	r5, #12
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	4607      	mov	r7, r0
 8000b96:	db01      	blt.n	8000b9c <_malloc_r+0x1c>
 8000b98:	42a9      	cmp	r1, r5
 8000b9a:	d905      	bls.n	8000ba8 <_malloc_r+0x28>
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c7c <_malloc_r+0xfc>
 8000bac:	f000 f868 	bl	8000c80 <__malloc_lock>
 8000bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8000bb4:	461c      	mov	r4, r3
 8000bb6:	bb5c      	cbnz	r4, 8000c10 <_malloc_r+0x90>
 8000bb8:	4629      	mov	r1, r5
 8000bba:	4638      	mov	r0, r7
 8000bbc:	f7ff ffc0 	bl	8000b40 <sbrk_aligned>
 8000bc0:	1c43      	adds	r3, r0, #1
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	d155      	bne.n	8000c72 <_malloc_r+0xf2>
 8000bc6:	f8d8 4000 	ldr.w	r4, [r8]
 8000bca:	4626      	mov	r6, r4
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d145      	bne.n	8000c5c <_malloc_r+0xdc>
 8000bd0:	2c00      	cmp	r4, #0
 8000bd2:	d048      	beq.n	8000c66 <_malloc_r+0xe6>
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4638      	mov	r0, r7
 8000bda:	eb04 0903 	add.w	r9, r4, r3
 8000bde:	f000 fcb9 	bl	8001554 <_sbrk_r>
 8000be2:	4581      	cmp	r9, r0
 8000be4:	d13f      	bne.n	8000c66 <_malloc_r+0xe6>
 8000be6:	6821      	ldr	r1, [r4, #0]
 8000be8:	1a6d      	subs	r5, r5, r1
 8000bea:	4629      	mov	r1, r5
 8000bec:	4638      	mov	r0, r7
 8000bee:	f7ff ffa7 	bl	8000b40 <sbrk_aligned>
 8000bf2:	3001      	adds	r0, #1
 8000bf4:	d037      	beq.n	8000c66 <_malloc_r+0xe6>
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	442b      	add	r3, r5
 8000bfa:	6023      	str	r3, [r4, #0]
 8000bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d038      	beq.n	8000c76 <_malloc_r+0xf6>
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	42a2      	cmp	r2, r4
 8000c08:	d12b      	bne.n	8000c62 <_malloc_r+0xe2>
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	e00f      	b.n	8000c30 <_malloc_r+0xb0>
 8000c10:	6822      	ldr	r2, [r4, #0]
 8000c12:	1b52      	subs	r2, r2, r5
 8000c14:	d41f      	bmi.n	8000c56 <_malloc_r+0xd6>
 8000c16:	2a0b      	cmp	r2, #11
 8000c18:	d917      	bls.n	8000c4a <_malloc_r+0xca>
 8000c1a:	1961      	adds	r1, r4, r5
 8000c1c:	42a3      	cmp	r3, r4
 8000c1e:	6025      	str	r5, [r4, #0]
 8000c20:	bf18      	it	ne
 8000c22:	6059      	strne	r1, [r3, #4]
 8000c24:	6863      	ldr	r3, [r4, #4]
 8000c26:	bf08      	it	eq
 8000c28:	f8c8 1000 	streq.w	r1, [r8]
 8000c2c:	5162      	str	r2, [r4, r5]
 8000c2e:	604b      	str	r3, [r1, #4]
 8000c30:	4638      	mov	r0, r7
 8000c32:	f104 060b 	add.w	r6, r4, #11
 8000c36:	f000 f829 	bl	8000c8c <__malloc_unlock>
 8000c3a:	f026 0607 	bic.w	r6, r6, #7
 8000c3e:	1d23      	adds	r3, r4, #4
 8000c40:	1af2      	subs	r2, r6, r3
 8000c42:	d0ae      	beq.n	8000ba2 <_malloc_r+0x22>
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	50a3      	str	r3, [r4, r2]
 8000c48:	e7ab      	b.n	8000ba2 <_malloc_r+0x22>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	6862      	ldr	r2, [r4, #4]
 8000c4e:	d1dd      	bne.n	8000c0c <_malloc_r+0x8c>
 8000c50:	f8c8 2000 	str.w	r2, [r8]
 8000c54:	e7ec      	b.n	8000c30 <_malloc_r+0xb0>
 8000c56:	4623      	mov	r3, r4
 8000c58:	6864      	ldr	r4, [r4, #4]
 8000c5a:	e7ac      	b.n	8000bb6 <_malloc_r+0x36>
 8000c5c:	4634      	mov	r4, r6
 8000c5e:	6876      	ldr	r6, [r6, #4]
 8000c60:	e7b4      	b.n	8000bcc <_malloc_r+0x4c>
 8000c62:	4613      	mov	r3, r2
 8000c64:	e7cc      	b.n	8000c00 <_malloc_r+0x80>
 8000c66:	230c      	movs	r3, #12
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4638      	mov	r0, r7
 8000c6c:	f000 f80e 	bl	8000c8c <__malloc_unlock>
 8000c70:	e797      	b.n	8000ba2 <_malloc_r+0x22>
 8000c72:	6025      	str	r5, [r4, #0]
 8000c74:	e7dc      	b.n	8000c30 <_malloc_r+0xb0>
 8000c76:	605b      	str	r3, [r3, #4]
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	bf00      	nop
 8000c7c:	20000208 	.word	0x20000208

08000c80 <__malloc_lock>:
 8000c80:	4801      	ldr	r0, [pc, #4]	; (8000c88 <__malloc_lock+0x8>)
 8000c82:	f7ff bee9 	b.w	8000a58 <__retarget_lock_acquire_recursive>
 8000c86:	bf00      	nop
 8000c88:	20000204 	.word	0x20000204

08000c8c <__malloc_unlock>:
 8000c8c:	4801      	ldr	r0, [pc, #4]	; (8000c94 <__malloc_unlock+0x8>)
 8000c8e:	f7ff bee4 	b.w	8000a5a <__retarget_lock_release_recursive>
 8000c92:	bf00      	nop
 8000c94:	20000204 	.word	0x20000204

08000c98 <__sfputc_r>:
 8000c98:	6893      	ldr	r3, [r2, #8]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	b410      	push	{r4}
 8000ca0:	6093      	str	r3, [r2, #8]
 8000ca2:	da08      	bge.n	8000cb6 <__sfputc_r+0x1e>
 8000ca4:	6994      	ldr	r4, [r2, #24]
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	db01      	blt.n	8000cae <__sfputc_r+0x16>
 8000caa:	290a      	cmp	r1, #10
 8000cac:	d103      	bne.n	8000cb6 <__sfputc_r+0x1e>
 8000cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb2:	f000 bbb9 	b.w	8001428 <__swbuf_r>
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	1c58      	adds	r0, r3, #1
 8000cba:	6010      	str	r0, [r2, #0]
 8000cbc:	7019      	strb	r1, [r3, #0]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <__sfputs_r>:
 8000cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc8:	4606      	mov	r6, r0
 8000cca:	460f      	mov	r7, r1
 8000ccc:	4614      	mov	r4, r2
 8000cce:	18d5      	adds	r5, r2, r3
 8000cd0:	42ac      	cmp	r4, r5
 8000cd2:	d101      	bne.n	8000cd8 <__sfputs_r+0x12>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	e007      	b.n	8000ce8 <__sfputs_r+0x22>
 8000cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cdc:	463a      	mov	r2, r7
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f7ff ffda 	bl	8000c98 <__sfputc_r>
 8000ce4:	1c43      	adds	r3, r0, #1
 8000ce6:	d1f3      	bne.n	8000cd0 <__sfputs_r+0xa>
 8000ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cec <_vfiprintf_r>:
 8000cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	b09d      	sub	sp, #116	; 0x74
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	b118      	cbz	r0, 8000d04 <_vfiprintf_r+0x18>
 8000cfc:	6a03      	ldr	r3, [r0, #32]
 8000cfe:	b90b      	cbnz	r3, 8000d04 <_vfiprintf_r+0x18>
 8000d00:	f7ff fd9e 	bl	8000840 <__sinit>
 8000d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d06:	07d9      	lsls	r1, r3, #31
 8000d08:	d405      	bmi.n	8000d16 <_vfiprintf_r+0x2a>
 8000d0a:	89ab      	ldrh	r3, [r5, #12]
 8000d0c:	059a      	lsls	r2, r3, #22
 8000d0e:	d402      	bmi.n	8000d16 <_vfiprintf_r+0x2a>
 8000d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d12:	f7ff fea1 	bl	8000a58 <__retarget_lock_acquire_recursive>
 8000d16:	89ab      	ldrh	r3, [r5, #12]
 8000d18:	071b      	lsls	r3, r3, #28
 8000d1a:	d501      	bpl.n	8000d20 <_vfiprintf_r+0x34>
 8000d1c:	692b      	ldr	r3, [r5, #16]
 8000d1e:	b99b      	cbnz	r3, 8000d48 <_vfiprintf_r+0x5c>
 8000d20:	4629      	mov	r1, r5
 8000d22:	4630      	mov	r0, r6
 8000d24:	f000 fbbe 	bl	80014a4 <__swsetup_r>
 8000d28:	b170      	cbz	r0, 8000d48 <_vfiprintf_r+0x5c>
 8000d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d2c:	07dc      	lsls	r4, r3, #31
 8000d2e:	d504      	bpl.n	8000d3a <_vfiprintf_r+0x4e>
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	b01d      	add	sp, #116	; 0x74
 8000d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d3a:	89ab      	ldrh	r3, [r5, #12]
 8000d3c:	0598      	lsls	r0, r3, #22
 8000d3e:	d4f7      	bmi.n	8000d30 <_vfiprintf_r+0x44>
 8000d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d42:	f7ff fe8a 	bl	8000a5a <__retarget_lock_release_recursive>
 8000d46:	e7f3      	b.n	8000d30 <_vfiprintf_r+0x44>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d56:	2330      	movs	r3, #48	; 0x30
 8000d58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f0c <_vfiprintf_r+0x220>
 8000d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d60:	f04f 0901 	mov.w	r9, #1
 8000d64:	4623      	mov	r3, r4
 8000d66:	469a      	mov	sl, r3
 8000d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d6c:	b10a      	cbz	r2, 8000d72 <_vfiprintf_r+0x86>
 8000d6e:	2a25      	cmp	r2, #37	; 0x25
 8000d70:	d1f9      	bne.n	8000d66 <_vfiprintf_r+0x7a>
 8000d72:	ebba 0b04 	subs.w	fp, sl, r4
 8000d76:	d00b      	beq.n	8000d90 <_vfiprintf_r+0xa4>
 8000d78:	465b      	mov	r3, fp
 8000d7a:	4622      	mov	r2, r4
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f7ff ffa1 	bl	8000cc6 <__sfputs_r>
 8000d84:	3001      	adds	r0, #1
 8000d86:	f000 80a9 	beq.w	8000edc <_vfiprintf_r+0x1f0>
 8000d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d8c:	445a      	add	r2, fp
 8000d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8000d90:	f89a 3000 	ldrb.w	r3, [sl]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80a1 	beq.w	8000edc <_vfiprintf_r+0x1f0>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000da4:	f10a 0a01 	add.w	sl, sl, #1
 8000da8:	9304      	str	r3, [sp, #16]
 8000daa:	9307      	str	r3, [sp, #28]
 8000dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000db0:	931a      	str	r3, [sp, #104]	; 0x68
 8000db2:	4654      	mov	r4, sl
 8000db4:	2205      	movs	r2, #5
 8000db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dba:	4854      	ldr	r0, [pc, #336]	; (8000f0c <_vfiprintf_r+0x220>)
 8000dbc:	f7ff fa18 	bl	80001f0 <memchr>
 8000dc0:	9a04      	ldr	r2, [sp, #16]
 8000dc2:	b9d8      	cbnz	r0, 8000dfc <_vfiprintf_r+0x110>
 8000dc4:	06d1      	lsls	r1, r2, #27
 8000dc6:	bf44      	itt	mi
 8000dc8:	2320      	movmi	r3, #32
 8000dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dce:	0713      	lsls	r3, r2, #28
 8000dd0:	bf44      	itt	mi
 8000dd2:	232b      	movmi	r3, #43	; 0x2b
 8000dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8000ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8000dde:	d015      	beq.n	8000e0c <_vfiprintf_r+0x120>
 8000de0:	9a07      	ldr	r2, [sp, #28]
 8000de2:	4654      	mov	r4, sl
 8000de4:	2000      	movs	r0, #0
 8000de6:	f04f 0c0a 	mov.w	ip, #10
 8000dea:	4621      	mov	r1, r4
 8000dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000df0:	3b30      	subs	r3, #48	; 0x30
 8000df2:	2b09      	cmp	r3, #9
 8000df4:	d94d      	bls.n	8000e92 <_vfiprintf_r+0x1a6>
 8000df6:	b1b0      	cbz	r0, 8000e26 <_vfiprintf_r+0x13a>
 8000df8:	9207      	str	r2, [sp, #28]
 8000dfa:	e014      	b.n	8000e26 <_vfiprintf_r+0x13a>
 8000dfc:	eba0 0308 	sub.w	r3, r0, r8
 8000e00:	fa09 f303 	lsl.w	r3, r9, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	9304      	str	r3, [sp, #16]
 8000e08:	46a2      	mov	sl, r4
 8000e0a:	e7d2      	b.n	8000db2 <_vfiprintf_r+0xc6>
 8000e0c:	9b03      	ldr	r3, [sp, #12]
 8000e0e:	1d19      	adds	r1, r3, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	9103      	str	r1, [sp, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bfbb      	ittet	lt
 8000e18:	425b      	neglt	r3, r3
 8000e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e1e:	9307      	strge	r3, [sp, #28]
 8000e20:	9307      	strlt	r3, [sp, #28]
 8000e22:	bfb8      	it	lt
 8000e24:	9204      	strlt	r2, [sp, #16]
 8000e26:	7823      	ldrb	r3, [r4, #0]
 8000e28:	2b2e      	cmp	r3, #46	; 0x2e
 8000e2a:	d10c      	bne.n	8000e46 <_vfiprintf_r+0x15a>
 8000e2c:	7863      	ldrb	r3, [r4, #1]
 8000e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e30:	d134      	bne.n	8000e9c <_vfiprintf_r+0x1b0>
 8000e32:	9b03      	ldr	r3, [sp, #12]
 8000e34:	1d1a      	adds	r2, r3, #4
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	9203      	str	r2, [sp, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bfb8      	it	lt
 8000e3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e42:	3402      	adds	r4, #2
 8000e44:	9305      	str	r3, [sp, #20]
 8000e46:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f1c <_vfiprintf_r+0x230>
 8000e4a:	7821      	ldrb	r1, [r4, #0]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4650      	mov	r0, sl
 8000e50:	f7ff f9ce 	bl	80001f0 <memchr>
 8000e54:	b138      	cbz	r0, 8000e66 <_vfiprintf_r+0x17a>
 8000e56:	9b04      	ldr	r3, [sp, #16]
 8000e58:	eba0 000a 	sub.w	r0, r0, sl
 8000e5c:	2240      	movs	r2, #64	; 0x40
 8000e5e:	4082      	lsls	r2, r0
 8000e60:	4313      	orrs	r3, r2
 8000e62:	3401      	adds	r4, #1
 8000e64:	9304      	str	r3, [sp, #16]
 8000e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e6a:	4829      	ldr	r0, [pc, #164]	; (8000f10 <_vfiprintf_r+0x224>)
 8000e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e70:	2206      	movs	r2, #6
 8000e72:	f7ff f9bd 	bl	80001f0 <memchr>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d03f      	beq.n	8000efa <_vfiprintf_r+0x20e>
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <_vfiprintf_r+0x228>)
 8000e7c:	bb1b      	cbnz	r3, 8000ec6 <_vfiprintf_r+0x1da>
 8000e7e:	9b03      	ldr	r3, [sp, #12]
 8000e80:	3307      	adds	r3, #7
 8000e82:	f023 0307 	bic.w	r3, r3, #7
 8000e86:	3308      	adds	r3, #8
 8000e88:	9303      	str	r3, [sp, #12]
 8000e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e8c:	443b      	add	r3, r7
 8000e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e90:	e768      	b.n	8000d64 <_vfiprintf_r+0x78>
 8000e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e96:	460c      	mov	r4, r1
 8000e98:	2001      	movs	r0, #1
 8000e9a:	e7a6      	b.n	8000dea <_vfiprintf_r+0xfe>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	3401      	adds	r4, #1
 8000ea0:	9305      	str	r3, [sp, #20]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 0c0a 	mov.w	ip, #10
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eae:	3a30      	subs	r2, #48	; 0x30
 8000eb0:	2a09      	cmp	r2, #9
 8000eb2:	d903      	bls.n	8000ebc <_vfiprintf_r+0x1d0>
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0c6      	beq.n	8000e46 <_vfiprintf_r+0x15a>
 8000eb8:	9105      	str	r1, [sp, #20]
 8000eba:	e7c4      	b.n	8000e46 <_vfiprintf_r+0x15a>
 8000ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e7f0      	b.n	8000ea8 <_vfiprintf_r+0x1bc>
 8000ec6:	ab03      	add	r3, sp, #12
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	462a      	mov	r2, r5
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <_vfiprintf_r+0x22c>)
 8000ece:	a904      	add	r1, sp, #16
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	f3af 8000 	nop.w
 8000ed6:	4607      	mov	r7, r0
 8000ed8:	1c78      	adds	r0, r7, #1
 8000eda:	d1d6      	bne.n	8000e8a <_vfiprintf_r+0x19e>
 8000edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ede:	07d9      	lsls	r1, r3, #31
 8000ee0:	d405      	bmi.n	8000eee <_vfiprintf_r+0x202>
 8000ee2:	89ab      	ldrh	r3, [r5, #12]
 8000ee4:	059a      	lsls	r2, r3, #22
 8000ee6:	d402      	bmi.n	8000eee <_vfiprintf_r+0x202>
 8000ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000eea:	f7ff fdb6 	bl	8000a5a <__retarget_lock_release_recursive>
 8000eee:	89ab      	ldrh	r3, [r5, #12]
 8000ef0:	065b      	lsls	r3, r3, #25
 8000ef2:	f53f af1d 	bmi.w	8000d30 <_vfiprintf_r+0x44>
 8000ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ef8:	e71c      	b.n	8000d34 <_vfiprintf_r+0x48>
 8000efa:	ab03      	add	r3, sp, #12
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	462a      	mov	r2, r5
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <_vfiprintf_r+0x22c>)
 8000f02:	a904      	add	r1, sp, #16
 8000f04:	4630      	mov	r0, r6
 8000f06:	f000 f879 	bl	8000ffc <_printf_i>
 8000f0a:	e7e4      	b.n	8000ed6 <_vfiprintf_r+0x1ea>
 8000f0c:	08001830 	.word	0x08001830
 8000f10:	0800183a 	.word	0x0800183a
 8000f14:	00000000 	.word	0x00000000
 8000f18:	08000cc7 	.word	0x08000cc7
 8000f1c:	08001836 	.word	0x08001836

08000f20 <_printf_common>:
 8000f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f24:	4616      	mov	r6, r2
 8000f26:	4699      	mov	r9, r3
 8000f28:	688a      	ldr	r2, [r1, #8]
 8000f2a:	690b      	ldr	r3, [r1, #16]
 8000f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f30:	4293      	cmp	r3, r2
 8000f32:	bfb8      	it	lt
 8000f34:	4613      	movlt	r3, r2
 8000f36:	6033      	str	r3, [r6, #0]
 8000f38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f3c:	4607      	mov	r7, r0
 8000f3e:	460c      	mov	r4, r1
 8000f40:	b10a      	cbz	r2, 8000f46 <_printf_common+0x26>
 8000f42:	3301      	adds	r3, #1
 8000f44:	6033      	str	r3, [r6, #0]
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	0699      	lsls	r1, r3, #26
 8000f4a:	bf42      	ittt	mi
 8000f4c:	6833      	ldrmi	r3, [r6, #0]
 8000f4e:	3302      	addmi	r3, #2
 8000f50:	6033      	strmi	r3, [r6, #0]
 8000f52:	6825      	ldr	r5, [r4, #0]
 8000f54:	f015 0506 	ands.w	r5, r5, #6
 8000f58:	d106      	bne.n	8000f68 <_printf_common+0x48>
 8000f5a:	f104 0a19 	add.w	sl, r4, #25
 8000f5e:	68e3      	ldr	r3, [r4, #12]
 8000f60:	6832      	ldr	r2, [r6, #0]
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	42ab      	cmp	r3, r5
 8000f66:	dc26      	bgt.n	8000fb6 <_printf_common+0x96>
 8000f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f6c:	1e13      	subs	r3, r2, #0
 8000f6e:	6822      	ldr	r2, [r4, #0]
 8000f70:	bf18      	it	ne
 8000f72:	2301      	movne	r3, #1
 8000f74:	0692      	lsls	r2, r2, #26
 8000f76:	d42b      	bmi.n	8000fd0 <_printf_common+0xb0>
 8000f78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	4638      	mov	r0, r7
 8000f80:	47c0      	blx	r8
 8000f82:	3001      	adds	r0, #1
 8000f84:	d01e      	beq.n	8000fc4 <_printf_common+0xa4>
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	6922      	ldr	r2, [r4, #16]
 8000f8a:	f003 0306 	and.w	r3, r3, #6
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf02      	ittt	eq
 8000f92:	68e5      	ldreq	r5, [r4, #12]
 8000f94:	6833      	ldreq	r3, [r6, #0]
 8000f96:	1aed      	subeq	r5, r5, r3
 8000f98:	68a3      	ldr	r3, [r4, #8]
 8000f9a:	bf0c      	ite	eq
 8000f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fa0:	2500      	movne	r5, #0
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	bfc4      	itt	gt
 8000fa6:	1a9b      	subgt	r3, r3, r2
 8000fa8:	18ed      	addgt	r5, r5, r3
 8000faa:	2600      	movs	r6, #0
 8000fac:	341a      	adds	r4, #26
 8000fae:	42b5      	cmp	r5, r6
 8000fb0:	d11a      	bne.n	8000fe8 <_printf_common+0xc8>
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	e008      	b.n	8000fc8 <_printf_common+0xa8>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4652      	mov	r2, sl
 8000fba:	4649      	mov	r1, r9
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	47c0      	blx	r8
 8000fc0:	3001      	adds	r0, #1
 8000fc2:	d103      	bne.n	8000fcc <_printf_common+0xac>
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fcc:	3501      	adds	r5, #1
 8000fce:	e7c6      	b.n	8000f5e <_printf_common+0x3e>
 8000fd0:	18e1      	adds	r1, r4, r3
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	2030      	movs	r0, #48	; 0x30
 8000fd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fda:	4422      	add	r2, r4
 8000fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	e7c7      	b.n	8000f78 <_printf_common+0x58>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4622      	mov	r2, r4
 8000fec:	4649      	mov	r1, r9
 8000fee:	4638      	mov	r0, r7
 8000ff0:	47c0      	blx	r8
 8000ff2:	3001      	adds	r0, #1
 8000ff4:	d0e6      	beq.n	8000fc4 <_printf_common+0xa4>
 8000ff6:	3601      	adds	r6, #1
 8000ff8:	e7d9      	b.n	8000fae <_printf_common+0x8e>
	...

08000ffc <_printf_i>:
 8000ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001000:	7e0f      	ldrb	r7, [r1, #24]
 8001002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001004:	2f78      	cmp	r7, #120	; 0x78
 8001006:	4691      	mov	r9, r2
 8001008:	4680      	mov	r8, r0
 800100a:	460c      	mov	r4, r1
 800100c:	469a      	mov	sl, r3
 800100e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001012:	d807      	bhi.n	8001024 <_printf_i+0x28>
 8001014:	2f62      	cmp	r7, #98	; 0x62
 8001016:	d80a      	bhi.n	800102e <_printf_i+0x32>
 8001018:	2f00      	cmp	r7, #0
 800101a:	f000 80d4 	beq.w	80011c6 <_printf_i+0x1ca>
 800101e:	2f58      	cmp	r7, #88	; 0x58
 8001020:	f000 80c0 	beq.w	80011a4 <_printf_i+0x1a8>
 8001024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800102c:	e03a      	b.n	80010a4 <_printf_i+0xa8>
 800102e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001032:	2b15      	cmp	r3, #21
 8001034:	d8f6      	bhi.n	8001024 <_printf_i+0x28>
 8001036:	a101      	add	r1, pc, #4	; (adr r1, 800103c <_printf_i+0x40>)
 8001038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800103c:	08001095 	.word	0x08001095
 8001040:	080010a9 	.word	0x080010a9
 8001044:	08001025 	.word	0x08001025
 8001048:	08001025 	.word	0x08001025
 800104c:	08001025 	.word	0x08001025
 8001050:	08001025 	.word	0x08001025
 8001054:	080010a9 	.word	0x080010a9
 8001058:	08001025 	.word	0x08001025
 800105c:	08001025 	.word	0x08001025
 8001060:	08001025 	.word	0x08001025
 8001064:	08001025 	.word	0x08001025
 8001068:	080011ad 	.word	0x080011ad
 800106c:	080010d5 	.word	0x080010d5
 8001070:	08001167 	.word	0x08001167
 8001074:	08001025 	.word	0x08001025
 8001078:	08001025 	.word	0x08001025
 800107c:	080011cf 	.word	0x080011cf
 8001080:	08001025 	.word	0x08001025
 8001084:	080010d5 	.word	0x080010d5
 8001088:	08001025 	.word	0x08001025
 800108c:	08001025 	.word	0x08001025
 8001090:	0800116f 	.word	0x0800116f
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	1d1a      	adds	r2, r3, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	602a      	str	r2, [r5, #0]
 800109c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010a4:	2301      	movs	r3, #1
 80010a6:	e09f      	b.n	80011e8 <_printf_i+0x1ec>
 80010a8:	6820      	ldr	r0, [r4, #0]
 80010aa:	682b      	ldr	r3, [r5, #0]
 80010ac:	0607      	lsls	r7, r0, #24
 80010ae:	f103 0104 	add.w	r1, r3, #4
 80010b2:	6029      	str	r1, [r5, #0]
 80010b4:	d501      	bpl.n	80010ba <_printf_i+0xbe>
 80010b6:	681e      	ldr	r6, [r3, #0]
 80010b8:	e003      	b.n	80010c2 <_printf_i+0xc6>
 80010ba:	0646      	lsls	r6, r0, #25
 80010bc:	d5fb      	bpl.n	80010b6 <_printf_i+0xba>
 80010be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80010c2:	2e00      	cmp	r6, #0
 80010c4:	da03      	bge.n	80010ce <_printf_i+0xd2>
 80010c6:	232d      	movs	r3, #45	; 0x2d
 80010c8:	4276      	negs	r6, r6
 80010ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010ce:	485a      	ldr	r0, [pc, #360]	; (8001238 <_printf_i+0x23c>)
 80010d0:	230a      	movs	r3, #10
 80010d2:	e012      	b.n	80010fa <_printf_i+0xfe>
 80010d4:	682b      	ldr	r3, [r5, #0]
 80010d6:	6820      	ldr	r0, [r4, #0]
 80010d8:	1d19      	adds	r1, r3, #4
 80010da:	6029      	str	r1, [r5, #0]
 80010dc:	0605      	lsls	r5, r0, #24
 80010de:	d501      	bpl.n	80010e4 <_printf_i+0xe8>
 80010e0:	681e      	ldr	r6, [r3, #0]
 80010e2:	e002      	b.n	80010ea <_printf_i+0xee>
 80010e4:	0641      	lsls	r1, r0, #25
 80010e6:	d5fb      	bpl.n	80010e0 <_printf_i+0xe4>
 80010e8:	881e      	ldrh	r6, [r3, #0]
 80010ea:	4853      	ldr	r0, [pc, #332]	; (8001238 <_printf_i+0x23c>)
 80010ec:	2f6f      	cmp	r7, #111	; 0x6f
 80010ee:	bf0c      	ite	eq
 80010f0:	2308      	moveq	r3, #8
 80010f2:	230a      	movne	r3, #10
 80010f4:	2100      	movs	r1, #0
 80010f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010fa:	6865      	ldr	r5, [r4, #4]
 80010fc:	60a5      	str	r5, [r4, #8]
 80010fe:	2d00      	cmp	r5, #0
 8001100:	bfa2      	ittt	ge
 8001102:	6821      	ldrge	r1, [r4, #0]
 8001104:	f021 0104 	bicge.w	r1, r1, #4
 8001108:	6021      	strge	r1, [r4, #0]
 800110a:	b90e      	cbnz	r6, 8001110 <_printf_i+0x114>
 800110c:	2d00      	cmp	r5, #0
 800110e:	d04b      	beq.n	80011a8 <_printf_i+0x1ac>
 8001110:	4615      	mov	r5, r2
 8001112:	fbb6 f1f3 	udiv	r1, r6, r3
 8001116:	fb03 6711 	mls	r7, r3, r1, r6
 800111a:	5dc7      	ldrb	r7, [r0, r7]
 800111c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001120:	4637      	mov	r7, r6
 8001122:	42bb      	cmp	r3, r7
 8001124:	460e      	mov	r6, r1
 8001126:	d9f4      	bls.n	8001112 <_printf_i+0x116>
 8001128:	2b08      	cmp	r3, #8
 800112a:	d10b      	bne.n	8001144 <_printf_i+0x148>
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	07de      	lsls	r6, r3, #31
 8001130:	d508      	bpl.n	8001144 <_printf_i+0x148>
 8001132:	6923      	ldr	r3, [r4, #16]
 8001134:	6861      	ldr	r1, [r4, #4]
 8001136:	4299      	cmp	r1, r3
 8001138:	bfde      	ittt	le
 800113a:	2330      	movle	r3, #48	; 0x30
 800113c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001140:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001144:	1b52      	subs	r2, r2, r5
 8001146:	6122      	str	r2, [r4, #16]
 8001148:	f8cd a000 	str.w	sl, [sp]
 800114c:	464b      	mov	r3, r9
 800114e:	aa03      	add	r2, sp, #12
 8001150:	4621      	mov	r1, r4
 8001152:	4640      	mov	r0, r8
 8001154:	f7ff fee4 	bl	8000f20 <_printf_common>
 8001158:	3001      	adds	r0, #1
 800115a:	d14a      	bne.n	80011f2 <_printf_i+0x1f6>
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	b004      	add	sp, #16
 8001162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	6023      	str	r3, [r4, #0]
 800116e:	4833      	ldr	r0, [pc, #204]	; (800123c <_printf_i+0x240>)
 8001170:	2778      	movs	r7, #120	; 0x78
 8001172:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	6829      	ldr	r1, [r5, #0]
 800117a:	061f      	lsls	r7, r3, #24
 800117c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001180:	d402      	bmi.n	8001188 <_printf_i+0x18c>
 8001182:	065f      	lsls	r7, r3, #25
 8001184:	bf48      	it	mi
 8001186:	b2b6      	uxthmi	r6, r6
 8001188:	07df      	lsls	r7, r3, #31
 800118a:	bf48      	it	mi
 800118c:	f043 0320 	orrmi.w	r3, r3, #32
 8001190:	6029      	str	r1, [r5, #0]
 8001192:	bf48      	it	mi
 8001194:	6023      	strmi	r3, [r4, #0]
 8001196:	b91e      	cbnz	r6, 80011a0 <_printf_i+0x1a4>
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	f023 0320 	bic.w	r3, r3, #32
 800119e:	6023      	str	r3, [r4, #0]
 80011a0:	2310      	movs	r3, #16
 80011a2:	e7a7      	b.n	80010f4 <_printf_i+0xf8>
 80011a4:	4824      	ldr	r0, [pc, #144]	; (8001238 <_printf_i+0x23c>)
 80011a6:	e7e4      	b.n	8001172 <_printf_i+0x176>
 80011a8:	4615      	mov	r5, r2
 80011aa:	e7bd      	b.n	8001128 <_printf_i+0x12c>
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	6826      	ldr	r6, [r4, #0]
 80011b0:	6961      	ldr	r1, [r4, #20]
 80011b2:	1d18      	adds	r0, r3, #4
 80011b4:	6028      	str	r0, [r5, #0]
 80011b6:	0635      	lsls	r5, r6, #24
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	d501      	bpl.n	80011c0 <_printf_i+0x1c4>
 80011bc:	6019      	str	r1, [r3, #0]
 80011be:	e002      	b.n	80011c6 <_printf_i+0x1ca>
 80011c0:	0670      	lsls	r0, r6, #25
 80011c2:	d5fb      	bpl.n	80011bc <_printf_i+0x1c0>
 80011c4:	8019      	strh	r1, [r3, #0]
 80011c6:	2300      	movs	r3, #0
 80011c8:	6123      	str	r3, [r4, #16]
 80011ca:	4615      	mov	r5, r2
 80011cc:	e7bc      	b.n	8001148 <_printf_i+0x14c>
 80011ce:	682b      	ldr	r3, [r5, #0]
 80011d0:	1d1a      	adds	r2, r3, #4
 80011d2:	602a      	str	r2, [r5, #0]
 80011d4:	681d      	ldr	r5, [r3, #0]
 80011d6:	6862      	ldr	r2, [r4, #4]
 80011d8:	2100      	movs	r1, #0
 80011da:	4628      	mov	r0, r5
 80011dc:	f7ff f808 	bl	80001f0 <memchr>
 80011e0:	b108      	cbz	r0, 80011e6 <_printf_i+0x1ea>
 80011e2:	1b40      	subs	r0, r0, r5
 80011e4:	6060      	str	r0, [r4, #4]
 80011e6:	6863      	ldr	r3, [r4, #4]
 80011e8:	6123      	str	r3, [r4, #16]
 80011ea:	2300      	movs	r3, #0
 80011ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011f0:	e7aa      	b.n	8001148 <_printf_i+0x14c>
 80011f2:	6923      	ldr	r3, [r4, #16]
 80011f4:	462a      	mov	r2, r5
 80011f6:	4649      	mov	r1, r9
 80011f8:	4640      	mov	r0, r8
 80011fa:	47d0      	blx	sl
 80011fc:	3001      	adds	r0, #1
 80011fe:	d0ad      	beq.n	800115c <_printf_i+0x160>
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	079b      	lsls	r3, r3, #30
 8001204:	d413      	bmi.n	800122e <_printf_i+0x232>
 8001206:	68e0      	ldr	r0, [r4, #12]
 8001208:	9b03      	ldr	r3, [sp, #12]
 800120a:	4298      	cmp	r0, r3
 800120c:	bfb8      	it	lt
 800120e:	4618      	movlt	r0, r3
 8001210:	e7a6      	b.n	8001160 <_printf_i+0x164>
 8001212:	2301      	movs	r3, #1
 8001214:	4632      	mov	r2, r6
 8001216:	4649      	mov	r1, r9
 8001218:	4640      	mov	r0, r8
 800121a:	47d0      	blx	sl
 800121c:	3001      	adds	r0, #1
 800121e:	d09d      	beq.n	800115c <_printf_i+0x160>
 8001220:	3501      	adds	r5, #1
 8001222:	68e3      	ldr	r3, [r4, #12]
 8001224:	9903      	ldr	r1, [sp, #12]
 8001226:	1a5b      	subs	r3, r3, r1
 8001228:	42ab      	cmp	r3, r5
 800122a:	dcf2      	bgt.n	8001212 <_printf_i+0x216>
 800122c:	e7eb      	b.n	8001206 <_printf_i+0x20a>
 800122e:	2500      	movs	r5, #0
 8001230:	f104 0619 	add.w	r6, r4, #25
 8001234:	e7f5      	b.n	8001222 <_printf_i+0x226>
 8001236:	bf00      	nop
 8001238:	08001841 	.word	0x08001841
 800123c:	08001852 	.word	0x08001852

08001240 <__sflush_r>:
 8001240:	898a      	ldrh	r2, [r1, #12]
 8001242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001246:	4605      	mov	r5, r0
 8001248:	0710      	lsls	r0, r2, #28
 800124a:	460c      	mov	r4, r1
 800124c:	d458      	bmi.n	8001300 <__sflush_r+0xc0>
 800124e:	684b      	ldr	r3, [r1, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	dc05      	bgt.n	8001260 <__sflush_r+0x20>
 8001254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001256:	2b00      	cmp	r3, #0
 8001258:	dc02      	bgt.n	8001260 <__sflush_r+0x20>
 800125a:	2000      	movs	r0, #0
 800125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001262:	2e00      	cmp	r6, #0
 8001264:	d0f9      	beq.n	800125a <__sflush_r+0x1a>
 8001266:	2300      	movs	r3, #0
 8001268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800126c:	682f      	ldr	r7, [r5, #0]
 800126e:	6a21      	ldr	r1, [r4, #32]
 8001270:	602b      	str	r3, [r5, #0]
 8001272:	d032      	beq.n	80012da <__sflush_r+0x9a>
 8001274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	075a      	lsls	r2, r3, #29
 800127a:	d505      	bpl.n	8001288 <__sflush_r+0x48>
 800127c:	6863      	ldr	r3, [r4, #4]
 800127e:	1ac0      	subs	r0, r0, r3
 8001280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001282:	b10b      	cbz	r3, 8001288 <__sflush_r+0x48>
 8001284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001286:	1ac0      	subs	r0, r0, r3
 8001288:	2300      	movs	r3, #0
 800128a:	4602      	mov	r2, r0
 800128c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800128e:	6a21      	ldr	r1, [r4, #32]
 8001290:	4628      	mov	r0, r5
 8001292:	47b0      	blx	r6
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	d106      	bne.n	80012a8 <__sflush_r+0x68>
 800129a:	6829      	ldr	r1, [r5, #0]
 800129c:	291d      	cmp	r1, #29
 800129e:	d82b      	bhi.n	80012f8 <__sflush_r+0xb8>
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <__sflush_r+0x108>)
 80012a2:	410a      	asrs	r2, r1
 80012a4:	07d6      	lsls	r6, r2, #31
 80012a6:	d427      	bmi.n	80012f8 <__sflush_r+0xb8>
 80012a8:	2200      	movs	r2, #0
 80012aa:	6062      	str	r2, [r4, #4]
 80012ac:	04d9      	lsls	r1, r3, #19
 80012ae:	6922      	ldr	r2, [r4, #16]
 80012b0:	6022      	str	r2, [r4, #0]
 80012b2:	d504      	bpl.n	80012be <__sflush_r+0x7e>
 80012b4:	1c42      	adds	r2, r0, #1
 80012b6:	d101      	bne.n	80012bc <__sflush_r+0x7c>
 80012b8:	682b      	ldr	r3, [r5, #0]
 80012ba:	b903      	cbnz	r3, 80012be <__sflush_r+0x7e>
 80012bc:	6560      	str	r0, [r4, #84]	; 0x54
 80012be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012c0:	602f      	str	r7, [r5, #0]
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d0c9      	beq.n	800125a <__sflush_r+0x1a>
 80012c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012ca:	4299      	cmp	r1, r3
 80012cc:	d002      	beq.n	80012d4 <__sflush_r+0x94>
 80012ce:	4628      	mov	r0, r5
 80012d0:	f7ff fbe2 	bl	8000a98 <_free_r>
 80012d4:	2000      	movs	r0, #0
 80012d6:	6360      	str	r0, [r4, #52]	; 0x34
 80012d8:	e7c0      	b.n	800125c <__sflush_r+0x1c>
 80012da:	2301      	movs	r3, #1
 80012dc:	4628      	mov	r0, r5
 80012de:	47b0      	blx	r6
 80012e0:	1c41      	adds	r1, r0, #1
 80012e2:	d1c8      	bne.n	8001276 <__sflush_r+0x36>
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0c5      	beq.n	8001276 <__sflush_r+0x36>
 80012ea:	2b1d      	cmp	r3, #29
 80012ec:	d001      	beq.n	80012f2 <__sflush_r+0xb2>
 80012ee:	2b16      	cmp	r3, #22
 80012f0:	d101      	bne.n	80012f6 <__sflush_r+0xb6>
 80012f2:	602f      	str	r7, [r5, #0]
 80012f4:	e7b1      	b.n	800125a <__sflush_r+0x1a>
 80012f6:	89a3      	ldrh	r3, [r4, #12]
 80012f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fc:	81a3      	strh	r3, [r4, #12]
 80012fe:	e7ad      	b.n	800125c <__sflush_r+0x1c>
 8001300:	690f      	ldr	r7, [r1, #16]
 8001302:	2f00      	cmp	r7, #0
 8001304:	d0a9      	beq.n	800125a <__sflush_r+0x1a>
 8001306:	0793      	lsls	r3, r2, #30
 8001308:	680e      	ldr	r6, [r1, #0]
 800130a:	bf08      	it	eq
 800130c:	694b      	ldreq	r3, [r1, #20]
 800130e:	600f      	str	r7, [r1, #0]
 8001310:	bf18      	it	ne
 8001312:	2300      	movne	r3, #0
 8001314:	eba6 0807 	sub.w	r8, r6, r7
 8001318:	608b      	str	r3, [r1, #8]
 800131a:	f1b8 0f00 	cmp.w	r8, #0
 800131e:	dd9c      	ble.n	800125a <__sflush_r+0x1a>
 8001320:	6a21      	ldr	r1, [r4, #32]
 8001322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001324:	4643      	mov	r3, r8
 8001326:	463a      	mov	r2, r7
 8001328:	4628      	mov	r0, r5
 800132a:	47b0      	blx	r6
 800132c:	2800      	cmp	r0, #0
 800132e:	dc06      	bgt.n	800133e <__sflush_r+0xfe>
 8001330:	89a3      	ldrh	r3, [r4, #12]
 8001332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001336:	81a3      	strh	r3, [r4, #12]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	e78e      	b.n	800125c <__sflush_r+0x1c>
 800133e:	4407      	add	r7, r0
 8001340:	eba8 0800 	sub.w	r8, r8, r0
 8001344:	e7e9      	b.n	800131a <__sflush_r+0xda>
 8001346:	bf00      	nop
 8001348:	dfbffffe 	.word	0xdfbffffe

0800134c <_fflush_r>:
 800134c:	b538      	push	{r3, r4, r5, lr}
 800134e:	690b      	ldr	r3, [r1, #16]
 8001350:	4605      	mov	r5, r0
 8001352:	460c      	mov	r4, r1
 8001354:	b913      	cbnz	r3, 800135c <_fflush_r+0x10>
 8001356:	2500      	movs	r5, #0
 8001358:	4628      	mov	r0, r5
 800135a:	bd38      	pop	{r3, r4, r5, pc}
 800135c:	b118      	cbz	r0, 8001366 <_fflush_r+0x1a>
 800135e:	6a03      	ldr	r3, [r0, #32]
 8001360:	b90b      	cbnz	r3, 8001366 <_fflush_r+0x1a>
 8001362:	f7ff fa6d 	bl	8000840 <__sinit>
 8001366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f3      	beq.n	8001356 <_fflush_r+0xa>
 800136e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001370:	07d0      	lsls	r0, r2, #31
 8001372:	d404      	bmi.n	800137e <_fflush_r+0x32>
 8001374:	0599      	lsls	r1, r3, #22
 8001376:	d402      	bmi.n	800137e <_fflush_r+0x32>
 8001378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800137a:	f7ff fb6d 	bl	8000a58 <__retarget_lock_acquire_recursive>
 800137e:	4628      	mov	r0, r5
 8001380:	4621      	mov	r1, r4
 8001382:	f7ff ff5d 	bl	8001240 <__sflush_r>
 8001386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001388:	07da      	lsls	r2, r3, #31
 800138a:	4605      	mov	r5, r0
 800138c:	d4e4      	bmi.n	8001358 <_fflush_r+0xc>
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	059b      	lsls	r3, r3, #22
 8001392:	d4e1      	bmi.n	8001358 <_fflush_r+0xc>
 8001394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001396:	f7ff fb60 	bl	8000a5a <__retarget_lock_release_recursive>
 800139a:	e7dd      	b.n	8001358 <_fflush_r+0xc>

0800139c <fiprintf>:
 800139c:	b40e      	push	{r1, r2, r3}
 800139e:	b503      	push	{r0, r1, lr}
 80013a0:	4601      	mov	r1, r0
 80013a2:	ab03      	add	r3, sp, #12
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <fiprintf+0x20>)
 80013a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80013aa:	6800      	ldr	r0, [r0, #0]
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	f7ff fc9d 	bl	8000cec <_vfiprintf_r>
 80013b2:	b002      	add	sp, #8
 80013b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80013b8:	b003      	add	sp, #12
 80013ba:	4770      	bx	lr
 80013bc:	200000a0 	.word	0x200000a0

080013c0 <_putc_r>:
 80013c0:	b570      	push	{r4, r5, r6, lr}
 80013c2:	460d      	mov	r5, r1
 80013c4:	4614      	mov	r4, r2
 80013c6:	4606      	mov	r6, r0
 80013c8:	b118      	cbz	r0, 80013d2 <_putc_r+0x12>
 80013ca:	6a03      	ldr	r3, [r0, #32]
 80013cc:	b90b      	cbnz	r3, 80013d2 <_putc_r+0x12>
 80013ce:	f7ff fa37 	bl	8000840 <__sinit>
 80013d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013d4:	07d8      	lsls	r0, r3, #31
 80013d6:	d405      	bmi.n	80013e4 <_putc_r+0x24>
 80013d8:	89a3      	ldrh	r3, [r4, #12]
 80013da:	0599      	lsls	r1, r3, #22
 80013dc:	d402      	bmi.n	80013e4 <_putc_r+0x24>
 80013de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013e0:	f7ff fb3a 	bl	8000a58 <__retarget_lock_acquire_recursive>
 80013e4:	68a3      	ldr	r3, [r4, #8]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	60a3      	str	r3, [r4, #8]
 80013ec:	da05      	bge.n	80013fa <_putc_r+0x3a>
 80013ee:	69a2      	ldr	r2, [r4, #24]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	db12      	blt.n	800141a <_putc_r+0x5a>
 80013f4:	b2eb      	uxtb	r3, r5
 80013f6:	2b0a      	cmp	r3, #10
 80013f8:	d00f      	beq.n	800141a <_putc_r+0x5a>
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	6022      	str	r2, [r4, #0]
 8001400:	701d      	strb	r5, [r3, #0]
 8001402:	b2ed      	uxtb	r5, r5
 8001404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001406:	07da      	lsls	r2, r3, #31
 8001408:	d405      	bmi.n	8001416 <_putc_r+0x56>
 800140a:	89a3      	ldrh	r3, [r4, #12]
 800140c:	059b      	lsls	r3, r3, #22
 800140e:	d402      	bmi.n	8001416 <_putc_r+0x56>
 8001410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001412:	f7ff fb22 	bl	8000a5a <__retarget_lock_release_recursive>
 8001416:	4628      	mov	r0, r5
 8001418:	bd70      	pop	{r4, r5, r6, pc}
 800141a:	4629      	mov	r1, r5
 800141c:	4622      	mov	r2, r4
 800141e:	4630      	mov	r0, r6
 8001420:	f000 f802 	bl	8001428 <__swbuf_r>
 8001424:	4605      	mov	r5, r0
 8001426:	e7ed      	b.n	8001404 <_putc_r+0x44>

08001428 <__swbuf_r>:
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142a:	460e      	mov	r6, r1
 800142c:	4614      	mov	r4, r2
 800142e:	4605      	mov	r5, r0
 8001430:	b118      	cbz	r0, 800143a <__swbuf_r+0x12>
 8001432:	6a03      	ldr	r3, [r0, #32]
 8001434:	b90b      	cbnz	r3, 800143a <__swbuf_r+0x12>
 8001436:	f7ff fa03 	bl	8000840 <__sinit>
 800143a:	69a3      	ldr	r3, [r4, #24]
 800143c:	60a3      	str	r3, [r4, #8]
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	071a      	lsls	r2, r3, #28
 8001442:	d525      	bpl.n	8001490 <__swbuf_r+0x68>
 8001444:	6923      	ldr	r3, [r4, #16]
 8001446:	b31b      	cbz	r3, 8001490 <__swbuf_r+0x68>
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	6922      	ldr	r2, [r4, #16]
 800144c:	1a98      	subs	r0, r3, r2
 800144e:	6963      	ldr	r3, [r4, #20]
 8001450:	b2f6      	uxtb	r6, r6
 8001452:	4283      	cmp	r3, r0
 8001454:	4637      	mov	r7, r6
 8001456:	dc04      	bgt.n	8001462 <__swbuf_r+0x3a>
 8001458:	4621      	mov	r1, r4
 800145a:	4628      	mov	r0, r5
 800145c:	f7ff ff76 	bl	800134c <_fflush_r>
 8001460:	b9e0      	cbnz	r0, 800149c <__swbuf_r+0x74>
 8001462:	68a3      	ldr	r3, [r4, #8]
 8001464:	3b01      	subs	r3, #1
 8001466:	60a3      	str	r3, [r4, #8]
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	6022      	str	r2, [r4, #0]
 800146e:	701e      	strb	r6, [r3, #0]
 8001470:	6962      	ldr	r2, [r4, #20]
 8001472:	1c43      	adds	r3, r0, #1
 8001474:	429a      	cmp	r2, r3
 8001476:	d004      	beq.n	8001482 <__swbuf_r+0x5a>
 8001478:	89a3      	ldrh	r3, [r4, #12]
 800147a:	07db      	lsls	r3, r3, #31
 800147c:	d506      	bpl.n	800148c <__swbuf_r+0x64>
 800147e:	2e0a      	cmp	r6, #10
 8001480:	d104      	bne.n	800148c <__swbuf_r+0x64>
 8001482:	4621      	mov	r1, r4
 8001484:	4628      	mov	r0, r5
 8001486:	f7ff ff61 	bl	800134c <_fflush_r>
 800148a:	b938      	cbnz	r0, 800149c <__swbuf_r+0x74>
 800148c:	4638      	mov	r0, r7
 800148e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001490:	4621      	mov	r1, r4
 8001492:	4628      	mov	r0, r5
 8001494:	f000 f806 	bl	80014a4 <__swsetup_r>
 8001498:	2800      	cmp	r0, #0
 800149a:	d0d5      	beq.n	8001448 <__swbuf_r+0x20>
 800149c:	f04f 37ff 	mov.w	r7, #4294967295
 80014a0:	e7f4      	b.n	800148c <__swbuf_r+0x64>
	...

080014a4 <__swsetup_r>:
 80014a4:	b538      	push	{r3, r4, r5, lr}
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <__swsetup_r+0xac>)
 80014a8:	4605      	mov	r5, r0
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	460c      	mov	r4, r1
 80014ae:	b118      	cbz	r0, 80014b8 <__swsetup_r+0x14>
 80014b0:	6a03      	ldr	r3, [r0, #32]
 80014b2:	b90b      	cbnz	r3, 80014b8 <__swsetup_r+0x14>
 80014b4:	f7ff f9c4 	bl	8000840 <__sinit>
 80014b8:	89a3      	ldrh	r3, [r4, #12]
 80014ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014be:	0718      	lsls	r0, r3, #28
 80014c0:	d422      	bmi.n	8001508 <__swsetup_r+0x64>
 80014c2:	06d9      	lsls	r1, r3, #27
 80014c4:	d407      	bmi.n	80014d6 <__swsetup_r+0x32>
 80014c6:	2309      	movs	r3, #9
 80014c8:	602b      	str	r3, [r5, #0]
 80014ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014ce:	81a3      	strh	r3, [r4, #12]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	e034      	b.n	8001540 <__swsetup_r+0x9c>
 80014d6:	0758      	lsls	r0, r3, #29
 80014d8:	d512      	bpl.n	8001500 <__swsetup_r+0x5c>
 80014da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014dc:	b141      	cbz	r1, 80014f0 <__swsetup_r+0x4c>
 80014de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014e2:	4299      	cmp	r1, r3
 80014e4:	d002      	beq.n	80014ec <__swsetup_r+0x48>
 80014e6:	4628      	mov	r0, r5
 80014e8:	f7ff fad6 	bl	8000a98 <_free_r>
 80014ec:	2300      	movs	r3, #0
 80014ee:	6363      	str	r3, [r4, #52]	; 0x34
 80014f0:	89a3      	ldrh	r3, [r4, #12]
 80014f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014f6:	81a3      	strh	r3, [r4, #12]
 80014f8:	2300      	movs	r3, #0
 80014fa:	6063      	str	r3, [r4, #4]
 80014fc:	6923      	ldr	r3, [r4, #16]
 80014fe:	6023      	str	r3, [r4, #0]
 8001500:	89a3      	ldrh	r3, [r4, #12]
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	81a3      	strh	r3, [r4, #12]
 8001508:	6923      	ldr	r3, [r4, #16]
 800150a:	b94b      	cbnz	r3, 8001520 <__swsetup_r+0x7c>
 800150c:	89a3      	ldrh	r3, [r4, #12]
 800150e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001516:	d003      	beq.n	8001520 <__swsetup_r+0x7c>
 8001518:	4621      	mov	r1, r4
 800151a:	4628      	mov	r0, r5
 800151c:	f000 f857 	bl	80015ce <__smakebuf_r>
 8001520:	89a0      	ldrh	r0, [r4, #12]
 8001522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001526:	f010 0301 	ands.w	r3, r0, #1
 800152a:	d00a      	beq.n	8001542 <__swsetup_r+0x9e>
 800152c:	2300      	movs	r3, #0
 800152e:	60a3      	str	r3, [r4, #8]
 8001530:	6963      	ldr	r3, [r4, #20]
 8001532:	425b      	negs	r3, r3
 8001534:	61a3      	str	r3, [r4, #24]
 8001536:	6923      	ldr	r3, [r4, #16]
 8001538:	b943      	cbnz	r3, 800154c <__swsetup_r+0xa8>
 800153a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800153e:	d1c4      	bne.n	80014ca <__swsetup_r+0x26>
 8001540:	bd38      	pop	{r3, r4, r5, pc}
 8001542:	0781      	lsls	r1, r0, #30
 8001544:	bf58      	it	pl
 8001546:	6963      	ldrpl	r3, [r4, #20]
 8001548:	60a3      	str	r3, [r4, #8]
 800154a:	e7f4      	b.n	8001536 <__swsetup_r+0x92>
 800154c:	2000      	movs	r0, #0
 800154e:	e7f7      	b.n	8001540 <__swsetup_r+0x9c>
 8001550:	200000a0 	.word	0x200000a0

08001554 <_sbrk_r>:
 8001554:	b538      	push	{r3, r4, r5, lr}
 8001556:	4d06      	ldr	r5, [pc, #24]	; (8001570 <_sbrk_r+0x1c>)
 8001558:	2300      	movs	r3, #0
 800155a:	4604      	mov	r4, r0
 800155c:	4608      	mov	r0, r1
 800155e:	602b      	str	r3, [r5, #0]
 8001560:	f7ff f856 	bl	8000610 <_sbrk>
 8001564:	1c43      	adds	r3, r0, #1
 8001566:	d102      	bne.n	800156e <_sbrk_r+0x1a>
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	b103      	cbz	r3, 800156e <_sbrk_r+0x1a>
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	bd38      	pop	{r3, r4, r5, pc}
 8001570:	20000200 	.word	0x20000200

08001574 <abort>:
 8001574:	b508      	push	{r3, lr}
 8001576:	2006      	movs	r0, #6
 8001578:	f000 f88e 	bl	8001698 <raise>
 800157c:	2001      	movs	r0, #1
 800157e:	f7fe ffcf 	bl	8000520 <_exit>

08001582 <__swhatbuf_r>:
 8001582:	b570      	push	{r4, r5, r6, lr}
 8001584:	460c      	mov	r4, r1
 8001586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800158a:	2900      	cmp	r1, #0
 800158c:	b096      	sub	sp, #88	; 0x58
 800158e:	4615      	mov	r5, r2
 8001590:	461e      	mov	r6, r3
 8001592:	da0d      	bge.n	80015b0 <__swhatbuf_r+0x2e>
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	f013 0f80 	tst.w	r3, #128	; 0x80
 800159a:	f04f 0100 	mov.w	r1, #0
 800159e:	bf0c      	ite	eq
 80015a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80015a4:	2340      	movne	r3, #64	; 0x40
 80015a6:	2000      	movs	r0, #0
 80015a8:	6031      	str	r1, [r6, #0]
 80015aa:	602b      	str	r3, [r5, #0]
 80015ac:	b016      	add	sp, #88	; 0x58
 80015ae:	bd70      	pop	{r4, r5, r6, pc}
 80015b0:	466a      	mov	r2, sp
 80015b2:	f000 f879 	bl	80016a8 <_fstat_r>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	dbec      	blt.n	8001594 <__swhatbuf_r+0x12>
 80015ba:	9901      	ldr	r1, [sp, #4]
 80015bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80015c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80015c4:	4259      	negs	r1, r3
 80015c6:	4159      	adcs	r1, r3
 80015c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015cc:	e7eb      	b.n	80015a6 <__swhatbuf_r+0x24>

080015ce <__smakebuf_r>:
 80015ce:	898b      	ldrh	r3, [r1, #12]
 80015d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015d2:	079d      	lsls	r5, r3, #30
 80015d4:	4606      	mov	r6, r0
 80015d6:	460c      	mov	r4, r1
 80015d8:	d507      	bpl.n	80015ea <__smakebuf_r+0x1c>
 80015da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015de:	6023      	str	r3, [r4, #0]
 80015e0:	6123      	str	r3, [r4, #16]
 80015e2:	2301      	movs	r3, #1
 80015e4:	6163      	str	r3, [r4, #20]
 80015e6:	b002      	add	sp, #8
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
 80015ea:	ab01      	add	r3, sp, #4
 80015ec:	466a      	mov	r2, sp
 80015ee:	f7ff ffc8 	bl	8001582 <__swhatbuf_r>
 80015f2:	9900      	ldr	r1, [sp, #0]
 80015f4:	4605      	mov	r5, r0
 80015f6:	4630      	mov	r0, r6
 80015f8:	f7ff fac2 	bl	8000b80 <_malloc_r>
 80015fc:	b948      	cbnz	r0, 8001612 <__smakebuf_r+0x44>
 80015fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001602:	059a      	lsls	r2, r3, #22
 8001604:	d4ef      	bmi.n	80015e6 <__smakebuf_r+0x18>
 8001606:	f023 0303 	bic.w	r3, r3, #3
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	81a3      	strh	r3, [r4, #12]
 8001610:	e7e3      	b.n	80015da <__smakebuf_r+0xc>
 8001612:	89a3      	ldrh	r3, [r4, #12]
 8001614:	6020      	str	r0, [r4, #0]
 8001616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161a:	81a3      	strh	r3, [r4, #12]
 800161c:	9b00      	ldr	r3, [sp, #0]
 800161e:	6163      	str	r3, [r4, #20]
 8001620:	9b01      	ldr	r3, [sp, #4]
 8001622:	6120      	str	r0, [r4, #16]
 8001624:	b15b      	cbz	r3, 800163e <__smakebuf_r+0x70>
 8001626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800162a:	4630      	mov	r0, r6
 800162c:	f000 f84e 	bl	80016cc <_isatty_r>
 8001630:	b128      	cbz	r0, 800163e <__smakebuf_r+0x70>
 8001632:	89a3      	ldrh	r3, [r4, #12]
 8001634:	f023 0303 	bic.w	r3, r3, #3
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	81a3      	strh	r3, [r4, #12]
 800163e:	89a3      	ldrh	r3, [r4, #12]
 8001640:	431d      	orrs	r5, r3
 8001642:	81a5      	strh	r5, [r4, #12]
 8001644:	e7cf      	b.n	80015e6 <__smakebuf_r+0x18>

08001646 <_raise_r>:
 8001646:	291f      	cmp	r1, #31
 8001648:	b538      	push	{r3, r4, r5, lr}
 800164a:	4604      	mov	r4, r0
 800164c:	460d      	mov	r5, r1
 800164e:	d904      	bls.n	800165a <_raise_r+0x14>
 8001650:	2316      	movs	r3, #22
 8001652:	6003      	str	r3, [r0, #0]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	bd38      	pop	{r3, r4, r5, pc}
 800165a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800165c:	b112      	cbz	r2, 8001664 <_raise_r+0x1e>
 800165e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001662:	b94b      	cbnz	r3, 8001678 <_raise_r+0x32>
 8001664:	4620      	mov	r0, r4
 8001666:	f000 f853 	bl	8001710 <_getpid_r>
 800166a:	462a      	mov	r2, r5
 800166c:	4601      	mov	r1, r0
 800166e:	4620      	mov	r0, r4
 8001670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001674:	f000 b83a 	b.w	80016ec <_kill_r>
 8001678:	2b01      	cmp	r3, #1
 800167a:	d00a      	beq.n	8001692 <_raise_r+0x4c>
 800167c:	1c59      	adds	r1, r3, #1
 800167e:	d103      	bne.n	8001688 <_raise_r+0x42>
 8001680:	2316      	movs	r3, #22
 8001682:	6003      	str	r3, [r0, #0]
 8001684:	2001      	movs	r0, #1
 8001686:	e7e7      	b.n	8001658 <_raise_r+0x12>
 8001688:	2400      	movs	r4, #0
 800168a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800168e:	4628      	mov	r0, r5
 8001690:	4798      	blx	r3
 8001692:	2000      	movs	r0, #0
 8001694:	e7e0      	b.n	8001658 <_raise_r+0x12>
	...

08001698 <raise>:
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <raise+0xc>)
 800169a:	4601      	mov	r1, r0
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	f7ff bfd2 	b.w	8001646 <_raise_r>
 80016a2:	bf00      	nop
 80016a4:	200000a0 	.word	0x200000a0

080016a8 <_fstat_r>:
 80016a8:	b538      	push	{r3, r4, r5, lr}
 80016aa:	4d07      	ldr	r5, [pc, #28]	; (80016c8 <_fstat_r+0x20>)
 80016ac:	2300      	movs	r3, #0
 80016ae:	4604      	mov	r4, r0
 80016b0:	4608      	mov	r0, r1
 80016b2:	4611      	mov	r1, r2
 80016b4:	602b      	str	r3, [r5, #0]
 80016b6:	f7fe ff82 	bl	80005be <_fstat>
 80016ba:	1c43      	adds	r3, r0, #1
 80016bc:	d102      	bne.n	80016c4 <_fstat_r+0x1c>
 80016be:	682b      	ldr	r3, [r5, #0]
 80016c0:	b103      	cbz	r3, 80016c4 <_fstat_r+0x1c>
 80016c2:	6023      	str	r3, [r4, #0]
 80016c4:	bd38      	pop	{r3, r4, r5, pc}
 80016c6:	bf00      	nop
 80016c8:	20000200 	.word	0x20000200

080016cc <_isatty_r>:
 80016cc:	b538      	push	{r3, r4, r5, lr}
 80016ce:	4d06      	ldr	r5, [pc, #24]	; (80016e8 <_isatty_r+0x1c>)
 80016d0:	2300      	movs	r3, #0
 80016d2:	4604      	mov	r4, r0
 80016d4:	4608      	mov	r0, r1
 80016d6:	602b      	str	r3, [r5, #0]
 80016d8:	f7fe ff81 	bl	80005de <_isatty>
 80016dc:	1c43      	adds	r3, r0, #1
 80016de:	d102      	bne.n	80016e6 <_isatty_r+0x1a>
 80016e0:	682b      	ldr	r3, [r5, #0]
 80016e2:	b103      	cbz	r3, 80016e6 <_isatty_r+0x1a>
 80016e4:	6023      	str	r3, [r4, #0]
 80016e6:	bd38      	pop	{r3, r4, r5, pc}
 80016e8:	20000200 	.word	0x20000200

080016ec <_kill_r>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	4d07      	ldr	r5, [pc, #28]	; (800170c <_kill_r+0x20>)
 80016f0:	2300      	movs	r3, #0
 80016f2:	4604      	mov	r4, r0
 80016f4:	4608      	mov	r0, r1
 80016f6:	4611      	mov	r1, r2
 80016f8:	602b      	str	r3, [r5, #0]
 80016fa:	f7fe ff01 	bl	8000500 <_kill>
 80016fe:	1c43      	adds	r3, r0, #1
 8001700:	d102      	bne.n	8001708 <_kill_r+0x1c>
 8001702:	682b      	ldr	r3, [r5, #0]
 8001704:	b103      	cbz	r3, 8001708 <_kill_r+0x1c>
 8001706:	6023      	str	r3, [r4, #0]
 8001708:	bd38      	pop	{r3, r4, r5, pc}
 800170a:	bf00      	nop
 800170c:	20000200 	.word	0x20000200

08001710 <_getpid_r>:
 8001710:	f7fe beee 	b.w	80004f0 <_getpid>

08001714 <_init>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	bf00      	nop
 8001718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171a:	bc08      	pop	{r3}
 800171c:	469e      	mov	lr, r3
 800171e:	4770      	bx	lr

08001720 <_fini>:
 8001720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001722:	bf00      	nop
 8001724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001726:	bc08      	pop	{r3}
 8001728:	469e      	mov	lr, r3
 800172a:	4770      	bx	lr
