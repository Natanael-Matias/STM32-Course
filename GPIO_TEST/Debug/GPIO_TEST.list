
GPIO_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000019c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c4  0800019c  0800019c  0001019c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000760  08000768  00010768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000760  08000760  00010768  2**0
                  CONTENTS
  4 .ARM          00000000  08000760  08000760  00010768  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000760  08000768  00010768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000760  08000760  00010760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000764  08000764  00010764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00010768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010768  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010768  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010798  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001ff7  00000000  00000000  000107db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000569  00000000  00000000  000127d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000118  00000000  00000000  00012d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000bb  00000000  00000000  00012e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000013aa  00000000  00000000  00012f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001687  00000000  00000000  000142bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00005399  00000000  00000000  00015944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000030c  00000000  00000000  0001ace0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0001afec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800019c <__do_global_dtors_aux>:
 800019c:	b510      	push	{r4, lr}
 800019e:	4c05      	ldr	r4, [pc, #20]	; (80001b4 <__do_global_dtors_aux+0x18>)
 80001a0:	7823      	ldrb	r3, [r4, #0]
 80001a2:	b933      	cbnz	r3, 80001b2 <__do_global_dtors_aux+0x16>
 80001a4:	4b04      	ldr	r3, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x1c>)
 80001a6:	b113      	cbz	r3, 80001ae <__do_global_dtors_aux+0x12>
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x20>)
 80001aa:	f3af 8000 	nop.w
 80001ae:	2301      	movs	r3, #1
 80001b0:	7023      	strb	r3, [r4, #0]
 80001b2:	bd10      	pop	{r4, pc}
 80001b4:	20000000 	.word	0x20000000
 80001b8:	00000000 	.word	0x00000000
 80001bc:	08000748 	.word	0x08000748

080001c0 <frame_dummy>:
 80001c0:	b508      	push	{r3, lr}
 80001c2:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <frame_dummy+0x10>)
 80001c4:	b11b      	cbz	r3, 80001ce <frame_dummy+0xe>
 80001c6:	4903      	ldr	r1, [pc, #12]	; (80001d4 <frame_dummy+0x14>)
 80001c8:	4803      	ldr	r0, [pc, #12]	; (80001d8 <frame_dummy+0x18>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	00000000 	.word	0x00000000
 80001d4:	20000004 	.word	0x20000004
 80001d8:	08000748 	.word	0x08000748

080001dc <GPIO_Init>:
 * @return			- none
 *
 * @note			- none
 *
 */
void GPIO_Init(GPIO_Reg_t *pGPIOx, const GPIO_Config_t *pGPIO_Init) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	6039      	str	r1, [r7, #0]
	uint8_t pinNumber = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	73fb      	strb	r3, [r7, #15]

	/* Clock enable for GPIO port */
	GPIO_CLK_EN(pGPIO_Init -> port);
 80001ea:	4b53      	ldr	r3, [pc, #332]	; (8000338 <GPIO_Init+0x15c>)
 80001ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	4619      	mov	r1, r3
 80001f4:	2301      	movs	r3, #1
 80001f6:	408b      	lsls	r3, r1
 80001f8:	494f      	ldr	r1, [pc, #316]	; (8000338 <GPIO_Init+0x15c>)
 80001fa:	4313      	orrs	r3, r2
 80001fc:	630b      	str	r3, [r1, #48]	; 0x30

	uint16_t temp = pGPIO_Init -> pin;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	885b      	ldrh	r3, [r3, #2]
 8000202:	817b      	strh	r3, [r7, #10]
	while (temp > 0) {
 8000204:	e08f      	b.n	8000326 <GPIO_Init+0x14a>
		pinNumber = SelectPin(&temp);
 8000206:	f107 030a 	add.w	r3, r7, #10
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f8d5 	bl	80003ba <SelectPin>
 8000210:	4603      	mov	r3, r0
 8000212:	73fb      	strb	r3, [r7, #15]

		pGPIOx -> MODER 	&= ~((0x03U) << (pinNumber * 2));
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	2103      	movs	r1, #3
 800021e:	fa01 f303 	lsl.w	r3, r1, r3
 8000222:	43db      	mvns	r3, r3
 8000224:	401a      	ands	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
		pGPIOx -> MODER 	|= pGPIO_Init -> mode << (pinNumber * 2);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	7912      	ldrb	r2, [r2, #4]
 8000232:	4611      	mov	r1, r2
 8000234:	7bfa      	ldrb	r2, [r7, #15]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	431a      	orrs	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	601a      	str	r2, [r3, #0]

		pGPIOx -> OTYPER 	&= ~((0x03U) << (pinNumber));
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	685a      	ldr	r2, [r3, #4]
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	2103      	movs	r1, #3
 800024a:	fa01 f303 	lsl.w	r3, r1, r3
 800024e:	43db      	mvns	r3, r3
 8000250:	401a      	ands	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	605a      	str	r2, [r3, #4]
		pGPIOx -> OTYPER 	|= pGPIO_Init -> type 	<< (pinNumber);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	7952      	ldrb	r2, [r2, #5]
 800025e:	4611      	mov	r1, r2
 8000260:	7bfa      	ldrb	r2, [r7, #15]
 8000262:	fa01 f202 	lsl.w	r2, r1, r2
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	605a      	str	r2, [r3, #4]

		pGPIOx -> OSPEEDR 	&= ~((0x03U) << (pinNumber * 2));
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	2103      	movs	r1, #3
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	609a      	str	r2, [r3, #8]
		pGPIOx -> OSPEEDR 	|= pGPIO_Init -> speed	<< (pinNumber * 2);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	7992      	ldrb	r2, [r2, #6]
 800028a:	4611      	mov	r1, r2
 800028c:	7bfa      	ldrb	r2, [r7, #15]
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	431a      	orrs	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	609a      	str	r2, [r3, #8]

		pGPIOx -> PUPDR 	&= ~((0x03U) << (pinNumber * 2));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	68da      	ldr	r2, [r3, #12]
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	2103      	movs	r1, #3
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	401a      	ands	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	60da      	str	r2, [r3, #12]
		pGPIOx -> PUPDR 	|= pGPIO_Init -> pupd 	<< (pinNumber * 2);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	79d2      	ldrb	r2, [r2, #7]
 80002b8:	4611      	mov	r1, r2
 80002ba:	7bfa      	ldrb	r2, [r7, #15]
 80002bc:	0052      	lsls	r2, r2, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	431a      	orrs	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	60da      	str	r2, [r3, #12]

		if (pGPIO_Init -> mode == alt_function) {
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d12a      	bne.n	8000326 <GPIO_Init+0x14a>
			uint8_t temp1 = pinNumber/8;
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
 80002d2:	08db      	lsrs	r3, r3, #3
 80002d4:	73bb      	strb	r3, [r7, #14]
			uint8_t temp2 = pinNumber%8;
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	f003 0307 	and.w	r3, r3, #7
 80002dc:	737b      	strb	r3, [r7, #13]
			pGPIOx -> AFR[temp1]	&= ~((0x0FU) << ((temp2) * 4));
 80002de:	7bba      	ldrb	r2, [r7, #14]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3208      	adds	r2, #8
 80002e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80002e8:	7b7b      	ldrb	r3, [r7, #13]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	220f      	movs	r2, #15
 80002ee:	fa02 f303 	lsl.w	r3, r2, r3
 80002f2:	43db      	mvns	r3, r3
 80002f4:	7bba      	ldrb	r2, [r7, #14]
 80002f6:	4019      	ands	r1, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3208      	adds	r2, #8
 80002fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOx -> AFR[temp1]	|= pGPIO_Init -> alternate << ((temp2) * 4);
 8000300:	7bba      	ldrb	r2, [r7, #14]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3208      	adds	r2, #8
 8000306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	7a12      	ldrb	r2, [r2, #8]
 800030e:	4611      	mov	r1, r2
 8000310:	7b7a      	ldrb	r2, [r7, #13]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	7bba      	ldrb	r2, [r7, #14]
 800031c:	4319      	orrs	r1, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3208      	adds	r2, #8
 8000322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	while (temp > 0) {
 8000326:	897b      	ldrh	r3, [r7, #10]
 8000328:	2b00      	cmp	r3, #0
 800032a:	f47f af6c 	bne.w	8000206 <GPIO_Init+0x2a>
		}
	}


}
 800032e:	bf00      	nop
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40023800 	.word	0x40023800

0800033c <GPIO_WritePin>:
	uint16_t value;
	value = (uint16_t) pGPIOx -> IDR;
	return value;
}

void GPIO_WritePin(GPIO_Reg_t *pGPIOx, const GPIO_Pin_t GPIO_Pin, state_t pinValue) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
 8000348:	4613      	mov	r3, r2
 800034a:	707b      	strb	r3, [r7, #1]
	uint16_t temp = GPIO_Pin;
 800034c:	887b      	ldrh	r3, [r7, #2]
 800034e:	817b      	strh	r3, [r7, #10]
	uint16_t temp1 = SelectPin(&temp);
 8000350:	f107 030a 	add.w	r3, r7, #10
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f830 	bl	80003ba <SelectPin>
 800035a:	4603      	mov	r3, r0
 800035c:	81fb      	strh	r3, [r7, #14]
	uint16_t temp2 = (uint16_t) pinValue << temp1;
 800035e:	787a      	ldrb	r2, [r7, #1]
 8000360:	89fb      	ldrh	r3, [r7, #14]
 8000362:	fa02 f303 	lsl.w	r3, r2, r3
 8000366:	81bb      	strh	r3, [r7, #12]
	pGPIOx ->  ODR &= ~(0x1 << temp1);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	89fa      	ldrh	r2, [r7, #14]
 800036e:	2101      	movs	r1, #1
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	43d2      	mvns	r2, r2
 8000376:	401a      	ands	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	615a      	str	r2, [r3, #20]
	pGPIOx ->  ODR |= (GPIO_Pin & temp2);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	8879      	ldrh	r1, [r7, #2]
 8000382:	89ba      	ldrh	r2, [r7, #12]
 8000384:	400a      	ands	r2, r1
 8000386:	b292      	uxth	r2, r2
 8000388:	431a      	orrs	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	615a      	str	r2, [r3, #20]
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <GPIO_TogglePin>:

void GPIO_WritePort(GPIO_Reg_t *pGPIOx, uint16_t portValue) {
	pGPIOx -> ODR = portValue;
}

void GPIO_TogglePin(GPIO_Reg_t *pGPIOx, const GPIO_Pin_t GPIO_Pin) {
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	460b      	mov	r3, r1
 80003a0:	807b      	strh	r3, [r7, #2]
	pGPIOx -> ODR ^= GPIO_Pin;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	695a      	ldr	r2, [r3, #20]
 80003a6:	887b      	ldrh	r3, [r7, #2]
 80003a8:	405a      	eors	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	615a      	str	r2, [r3, #20]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <SelectPin>:

void GPIO_IRQHandle(GPIO_Reg_t *pGPIOx) {

}

uint8_t SelectPin(uint16_t *x) {
 80003ba:	b480      	push	{r7}
 80003bc:	b085      	sub	sp, #20
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	73fb      	strb	r3, [r7, #15]
	uint16_t temp1 = *x;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	81bb      	strh	r3, [r7, #12]

	while (!(*x & 0x01U)) {
 80003cc:	e008      	b.n	80003e0 <SelectPin+0x26>
		*x >>= 1;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	085b      	lsrs	r3, r3, #1
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	801a      	strh	r2, [r3, #0]
		result++;
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	3301      	adds	r3, #1
 80003de:	73fb      	strb	r3, [r7, #15]
	while (!(*x & 0x01U)) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0f0      	beq.n	80003ce <SelectPin+0x14>
	}
	*x = (temp1 & ~(0x01 << result));
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	2201      	movs	r2, #1
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	b21b      	sxth	r3, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	b21a      	sxth	r2, r3
 80003fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003fe:	4013      	ands	r3, r2
 8000400:	b21b      	sxth	r3, r3
 8000402:	b29a      	uxth	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	801a      	strh	r2, [r3, #0]
	return result;
 8000408:	7bfb      	ldrb	r3, [r7, #15]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <GPIO_EXTI_SetInterrupt>:
 */

#include "stm32f42xxx_exti.h"
#include "stm32f42xxx_nvic.h"

void GPIO_EXTI_SetInterrupt(GPIO_EXTI_CONFIG_t *pGPIO_Interrupt) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]

	if (pGPIO_Interrupt->line > 7 && pGPIO_Interrupt->portPin == gpiok)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b07      	cmp	r3, #7
 8000426:	d903      	bls.n	8000430 <GPIO_EXTI_SetInterrupt+0x18>
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	785b      	ldrb	r3, [r3, #1]
 800042c:	2b0a      	cmp	r3, #10
 800042e:	d044      	beq.n	80004ba <GPIO_EXTI_SetInterrupt+0xa2>
		return;

	if (pGPIO_Interrupt->line & 0xF0) /* Verifica se line = 0 to 15 */
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d140      	bne.n	80004be <GPIO_EXTI_SetInterrupt+0xa6>
		return;

	uint8_t extiLine;
	uint8_t posLine;

	extiLine = pGPIO_Interrupt->line/4; /* Lines 0 to 15, EXTI[0] to EXTI[3] */
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	089b      	lsrs	r3, r3, #2
 8000442:	73fb      	strb	r3, [r7, #15]
	posLine = pGPIO_Interrupt->line%4;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	f003 0303 	and.w	r3, r3, #3
 800044c:	73bb      	strb	r3, [r7, #14]

	SYSCFG->EXTICRx[extiLine] = (pGPIO_Interrupt->portPin << (posLine*4));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	785b      	ldrb	r3, [r3, #1]
 8000452:	461a      	mov	r2, r3
 8000454:	7bbb      	ldrb	r3, [r7, #14]
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	fa02 f103 	lsl.w	r1, r2, r3
 800045c:	4a1a      	ldr	r2, [pc, #104]	; (80004c8 <GPIO_EXTI_SetInterrupt+0xb0>)
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	3302      	adds	r3, #2
 8000462:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	EXTI->IMR |= (0x01UL << pGPIO_Interrupt->line);
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <GPIO_EXTI_SetInterrupt+0xb4>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4619      	mov	r1, r3
 8000470:	2301      	movs	r3, #1
 8000472:	408b      	lsls	r3, r1
 8000474:	4915      	ldr	r1, [pc, #84]	; (80004cc <GPIO_EXTI_SetInterrupt+0xb4>)
 8000476:	4313      	orrs	r3, r2
 8000478:	600b      	str	r3, [r1, #0]
	EXTI->RTSR |= (pGPIO_Interrupt->risingTrigger << pGPIO_Interrupt->line);
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <GPIO_EXTI_SetInterrupt+0xb4>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	7892      	ldrb	r2, [r2, #2]
 8000482:	4611      	mov	r1, r2
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7812      	ldrb	r2, [r2, #0]
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	4611      	mov	r1, r2
 800048e:	4a0f      	ldr	r2, [pc, #60]	; (80004cc <GPIO_EXTI_SetInterrupt+0xb4>)
 8000490:	430b      	orrs	r3, r1
 8000492:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= (pGPIO_Interrupt->fallingTrigger << pGPIO_Interrupt->line);
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <GPIO_EXTI_SetInterrupt+0xb4>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	78d2      	ldrb	r2, [r2, #3]
 800049c:	4611      	mov	r1, r2
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	7812      	ldrb	r2, [r2, #0]
 80004a2:	fa01 f202 	lsl.w	r2, r1, r2
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a08      	ldr	r2, [pc, #32]	; (80004cc <GPIO_EXTI_SetInterrupt+0xb4>)
 80004aa:	430b      	orrs	r3, r1
 80004ac:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(pGPIO_Interrupt->IRQn);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f80c 	bl	80004d0 <NVIC_EnableIRQ>
 80004b8:	e002      	b.n	80004c0 <GPIO_EXTI_SetInterrupt+0xa8>
		return;
 80004ba:	bf00      	nop
 80004bc:	e000      	b.n	80004c0 <GPIO_EXTI_SetInterrupt+0xa8>
		return;
 80004be:	bf00      	nop
}
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40013800 	.word	0x40013800
 80004cc:	40013c00 	.word	0x40013c00

080004d0 <NVIC_EnableIRQ>:
 *  Created on: Dec 29, 2024
 *      Author: natan
 */
#include "stm32f42xxx_nvic.h"

void NVIC_EnableIRQ(IRQn_Type IRQn) {
 80004d0:	b480      	push	{r7}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	int temp = IRQn/31;
 80004da:	79fa      	ldrb	r2, [r7, #7]
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <NVIC_EnableIRQ+0x68>)
 80004de:	fba3 1302 	umull	r1, r3, r3, r2
 80004e2:	1ad2      	subs	r2, r2, r3
 80004e4:	0852      	lsrs	r2, r2, #1
 80004e6:	4413      	add	r3, r2
 80004e8:	091b      	lsrs	r3, r3, #4
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	617b      	str	r3, [r7, #20]
	int temp1 = IRQn%31;
 80004ee:	79fa      	ldrb	r2, [r7, #7]
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <NVIC_EnableIRQ+0x68>)
 80004f2:	fba3 1302 	umull	r1, r3, r3, r2
 80004f6:	1ad1      	subs	r1, r2, r3
 80004f8:	0849      	lsrs	r1, r1, #1
 80004fa:	440b      	add	r3, r1
 80004fc:	0919      	lsrs	r1, r3, #4
 80004fe:	460b      	mov	r3, r1
 8000500:	015b      	lsls	r3, r3, #5
 8000502:	1a5b      	subs	r3, r3, r1
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	b2db      	uxtb	r3, r3
 8000508:	613b      	str	r3, [r7, #16]
	uint32_t *pISER = (uint32_t *) NVIC_ISER(temp);
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000512:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000516:	60fb      	str	r3, [r7, #12]

	*pISER |= (0x01UL << temp1);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	2101      	movs	r1, #1
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	431a      	orrs	r2, r3
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	601a      	str	r2, [r3, #0]
}
 800052a:	bf00      	nop
 800052c:	371c      	adds	r7, #28
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	08421085 	.word	0x08421085

0800053c <main>:
void delay(void);

GPIO_EXTI_CONFIG_t pInterrupt;

int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
	GPIO_Config_t gpio_config;

	RCC_Config();
 8000542:	f000 f81b 	bl	800057c <RCC_Config>
	GPIO_Config(&gpio_config);
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f835 	bl	80005b8 <GPIO_Config>
	Interrupt(&pInterrupt);
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <main+0x38>)
 8000550:	f000 f854 	bl	80005fc <Interrupt>

	/* Loop forever */
	while(true) {
		delay();
 8000554:	f000 f88c 	bl	8000670 <delay>
		GPIO_TogglePin(GPIO_PORTG, LED_RED);
 8000558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055c:	4806      	ldr	r0, [pc, #24]	; (8000578 <main+0x3c>)
 800055e:	f7ff ff1a 	bl	8000396 <GPIO_TogglePin>
		GPIO_TogglePin(GPIO_PORTG, LED_GREEN);
 8000562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0x3c>)
 8000568:	f7ff ff15 	bl	8000396 <GPIO_TogglePin>
		delay();
 800056c:	f000 f880 	bl	8000670 <delay>
		delay();
 8000570:	e7f0      	b.n	8000554 <main+0x18>
 8000572:	bf00      	nop
 8000574:	2000001c 	.word	0x2000001c
 8000578:	40021800 	.word	0x40021800

0800057c <RCC_Config>:
	}
}

void RCC_Config(void) {
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	/* RCC CR modify */
	RCC_CR_Bits->hse_on = set;
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <RCC_Config+0x34>)
 8000582:	7893      	ldrb	r3, [r2, #2]
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	7093      	strb	r3, [r2, #2]

	while(!(RCC_CR_Bits->hse_rdy)); /* wait for HSE ready */
 800058a:	bf00      	nop
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <RCC_Config+0x34>)
 800058e:	789b      	ldrb	r3, [r3, #2]
 8000590:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f8      	beq.n	800058c <RCC_Config+0x10>

	RCC_CFGR_Bits->sw = HSE_osc;
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <RCC_Config+0x38>)
 800059c:	7813      	ldrb	r3, [r2, #0]
 800059e:	2101      	movs	r1, #1
 80005a0:	f361 0301 	bfi	r3, r1, #0, #2
 80005a4:	7013      	strb	r3, [r2, #0]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40023808 	.word	0x40023808

080005b8 <GPIO_Config>:

void GPIO_Config(GPIO_Config_t *gpio_config) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	gpio_config->port = gpiog;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2206      	movs	r2, #6
 80005c4:	701a      	strb	r2, [r3, #0]
	gpio_config->pin = LED_RED|LED_GREEN;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80005cc:	805a      	strh	r2, [r3, #2]
	gpio_config->mode = output;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2201      	movs	r2, #1
 80005d2:	711a      	strb	r2, [r3, #4]
	gpio_config->type = push_pull;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	715a      	strb	r2, [r3, #5]
	gpio_config->pupd = no_pull;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	71da      	strb	r2, [r3, #7]
	gpio_config->speed = medium;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2201      	movs	r2, #1
 80005e4:	719a      	strb	r2, [r3, #6]

	GPIO_Init(GPIO_PORTG, gpio_config);
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <GPIO_Config+0x40>)
 80005ea:	f7ff fdf7 	bl	80001dc <GPIO_Init>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021800 	.word	0x40021800

080005fc <Interrupt>:

void Interrupt(GPIO_EXTI_CONFIG_t *pInterrupt) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	pInterrupt->portPin = gpioa;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
	pInterrupt->line = _L0;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	pInterrupt->fallingTrigger = reset;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	70da      	strb	r2, [r3, #3]
	pInterrupt->risingTrigger = set;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2201      	movs	r2, #1
 800061a:	709a      	strb	r2, [r3, #2]
	pInterrupt->IRQn = EXTI0;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2206      	movs	r2, #6
 8000620:	711a      	strb	r2, [r3, #4]

	GPIO_EXTI_SetInterrupt(pInterrupt);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff fef8 	bl	8000418 <GPIO_EXTI_SetInterrupt>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	EXTI->PR |= (0x01UL << pInterrupt.line);
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <EXTI0_IRQHandler+0x34>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <EXTI0_IRQHandler+0x38>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	2301      	movs	r3, #1
 8000640:	408b      	lsls	r3, r1
 8000642:	4908      	ldr	r1, [pc, #32]	; (8000664 <EXTI0_IRQHandler+0x34>)
 8000644:	4313      	orrs	r3, r2
 8000646:	614b      	str	r3, [r1, #20]
	GPIO_WritePin(GPIO_PORTG, LED_GREEN, set);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	4807      	ldr	r0, [pc, #28]	; (800066c <EXTI0_IRQHandler+0x3c>)
 8000650:	f7ff fe74 	bl	800033c <GPIO_WritePin>
	GPIO_TogglePin(GPIO_PORTG, LED_RED);
 8000654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <EXTI0_IRQHandler+0x3c>)
 800065a:	f7ff fe9c 	bl	8000396 <GPIO_TogglePin>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40013c00 	.word	0x40013c00
 8000668:	2000001c 	.word	0x2000001c
 800066c:	40021800 	.word	0x40021800

08000670 <delay>:

void delay(void) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
	for(int i = 0; i < 250; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	e00c      	b.n	8000696 <delay+0x26>
		for(int j = 0; j < 500; j++);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	e002      	b.n	8000688 <delay+0x18>
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800068e:	dbf8      	blt.n	8000682 <delay+0x12>
	for(int i = 0; i < 250; i++)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2bf9      	cmp	r3, #249	; 0xf9
 800069a:	ddef      	ble.n	800067c <delay+0xc>
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 f811 	bl	8000700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff ff2d 	bl	800053c <main>

080006e2 <LoopForever>:

LoopForever:
  b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006f0:	08000768 	.word	0x08000768
  ldr r2, =_sbss
 80006f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006f8:	20000024 	.word	0x20000024

080006fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <__libc_init_array>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	4d0d      	ldr	r5, [pc, #52]	; (8000738 <__libc_init_array+0x38>)
 8000704:	4c0d      	ldr	r4, [pc, #52]	; (800073c <__libc_init_array+0x3c>)
 8000706:	1b64      	subs	r4, r4, r5
 8000708:	10a4      	asrs	r4, r4, #2
 800070a:	2600      	movs	r6, #0
 800070c:	42a6      	cmp	r6, r4
 800070e:	d109      	bne.n	8000724 <__libc_init_array+0x24>
 8000710:	4d0b      	ldr	r5, [pc, #44]	; (8000740 <__libc_init_array+0x40>)
 8000712:	4c0c      	ldr	r4, [pc, #48]	; (8000744 <__libc_init_array+0x44>)
 8000714:	f000 f818 	bl	8000748 <_init>
 8000718:	1b64      	subs	r4, r4, r5
 800071a:	10a4      	asrs	r4, r4, #2
 800071c:	2600      	movs	r6, #0
 800071e:	42a6      	cmp	r6, r4
 8000720:	d105      	bne.n	800072e <__libc_init_array+0x2e>
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f855 3b04 	ldr.w	r3, [r5], #4
 8000728:	4798      	blx	r3
 800072a:	3601      	adds	r6, #1
 800072c:	e7ee      	b.n	800070c <__libc_init_array+0xc>
 800072e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000732:	4798      	blx	r3
 8000734:	3601      	adds	r6, #1
 8000736:	e7f2      	b.n	800071e <__libc_init_array+0x1e>
 8000738:	08000760 	.word	0x08000760
 800073c:	08000760 	.word	0x08000760
 8000740:	08000760 	.word	0x08000760
 8000744:	08000764 	.word	0x08000764

08000748 <_init>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr

08000754 <_fini>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	bf00      	nop
 8000758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075a:	bc08      	pop	{r3}
 800075c:	469e      	mov	lr, r3
 800075e:	4770      	bx	lr
